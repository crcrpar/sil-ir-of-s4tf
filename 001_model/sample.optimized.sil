sil_stage canonical

import Builtin
import Swift
import SwiftShims

import TensorFlow

@_fieldwiseDifferentiable struct Model : Differentiable {
  @_hasStorage var w: Float { get set }
  @_hasStorage var b: Float { get set }
  func applied(to input: Float) -> Float
  init(w: Float, b: Float)
  @_fieldwiseDifferentiable struct AllDifferentiableVariables : Differentiable, AdditiveArithmetic, VectorNumeric {
    @_hasStorage var w: Float
    @_hasStorage var b: Float
    init(w: Float, b: Float)
    typealias AllDifferentiableVariables = Model.AllDifferentiableVariables
    typealias TangentVector = Model.AllDifferentiableVariables
    typealias CotangentVector = Model.AllDifferentiableVariables
    static var zero: Model.AllDifferentiableVariables { get }
    static func + (lhs: Model.AllDifferentiableVariables, rhs: Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables
    static func - (lhs: Model.AllDifferentiableVariables, rhs: Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables
    func tangentVector(from cotangent: Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables
    @_implements(Equatable, ==(_:_:)) static func __derived_struct_equals(_ a: Model.AllDifferentiableVariables, _ b: Model.AllDifferentiableVariables) -> Bool
    typealias Scalar = Float
    static func * (lhs: Float, rhs: Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables
  }
  typealias TangentVector = Model.AllDifferentiableVariables
  typealias CotangentVector = Model.AllDifferentiableVariables
  var allDifferentiableVariables: Model.AllDifferentiableVariables { get set }
  func moved(along direction: Model.AllDifferentiableVariables) -> Model
  func tangentVector(from cotangent: Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables
}

@_hasInitialValue let model: Model

@_hasInitialValue let 𝛁model: Model.AllDifferentiableVariables

@_hasInitialValue let 𝛁input: Float

struct _AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1 {
  @_hasStorage var pullback_0: (Float) -> (Model.AllDifferentiableVariables, Float)
}

struct _AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1 {
  @_hasStorage var pullback_0: (Float) -> (Float, Float)
  @_hasStorage var pullback_1: (Float) -> (Float, Float)
}

// model
sil_global hidden [let] @$s6sample5modelAA5ModelVvp : $Model

// 𝛁model
sil_global hidden [let] @$s6sample0011model_pwDAdAA5ModelV26AllDifferentiableVariablesVvp : $Model.AllDifferentiableVariables

// 𝛁input
sil_global hidden [let] @$s6sample0011input_pwDAdSfvp : $Float

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s6sample5modelAA5ModelVvp        // id: %2
  %3 = global_addr @$s6sample5modelAA5ModelVvp : $*Model // users: %16, %11
  %4 = metatype $@thin Model.Type                 // user: %10
  %5 = float_literal $Builtin.FPIEEE32, 0x40800000 // 4 // user: %6
  %6 = struct $Float (%5 : $Builtin.FPIEEE32)     // user: %10
  %7 = float_literal $Builtin.FPIEEE32, 0x40400000 // 3 // user: %8
  %8 = struct $Float (%7 : $Builtin.FPIEEE32)     // user: %10
  // function_ref Model.init(w:b:)
  %9 = function_ref @$s6sample5ModelV1w1bACSf_SftcfC : $@convention(method) (Float, Float, @thin Model.Type) -> Model // user: %10
  %10 = apply %9(%6, %8, %4) : $@convention(method) (Float, Float, @thin Model.Type) -> Model // user: %11
  store %10 to %3 : $*Model                       // id: %11
  alloc_global @$s6sample0011model_pwDAdAA5ModelV26AllDifferentiableVariablesVvp // id: %12
  %13 = global_addr @$s6sample0011model_pwDAdAA5ModelV26AllDifferentiableVariablesVvp : $*Model.AllDifferentiableVariables // users: %65, %56
  alloc_global @$s6sample0011input_pwDAdSfvp      // id: %14
  %15 = global_addr @$s6sample0011input_pwDAdSfvp : $*Float // users: %83, %56
  %16 = load %3 : $*Model                         // user: %18
  %17 = alloc_stack $Model                        // users: %18, %58, %56
  store %16 to %17 : $*Model                      // id: %18
  %19 = float_literal $Builtin.FPIEEE32, 0x40000000 // 2 // user: %20
  %20 = struct $Float (%19 : $Builtin.FPIEEE32)   // user: %22
  %21 = alloc_stack $Float                        // users: %22, %57, %56
  store %20 to %21 : $*Float                      // id: %22
  // function_ref closure #1 in 
  %23 = function_ref @$s6sampleSfAA5ModelV_SftXEfU_ : $@convention(thin) (Model, Float) -> Float // user: %24
  %24 = convert_function %23 : $@convention(thin) (Model, Float) -> Float to $@convention(thin) @noescape (Model, Float) -> Float // user: %25
  %25 = thin_to_thick_function %24 : $@convention(thin) @noescape (Model, Float) -> Float to $@noescape @callee_guaranteed (Model, Float) -> Float // user: %34
  // function_ref AD__$s6sampleSfAA5ModelV_SftXEfU___jvp_src_0_wrt_0_1
  %26 = function_ref @AD__$s6sampleSfAA5ModelV_SftXEfU___jvp_src_0_wrt_0_1 : $@convention(thin) (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) // user: %27
  %27 = convert_function %26 : $@convention(thin) (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) to $@convention(thin) @noescape (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) // user: %28
  %28 = thin_to_thick_function %27 : $@convention(thin) @noescape (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) to $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) // users: %34, %29
  retain_value %28 : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) // id: %29
  // function_ref AD__$s6sampleSfAA5ModelV_SftXEfU___vjp_src_0_wrt_0_1
  %30 = function_ref @AD__$s6sampleSfAA5ModelV_SftXEfU___vjp_src_0_wrt_0_1 : $@convention(thin) (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // user: %31
  %31 = convert_function %30 : $@convention(thin) (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) to $@convention(thin) @noescape (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // user: %32
  %32 = thin_to_thick_function %31 : $@convention(thin) @noescape (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) to $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // users: %34, %33
  retain_value %32 : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // id: %33
  %34 = autodiff_function [wrt 0 1] [order 1] %25 : $@noescape @callee_guaranteed (Model, Float) -> Float with {%28 : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float), %32 : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float))} // users: %35, %41, %47
  %35 = autodiff_function_extract [original] %34 : $@differentiable @noescape @callee_guaranteed (Model, Float) -> Float // user: %37
  // function_ref thunk for @callee_guaranteed (@unowned Model, @unowned Float) -> (@unowned Float)
  %36 = function_ref @$s6sample5ModelVS2fIgyyd_ACS2fIegnnr_TR : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> Float) -> @out Float // user: %37
  %37 = partial_apply [callee_guaranteed] %36(%35) : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> Float) -> @out Float // users: %54, %39, %38, %40
  strong_retain %37 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float // id: %38
  %39 = enum $Optional<@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float>, #Optional.some!enumelt.1, %37 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float // user: %97
  %40 = convert_escape_to_noescape %37 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float to $@noescape @callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float // user: %52
  %41 = autodiff_function_extract [jvp] [order 1] %34 : $@differentiable @noescape @callee_guaranteed (Model, Float) -> Float // user: %43
  // function_ref thunk for @callee_guaranteed (@unowned Model, @unowned Float) -> (@unowned Float, @owned @escaping @callee_guaranteed (@unowned Model.AllDifferentiableVariables, @unowned Float) -> (@unowned Float))
  %42 = function_ref @$s6sample5ModelVS2fAC26AllDifferentiableVariablesVS2fIegyyd_Igyydo_ACS2fAES2fIegnnr_Iegnnro_TR : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float)) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) // user: %43
  %43 = partial_apply [callee_guaranteed] %42(%41) : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float)) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) // users: %53, %45, %44, %46
  strong_retain %43 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) // id: %44
  %45 = enum $Optional<@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float)>, #Optional.some!enumelt.1, %43 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) // user: %98
  %46 = convert_escape_to_noescape %43 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) to $@noescape @callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) // user: %52
  %47 = autodiff_function_extract [vjp] [order 1] %34 : $@differentiable @noescape @callee_guaranteed (Model, Float) -> Float // user: %49
  // function_ref thunk for @callee_guaranteed (@unowned Model, @unowned Float) -> (@unowned Float, @owned @escaping @callee_guaranteed (@unowned Float) -> (@unowned Model.AllDifferentiableVariables, @unowned Float))
  %48 = function_ref @$s6sample5ModelVS3fAC26AllDifferentiableVariablesVSfIegydd_Igyydo_ACS3fAESfIegnrr_Iegnnro_TR : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float))) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float)) // user: %49
  %49 = partial_apply [callee_guaranteed] %48(%47) : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float))) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float)) // users: %50, %51
  %50 = enum $Optional<@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float))>, #Optional.some!enumelt.1, %49 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float)) // user: %99
  %51 = convert_escape_to_noescape %49 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float)) to $@noescape @callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float)) // user: %52
  %52 = autodiff_function [wrt 0 1] [order 1] %40 : $@noescape @callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float with {%46 : $@noescape @callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float), %51 : $@noescape @callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float))} // user: %56
  strong_release %43 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) // id: %53
  strong_release %37 : $@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float // id: %54
  // function_ref Differentiable.gradient<A, B>(at:in:)
  %55 = function_ref @$ss14DifferentiablePsE8gradient2at2in15CotangentVectorQz_AFQyd__tqd___qd_0_x_qd__tXEtsAARd__sAARd_0_SFRd_0_AFs02__A0PQyd_0_Rsd_0_r0_lF : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable><τ_1_0, τ_1_1 where τ_1_0 : Differentiable, τ_1_1 : Differentiable, τ_1_1 : FloatingPoint, τ_1_1 == τ_1_1.CotangentVector> (@in_guaranteed τ_1_0, @differentiable @noescape @callee_guaranteed (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0) -> @out τ_1_1, @in_guaranteed τ_0_0) -> (@out τ_0_0.CotangentVector, @out τ_1_0.CotangentVector) // user: %56
  %56 = apply %55<Model, Float, Float>(%13, %15, %21, %52, %17) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable><τ_1_0, τ_1_1 where τ_1_0 : Differentiable, τ_1_1 : Differentiable, τ_1_1 : FloatingPoint, τ_1_1 == τ_1_1.CotangentVector> (@in_guaranteed τ_1_0, @differentiable @noescape @callee_guaranteed (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0) -> @out τ_1_1, @in_guaranteed τ_0_0) -> (@out τ_0_0.CotangentVector, @out τ_1_0.CotangentVector)
  dealloc_stack %21 : $*Float                     // id: %57
  dealloc_stack %17 : $*Model                     // id: %58
  %59 = integer_literal $Builtin.Word, 1          // user: %61
  // function_ref specialized _allocateUninitializedArray<A>(_:)
  %60 = function_ref @$ss27_allocateUninitializedArrayySayxG_BptBwlFyp_Tg5 : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer) // user: %61
  %61 = apply %60(%59) : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer) // users: %62, %63
  %62 = tuple_extract %61 : $(Array<Any>, Builtin.RawPointer), 0 // users: %76, %73
  %63 = tuple_extract %61 : $(Array<Any>, Builtin.RawPointer), 1 // user: %64
  %64 = pointer_to_address %63 : $Builtin.RawPointer to [strict] $*Any // user: %66
  %65 = load %13 : $*Model.AllDifferentiableVariables // user: %67
  %66 = init_existential_addr %64 : $*Any, $Model.AllDifferentiableVariables // user: %67
  store %65 to %66 : $*Model.AllDifferentiableVariables // id: %67
  // function_ref default argument 1 of print(_:separator:terminator:)
  %68 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String // user: %69
  %69 = apply %68() : $@convention(thin) () -> @owned String // users: %75, %73
  // function_ref default argument 2 of print(_:separator:terminator:)
  %70 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String // user: %71
  %71 = apply %70() : $@convention(thin) () -> @owned String // users: %74, %73
  // function_ref print(_:separator:terminator:)
  %72 = function_ref @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %73
  %73 = apply %72(%62, %69, %71) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %71 : $String                     // id: %74
  release_value %69 : $String                     // id: %75
  release_value %62 : $Array<Any>                 // id: %76
  %77 = integer_literal $Builtin.Word, 1          // user: %79
  // function_ref specialized _allocateUninitializedArray<A>(_:)
  %78 = function_ref @$ss27_allocateUninitializedArrayySayxG_BptBwlFyp_Tg5 : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer) // user: %79
  %79 = apply %78(%77) : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer) // users: %80, %81
  %80 = tuple_extract %79 : $(Array<Any>, Builtin.RawPointer), 0 // users: %94, %91
  %81 = tuple_extract %79 : $(Array<Any>, Builtin.RawPointer), 1 // user: %82
  %82 = pointer_to_address %81 : $Builtin.RawPointer to [strict] $*Any // user: %84
  %83 = load %15 : $*Float                        // user: %85
  %84 = init_existential_addr %82 : $*Any, $Float // user: %85
  store %83 to %84 : $*Float                      // id: %85
  // function_ref default argument 1 of print(_:separator:terminator:)
  %86 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String // user: %87
  %87 = apply %86() : $@convention(thin) () -> @owned String // users: %93, %91
  // function_ref default argument 2 of print(_:separator:terminator:)
  %88 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String // user: %89
  %89 = apply %88() : $@convention(thin) () -> @owned String // users: %92, %91
  // function_ref print(_:separator:terminator:)
  %90 = function_ref @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %91
  %91 = apply %90(%80, %87, %89) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %89 : $String                     // id: %92
  release_value %87 : $String                     // id: %93
  release_value %80 : $Array<Any>                 // id: %94
  %95 = integer_literal $Builtin.Int32, 0         // user: %96
  %96 = struct $Int32 (%95 : $Builtin.Int32)      // user: %100
  release_value %39 : $Optional<@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> @out Float> // id: %97
  release_value %45 : $Optional<@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float)> // id: %98
  release_value %50 : $Optional<@callee_guaranteed (@in_guaranteed Model, @in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float))> // id: %99
  return %96 : $Int32                             // id: %100
} // end sil function 'main'

// Model.w.getter
sil hidden [transparent] @$s6sample5ModelV1wSfvg : $@convention(method) (Model) -> Float {
// %0                                             // users: %2, %1
bb0(%0 : $Model):
  debug_value %0 : $Model, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Model, #Model.w       // user: %3
  return %2 : $Float                              // id: %3
} // end sil function '$s6sample5ModelV1wSfvg'

// Model.w.setter
sil hidden [transparent] @$s6sample5ModelV1wSfvs : $@convention(method) (Float, @inout Model) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Float, %1 : $*Model):
  debug_value %0 : $Float, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Model, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*Model // users: %7, %5
  %5 = struct_element_addr %4 : $*Model, #Model.w // user: %6
  store %0 to %5 : $*Float                        // id: %6
  end_access %4 : $*Model                         // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s6sample5ModelV1wSfvs'

// Model.w.modify
sil hidden [transparent] @$s6sample5ModelV1wSfvM : $@yield_once @convention(method) (@inout Model) -> @yields @inout Float {
// %0                                             // users: %2, %1
bb0(%0 : $*Model):
  debug_value_addr %0 : $*Model, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Model // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Model, #Model.w // user: %4
  yield %3 : $*Float, resume bb1, unwind bb2      // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Model                         // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Model                         // id: %8
  unwind                                          // id: %9
} // end sil function '$s6sample5ModelV1wSfvM'

// Model.b.getter
sil hidden [transparent] @$s6sample5ModelV1bSfvg : $@convention(method) (Model) -> Float {
// %0                                             // users: %2, %1
bb0(%0 : $Model):
  debug_value %0 : $Model, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Model, #Model.b       // user: %3
  return %2 : $Float                              // id: %3
} // end sil function '$s6sample5ModelV1bSfvg'

// Model.b.setter
sil hidden [transparent] @$s6sample5ModelV1bSfvs : $@convention(method) (Float, @inout Model) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Float, %1 : $*Model):
  debug_value %0 : $Float, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Model, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*Model // users: %7, %5
  %5 = struct_element_addr %4 : $*Model, #Model.b // user: %6
  store %0 to %5 : $*Float                        // id: %6
  end_access %4 : $*Model                         // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s6sample5ModelV1bSfvs'

// Model.b.modify
sil hidden [transparent] @$s6sample5ModelV1bSfvM : $@yield_once @convention(method) (@inout Model) -> @yields @inout Float {
// %0                                             // users: %2, %1
bb0(%0 : $*Model):
  debug_value_addr %0 : $*Model, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Model // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Model, #Model.b // user: %4
  yield %3 : $*Float, resume bb1, unwind bb2      // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Model                         // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Model                         // id: %8
  unwind                                          // id: %9
} // end sil function '$s6sample5ModelV1bSfvM'

// Model.applied(to:)
sil hidden [differentiable source 0 wrt 0, 1 jvp @AD__$s6sample5ModelV7applied2toS2f_tF__jvp_src_0_wrt_0_1 vjp @AD__$s6sample5ModelV7applied2toS2f_tF__vjp_src_0_wrt_0_1] @$s6sample5ModelV7applied2toS2f_tF : $@convention(method) (Float, Model) -> Float {
// %0                                             // users: %6, %2
// %1                                             // users: %9, %4, %3
bb0(%0 : $Float, %1 : $Model):
  debug_value %0 : $Float, let, name "input", argno 1 // id: %2
  debug_value %1 : $Model, let, name "self", argno 2 // id: %3
  %4 = struct_extract %1 : $Model, #Model.w       // user: %5
  %5 = struct_extract %4 : $Float, #Float._value  // user: %7
  %6 = struct_extract %0 : $Float, #Float._value  // user: %7
  %7 = builtin "fmul_FPIEEE32"(%5 : $Builtin.FPIEEE32, %6 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %8
  %8 = struct $Float (%7 : $Builtin.FPIEEE32)     // user: %10
  %9 = struct_extract %1 : $Model, #Model.b       // user: %11
  %10 = struct_extract %8 : $Float, #Float._value // user: %12
  %11 = struct_extract %9 : $Float, #Float._value // user: %12
  %12 = builtin "fadd_FPIEEE32"(%10 : $Builtin.FPIEEE32, %11 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %13
  %13 = struct $Float (%12 : $Builtin.FPIEEE32)   // user: %14
  return %13 : $Float                             // id: %14
} // end sil function '$s6sample5ModelV7applied2toS2f_tF'

// static Float.* infix(_:_:)
sil public_external [transparent] [serialized] [differentiable source 0 wrt 0, 1 jvp @AD__$sSf1moiyS2f_SftFZ__jvp_src_0_wrt_0_1 vjp @$sSf12_vjpMultiply3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ] [differentiable source 0 wrt 0, 1 jvp @AD__$sSf1moiyS2f_SftFZ__jvp_src_0_wrt_0_1 vjp @$sSf12_vjpMultiply3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ] @$sSf1moiyS2f_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> Float {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Float, %1 : $Float, %2 : $@thin Float.Type):
  %3 = struct_extract %0 : $Float, #Float._value  // user: %5
  %4 = struct_extract %1 : $Float, #Float._value  // user: %5
  %5 = builtin "fmul_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %6
  %6 = struct $Float (%5 : $Builtin.FPIEEE32)     // user: %7
  return %6 : $Float                              // id: %7
} // end sil function '$sSf1moiyS2f_SftFZ'

// static Float.+ infix(_:_:)
sil public_external [transparent] [serialized] [differentiable source 0 wrt 0, 1 jvp @AD__$sSf1poiyS2f_SftFZ__jvp_src_0_wrt_0_1 vjp @$sSf7_vjpAdd3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ] [differentiable source 0 wrt 0, 1 jvp @AD__$sSf1poiyS2f_SftFZ__jvp_src_0_wrt_0_1 vjp @$sSf7_vjpAdd3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ] @$sSf1poiyS2f_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> Float {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Float, %1 : $Float, %2 : $@thin Float.Type):
  %3 = struct_extract %0 : $Float, #Float._value  // user: %5
  %4 = struct_extract %1 : $Float, #Float._value  // user: %5
  %5 = builtin "fadd_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %6
  %6 = struct $Float (%5 : $Builtin.FPIEEE32)     // user: %7
  return %6 : $Float                              // id: %7
} // end sil function '$sSf1poiyS2f_SftFZ'

// Model.init(w:b:)
sil hidden @$s6sample5ModelV1w1bACSf_SftcfC : $@convention(method) (Float, Float, @thin Model.Type) -> Model {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Float, %1 : $Float, %2 : $@thin Model.Type):
  %3 = struct $Model (%0 : $Float, %1 : $Float)   // user: %4
  return %3 : $Model                              // id: %4
} // end sil function '$s6sample5ModelV1w1bACSf_SftcfC'

// Model.AllDifferentiableVariables.init(w:b:)
sil hidden @$s6sample5ModelV26AllDifferentiableVariablesV1w1bAESf_SftcfC : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Float, %1 : $Float, %2 : $@thin Model.AllDifferentiableVariables.Type):
  %3 = struct $Model.AllDifferentiableVariables (%0 : $Float, %1 : $Float) // user: %4
  return %3 : $Model.AllDifferentiableVariables   // id: %4
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesV1w1bAESf_SftcfC'

// static Model.AllDifferentiableVariables.zero.getter
sil hidden @$s6sample5ModelV26AllDifferentiableVariablesV4zeroAEvgZ : $@convention(method) (@thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables {
// %0                                             // user: %1
bb0(%0 : $@thin Model.AllDifferentiableVariables.Type):
  debug_value %0 : $@thin Model.AllDifferentiableVariables.Type, let, name "self", argno 1 // id: %1
  %2 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %16
  %3 = metatype $@thin Float.Type
  %4 = alloc_stack $Float                         // users: %8, %18, %7
  %5 = metatype $@thick Float.Type                // user: %7
  // function_ref static AdditiveArithmetic<>.zero.getter
  %6 = function_ref @$ss18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvgZ : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic, τ_0_0 : ExpressibleByIntegerLiteral> (@thick τ_0_0.Type) -> @out τ_0_0 // user: %7
  %7 = apply %6<Float>(%4, %5) : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic, τ_0_0 : ExpressibleByIntegerLiteral> (@thick τ_0_0.Type) -> @out τ_0_0
  %8 = load %4 : $*Float                          // user: %16
  %9 = metatype $@thin Float.Type
  %10 = alloc_stack $Float                        // users: %14, %17, %13
  %11 = metatype $@thick Float.Type               // user: %13
  // function_ref static AdditiveArithmetic<>.zero.getter
  %12 = function_ref @$ss18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvgZ : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic, τ_0_0 : ExpressibleByIntegerLiteral> (@thick τ_0_0.Type) -> @out τ_0_0 // user: %13
  %13 = apply %12<Float>(%10, %11) : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic, τ_0_0 : ExpressibleByIntegerLiteral> (@thick τ_0_0.Type) -> @out τ_0_0
  %14 = load %10 : $*Float                        // user: %16
  // function_ref Model.AllDifferentiableVariables.init(w:b:)
  %15 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1w1bAESf_SftcfC : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %16
  %16 = apply %15(%8, %14, %2) : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %19
  dealloc_stack %10 : $*Float                     // id: %17
  dealloc_stack %4 : $*Float                      // id: %18
  return %16 : $Model.AllDifferentiableVariables  // id: %19
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesV4zeroAEvgZ'

// static AdditiveArithmetic<>.zero.getter
sil @$ss18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvgZ : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic, τ_0_0 : ExpressibleByIntegerLiteral> (@thick τ_0_0.Type) -> @out τ_0_0

// static Model.AllDifferentiableVariables.+ infix(_:_:)
sil hidden @$s6sample5ModelV26AllDifferentiableVariablesV1poiyA2E_AEtFZ : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables {
// %0                                             // users: %13, %7, %3
// %1                                             // users: %14, %8, %4
// %2                                             // user: %5
bb0(%0 : $Model.AllDifferentiableVariables, %1 : $Model.AllDifferentiableVariables, %2 : $@thin Model.AllDifferentiableVariables.Type):
  debug_value %0 : $Model.AllDifferentiableVariables, let, name "lhs", argno 1 // id: %3
  debug_value %1 : $Model.AllDifferentiableVariables, let, name "rhs", argno 2 // id: %4
  debug_value %2 : $@thin Model.AllDifferentiableVariables.Type, let, name "self", argno 3 // id: %5
  %6 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %20
  %7 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %9
  %8 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %10
  %9 = struct_extract %7 : $Float, #Float._value  // user: %11
  %10 = struct_extract %8 : $Float, #Float._value // user: %11
  %11 = builtin "fadd_FPIEEE32"(%9 : $Builtin.FPIEEE32, %10 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %12
  %12 = struct $Float (%11 : $Builtin.FPIEEE32)   // user: %20
  %13 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %15
  %14 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %16
  %15 = struct_extract %13 : $Float, #Float._value // user: %17
  %16 = struct_extract %14 : $Float, #Float._value // user: %17
  %17 = builtin "fadd_FPIEEE32"(%15 : $Builtin.FPIEEE32, %16 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %18
  %18 = struct $Float (%17 : $Builtin.FPIEEE32)   // user: %20
  // function_ref Model.AllDifferentiableVariables.init(w:b:)
  %19 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1w1bAESf_SftcfC : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %20
  %20 = apply %19(%12, %18, %6) : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %21
  return %20 : $Model.AllDifferentiableVariables  // id: %21
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesV1poiyA2E_AEtFZ'

// static Model.AllDifferentiableVariables.- infix(_:_:)
sil hidden @$s6sample5ModelV26AllDifferentiableVariablesV1soiyA2E_AEtFZ : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables {
// %0                                             // users: %13, %7, %3
// %1                                             // users: %14, %8, %4
// %2                                             // user: %5
bb0(%0 : $Model.AllDifferentiableVariables, %1 : $Model.AllDifferentiableVariables, %2 : $@thin Model.AllDifferentiableVariables.Type):
  debug_value %0 : $Model.AllDifferentiableVariables, let, name "lhs", argno 1 // id: %3
  debug_value %1 : $Model.AllDifferentiableVariables, let, name "rhs", argno 2 // id: %4
  debug_value %2 : $@thin Model.AllDifferentiableVariables.Type, let, name "self", argno 3 // id: %5
  %6 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %20
  %7 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %9
  %8 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %10
  %9 = struct_extract %7 : $Float, #Float._value  // user: %11
  %10 = struct_extract %8 : $Float, #Float._value // user: %11
  %11 = builtin "fsub_FPIEEE32"(%9 : $Builtin.FPIEEE32, %10 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %12
  %12 = struct $Float (%11 : $Builtin.FPIEEE32)   // user: %20
  %13 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %15
  %14 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %16
  %15 = struct_extract %13 : $Float, #Float._value // user: %17
  %16 = struct_extract %14 : $Float, #Float._value // user: %17
  %17 = builtin "fsub_FPIEEE32"(%15 : $Builtin.FPIEEE32, %16 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %18
  %18 = struct $Float (%17 : $Builtin.FPIEEE32)   // user: %20
  // function_ref Model.AllDifferentiableVariables.init(w:b:)
  %19 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1w1bAESf_SftcfC : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %20
  %20 = apply %19(%12, %18, %6) : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %21
  return %20 : $Model.AllDifferentiableVariables  // id: %21
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesV1soiyA2E_AEtFZ'

// static Float.- infix(_:_:)
sil public_external [transparent] [serialized] [differentiable source 0 wrt 0, 1 jvp @AD__$sSf1soiyS2f_SftFZ__jvp_src_0_wrt_0_1 vjp @$sSf12_vjpSubtract3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ] [differentiable source 0 wrt 0, 1 jvp @AD__$sSf1soiyS2f_SftFZ__jvp_src_0_wrt_0_1 vjp @$sSf12_vjpSubtract3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ] @$sSf1soiyS2f_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> Float {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Float, %1 : $Float, %2 : $@thin Float.Type):
  %3 = struct_extract %0 : $Float, #Float._value  // user: %5
  %4 = struct_extract %1 : $Float, #Float._value  // user: %5
  %5 = builtin "fsub_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %6
  %6 = struct $Float (%5 : $Builtin.FPIEEE32)     // user: %7
  return %6 : $Float                              // id: %7
} // end sil function '$sSf1soiyS2f_SftFZ'

// Model.AllDifferentiableVariables.tangentVector(from:)
sil hidden @$s6sample5ModelV26AllDifferentiableVariablesV13tangentVector4fromA2E_tF : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables {
// %0                                             // users: %4, %2
// %1                                             // user: %3
bb0(%0 : $Model.AllDifferentiableVariables, %1 : $Model.AllDifferentiableVariables):
  debug_value %0 : $Model.AllDifferentiableVariables, let, name "cotangent", argno 1 // id: %2
  debug_value %1 : $Model.AllDifferentiableVariables, let, name "self", argno 2 // id: %3
  return %0 : $Model.AllDifferentiableVariables   // id: %4
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesV13tangentVector4fromA2E_tF'

// static Model.AllDifferentiableVariables.__derived_struct_equals(_:_:)
sil hidden @$s6sample5ModelV26AllDifferentiableVariablesV23__derived_struct_equalsySbAE_AEtFZ : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Bool {
// %0                                             // users: %16, %7, %3
// %1                                             // users: %18, %9, %4
// %2                                             // user: %5
bb0(%0 : $Model.AllDifferentiableVariables, %1 : $Model.AllDifferentiableVariables, %2 : $@thin Model.AllDifferentiableVariables.Type):
  debug_value %0 : $Model.AllDifferentiableVariables, let, name "a", argno 1 // id: %3
  debug_value %1 : $Model.AllDifferentiableVariables, let, name "b", argno 2 // id: %4
  debug_value %2 : $@thin Model.AllDifferentiableVariables.Type, let, name "self", argno 3 // id: %5
  %6 = metatype $@thin Float.Type
  %7 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %8
  %8 = struct_extract %7 : $Float, #Float._value  // user: %11
  %9 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %10
  %10 = struct_extract %9 : $Float, #Float._value // user: %11
  %11 = builtin "fcmp_oeq_FPIEEE32"(%8 : $Builtin.FPIEEE32, %10 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %12
  %12 = struct $Bool (%11 : $Builtin.Int1)        // user: %13
  %13 = struct_extract %12 : $Bool, #Bool._value  // user: %14
  cond_br %13, bb1, bb4                           // id: %14

bb1:                                              // Preds: bb0
  %15 = metatype $@thin Float.Type
  %16 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %17
  %17 = struct_extract %16 : $Float, #Float._value // user: %20
  %18 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %19
  %19 = struct_extract %18 : $Float, #Float._value // user: %20
  %20 = builtin "fcmp_oeq_FPIEEE32"(%17 : $Builtin.FPIEEE32, %19 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %21
  %21 = struct $Bool (%20 : $Builtin.Int1)        // user: %22
  %22 = struct_extract %21 : $Bool, #Bool._value  // user: %23
  cond_br %22, bb2, bb3                           // id: %23

bb2:                                              // Preds: bb1
  %24 = integer_literal $Builtin.Int1, -1         // user: %25
  %25 = struct $Bool (%24 : $Builtin.Int1)        // user: %26
  br bb5(%25 : $Bool)                             // id: %26

bb3:                                              // Preds: bb1
  %27 = integer_literal $Builtin.Int1, 0          // user: %28
  %28 = struct $Bool (%27 : $Builtin.Int1)        // user: %29
  br bb5(%28 : $Bool)                             // id: %29

bb4:                                              // Preds: bb0
  %30 = integer_literal $Builtin.Int1, 0          // user: %31
  %31 = struct $Bool (%30 : $Builtin.Int1)        // user: %32
  br bb5(%31 : $Bool)                             // id: %32

// %33                                            // user: %34
bb5(%33 : $Bool):                                 // Preds: bb2 bb3 bb4
  return %33 : $Bool                              // id: %34
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesV23__derived_struct_equalsySbAE_AEtFZ'

// Bool.init(_builtinBooleanLiteral:)
sil public_external [transparent] [serialized] @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool {
// %0                                             // user: %2
bb0(%0 : $Builtin.Int1, %1 : $@thin Bool.Type):
  %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$sSb22_builtinBooleanLiteralSbBi1__tcfC'

// static FloatingPoint.== infix(_:_:)
sil public_external [transparent] [serialized] @$sSFsE2eeoiySbx_xtFZ : $@convention(method) <Self where Self : FloatingPoint> (@in_guaranteed Self, @in_guaranteed Self, @thick Self.Type) -> Bool {
// %0                                             // user: %4
// %1                                             // user: %4
bb0(%0 : $*Self, %1 : $*Self, %2 : $@thick Self.Type):
  %3 = witness_method $Self, #FloatingPoint.isEqual!1 : <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool // user: %4
  %4 = apply %3<Self>(%1, %0) : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool // user: %5
  return %4 : $Bool                               // id: %5
} // end sil function '$sSFsE2eeoiySbx_xtFZ'

// Bool._getBuiltinLogicValue()
sil public_external [transparent] [serialized] @$sSb21_getBuiltinLogicValueBi1_yF : $@convention(method) (Bool) -> Builtin.Int1 {
// %0                                             // user: %1
bb0(%0 : $Bool):
  %1 = struct_extract %0 : $Bool, #Bool._value    // user: %2
  return %1 : $Builtin.Int1                       // id: %2
} // end sil function '$sSb21_getBuiltinLogicValueBi1_yF'

// static Model.AllDifferentiableVariables.* infix(_:_:)
sil hidden @$s6sample5ModelV26AllDifferentiableVariablesV1moiyAESf_AEtFZ : $@convention(method) (Float, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables {
// %0                                             // users: %13, %8, %3
// %1                                             // users: %12, %7, %4
// %2                                             // user: %5
bb0(%0 : $Float, %1 : $Model.AllDifferentiableVariables, %2 : $@thin Model.AllDifferentiableVariables.Type):
  debug_value %0 : $Float, let, name "lhs", argno 1 // id: %3
  debug_value %1 : $Model.AllDifferentiableVariables, let, name "rhs", argno 2 // id: %4
  debug_value %2 : $@thin Model.AllDifferentiableVariables.Type, let, name "self", argno 3 // id: %5
  %6 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %18
  %7 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %9
  %8 = struct_extract %0 : $Float, #Float._value  // user: %10
  %9 = struct_extract %7 : $Float, #Float._value  // user: %10
  %10 = builtin "fmul_FPIEEE32"(%8 : $Builtin.FPIEEE32, %9 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %11
  %11 = struct $Float (%10 : $Builtin.FPIEEE32)   // user: %18
  %12 = struct_extract %1 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %14
  %13 = struct_extract %0 : $Float, #Float._value // user: %15
  %14 = struct_extract %12 : $Float, #Float._value // user: %15
  %15 = builtin "fmul_FPIEEE32"(%13 : $Builtin.FPIEEE32, %14 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %16
  %16 = struct $Float (%15 : $Builtin.FPIEEE32)   // user: %18
  // function_ref Model.AllDifferentiableVariables.init(w:b:)
  %17 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1w1bAESf_SftcfC : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %18
  %18 = apply %17(%11, %16, %6) : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %19
  return %18 : $Model.AllDifferentiableVariables  // id: %19
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesV1moiyAESf_AEtFZ'

// protocol witness for static AdditiveArithmetic.zero.getter in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP4zeroxvgZTW : $@convention(witness_method: AdditiveArithmetic) (@thick Model.AllDifferentiableVariables.Type) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %5
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $@thick Model.AllDifferentiableVariables.Type):
  %2 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %4
  // function_ref static Model.AllDifferentiableVariables.zero.getter
  %3 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV4zeroAEvgZ : $@convention(method) (@thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %5
  store %4 to %0 : $*Model.AllDifferentiableVariables // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP4zeroxvgZTW'

// protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP1poiyxx_xtFZTW : $@convention(witness_method: AdditiveArithmetic) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Model.AllDifferentiableVariables, @thick Model.AllDifferentiableVariables.Type) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %9
// %1                                             // user: %4
// %2                                             // user: %5
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $*Model.AllDifferentiableVariables, %3 : $@thick Model.AllDifferentiableVariables.Type):
  %4 = load %1 : $*Model.AllDifferentiableVariables // user: %8
  %5 = load %2 : $*Model.AllDifferentiableVariables // user: %8
  %6 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %8
  // function_ref static Model.AllDifferentiableVariables.+ infix(_:_:)
  %7 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1poiyA2E_AEtFZ : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %8
  %8 = apply %7(%4, %5, %6) : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %9
  store %8 to %0 : $*Model.AllDifferentiableVariables // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP1poiyxx_xtFZTW'

// protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP2peoiyyxz_xtFZTW : $@convention(witness_method: AdditiveArithmetic) (@inout Model.AllDifferentiableVariables, @in_guaranteed Model.AllDifferentiableVariables, @thick Model.AllDifferentiableVariables.Type) -> () {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $@thick Model.AllDifferentiableVariables.Type):
  // function_ref static AdditiveArithmetic.+= infix(_:_:)
  %3 = function_ref @$ss18AdditiveArithmeticPsE2peoiyyxz_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@inout τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> () // user: %4
  %4 = apply %3<Model.AllDifferentiableVariables>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@inout τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP2peoiyyxz_xtFZTW'

// static AdditiveArithmetic.+= infix(_:_:)
sil @$ss18AdditiveArithmeticPsE2peoiyyxz_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@inout τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> ()

// protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP1soiyxx_xtFZTW : $@convention(witness_method: AdditiveArithmetic) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Model.AllDifferentiableVariables, @thick Model.AllDifferentiableVariables.Type) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %9
// %1                                             // user: %4
// %2                                             // user: %5
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $*Model.AllDifferentiableVariables, %3 : $@thick Model.AllDifferentiableVariables.Type):
  %4 = load %1 : $*Model.AllDifferentiableVariables // user: %8
  %5 = load %2 : $*Model.AllDifferentiableVariables // user: %8
  %6 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %8
  // function_ref static Model.AllDifferentiableVariables.- infix(_:_:)
  %7 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1soiyA2E_AEtFZ : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %8
  %8 = apply %7(%4, %5, %6) : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %9
  store %8 to %0 : $*Model.AllDifferentiableVariables // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP1soiyxx_xtFZTW'

// protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP2seoiyyxz_xtFZTW : $@convention(witness_method: AdditiveArithmetic) (@inout Model.AllDifferentiableVariables, @in_guaranteed Model.AllDifferentiableVariables, @thick Model.AllDifferentiableVariables.Type) -> () {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $@thick Model.AllDifferentiableVariables.Type):
  // function_ref static AdditiveArithmetic.-= infix(_:_:)
  %3 = function_ref @$ss18AdditiveArithmeticPsE2seoiyyxz_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@inout τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> () // user: %4
  %4 = apply %3<Model.AllDifferentiableVariables>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@inout τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP2seoiyyxz_xtFZTW'

// static AdditiveArithmetic.-= infix(_:_:)
sil @$ss18AdditiveArithmeticPsE2seoiyyxz_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@inout τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> ()

// protocol witness for static Equatable.== infix(_:_:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Model.AllDifferentiableVariables, @thick Model.AllDifferentiableVariables.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $@thick Model.AllDifferentiableVariables.Type):
  %3 = load %0 : $*Model.AllDifferentiableVariables // user: %7
  %4 = load %1 : $*Model.AllDifferentiableVariables // user: %7
  %5 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %7
  // function_ref static Model.AllDifferentiableVariables.__derived_struct_equals(_:_:)
  %6 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV23__derived_struct_equalsySbAE_AEtFZ : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Bool // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Bool // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVSQAASQ2eeoiySbx_xtFZTW'

// protocol witness for static VectorNumeric.* infix(_:_:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs13VectorNumericAAsAFP1moiyx6ScalarQz_xtFZTW : $@convention(witness_method: VectorNumeric) (@in_guaranteed Float, @in_guaranteed Model.AllDifferentiableVariables, @thick Model.AllDifferentiableVariables.Type) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %9
// %1                                             // user: %4
// %2                                             // user: %5
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Float, %2 : $*Model.AllDifferentiableVariables, %3 : $@thick Model.AllDifferentiableVariables.Type):
  %4 = load %1 : $*Float                          // user: %8
  %5 = load %2 : $*Model.AllDifferentiableVariables // user: %8
  %6 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %8
  // function_ref static Model.AllDifferentiableVariables.* infix(_:_:)
  %7 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1moiyAESf_AEtFZ : $@convention(method) (Float, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %8
  %8 = apply %7(%4, %5, %6) : $@convention(method) (Float, Model.AllDifferentiableVariables, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %9
  store %8 to %0 : $*Model.AllDifferentiableVariables // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs13VectorNumericAAsAFP1moiyx6ScalarQz_xtFZTW'

// protocol witness for static VectorNumeric.*= infix(_:_:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs13VectorNumericAAsAFP2meoiyyxz_6ScalarQztFZTW : $@convention(witness_method: VectorNumeric) (@inout Model.AllDifferentiableVariables, @in_guaranteed Float, @thick Model.AllDifferentiableVariables.Type) -> () {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Float, %2 : $@thick Model.AllDifferentiableVariables.Type):
  // function_ref static VectorNumeric.*= infix(_:_:)
  %3 = function_ref @$ss13VectorNumericPsE2meoiyyxz_6ScalarQztFZ : $@convention(method) <τ_0_0 where τ_0_0 : VectorNumeric> (@inout τ_0_0, @in_guaranteed τ_0_0.Scalar, @thick τ_0_0.Type) -> () // user: %4
  %4 = apply %3<Model.AllDifferentiableVariables>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : VectorNumeric> (@inout τ_0_0, @in_guaranteed τ_0_0.Scalar, @thick τ_0_0.Type) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs13VectorNumericAAsAFP2meoiyyxz_6ScalarQztFZTW'

// static VectorNumeric.*= infix(_:_:)
sil @$ss13VectorNumericPsE2meoiyyxz_6ScalarQztFZ : $@convention(method) <τ_0_0 where τ_0_0 : VectorNumeric> (@inout τ_0_0, @in_guaranteed τ_0_0.Scalar, @thick τ_0_0.Type) -> ()

// protocol witness for __Differentiable.allDifferentiableVariables.getter in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvgTW : $@convention(witness_method: __Differentiable) (@in_guaranteed Model.AllDifferentiableVariables) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables):
  // function_ref Differentiable<>.allDifferentiableVariables.getter
  %2 = function_ref @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvg : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in_guaranteed τ_0_0) -> @out τ_0_0 // user: %3
  %3 = apply %2<Model.AllDifferentiableVariables>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in_guaranteed τ_0_0) -> @out τ_0_0
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvgTW'

// Differentiable<>.allDifferentiableVariables.getter
sil @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvg : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in_guaranteed τ_0_0) -> @out τ_0_0

// protocol witness for __Differentiable.allDifferentiableVariables.setter in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvsTW : $@convention(witness_method: __Differentiable) (@in Model.AllDifferentiableVariables, @inout Model.AllDifferentiableVariables) -> () {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables):
  // function_ref Differentiable<>.allDifferentiableVariables.setter
  %2 = function_ref @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvs : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in τ_0_0, @inout τ_0_0) -> () // user: %3
  %3 = apply %2<Model.AllDifferentiableVariables>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in τ_0_0, @inout τ_0_0) -> ()
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvsTW'

// Differentiable<>.allDifferentiableVariables.setter
sil @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvs : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in τ_0_0, @inout τ_0_0) -> ()

// protocol witness for __Differentiable.allDifferentiableVariables.modify in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvMTW : $@yield_once @convention(witness_method: __Differentiable) (@inout Model.AllDifferentiableVariables) -> @yields @inout Model.AllDifferentiableVariables {
// %0                                             // user: %2
bb0(%0 : $*Model.AllDifferentiableVariables):
  // function_ref Differentiable<>.allDifferentiableVariables.modify
  %1 = function_ref @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvM : $@yield_once @convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@inout τ_0_0) -> @yields @inout τ_0_0 // user: %2
  (%2, %3) = begin_apply %1<Model.AllDifferentiableVariables>(%0) : $@yield_once @convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@inout τ_0_0) -> @yields @inout τ_0_0 // users: %4, %5, %8
  yield %2 : $*Model.AllDifferentiableVariables, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_apply %3                                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  abort_apply %3                                  // id: %8
  unwind                                          // id: %9
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvMTW'

// Differentiable<>.allDifferentiableVariables.modify
sil @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvM : $@yield_once @convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@inout τ_0_0) -> @yields @inout τ_0_0

// protocol witness for __Differentiable.moved(along:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP5moved5alongx13TangentVectorQz_tFTW : $@convention(witness_method: __Differentiable) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Model.AllDifferentiableVariables) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $*Model.AllDifferentiableVariables):
  // function_ref Differentiable<>.moved(along:)
  %3 = function_ref @$ss14DifferentiablePs13TangentVectors02__A0PQzRszrlE5moved5alongxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.TangentVector> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0 // user: %4
  %4 = apply %3<Model.AllDifferentiableVariables>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.TangentVector> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP5moved5alongx13TangentVectorQz_tFTW'

// Differentiable<>.moved(along:)
sil @$ss14DifferentiablePs13TangentVectors02__A0PQzRszrlE5moved5alongxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.TangentVector> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0

// protocol witness for __Differentiable.tangentVector(from:) in conformance Model.AllDifferentiableVariables
sil private [transparent] [thunk] @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP13tangentVector4from07TangentG0Qz09CotangentG0Qz_tFTW : $@convention(witness_method: __Differentiable) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Model.AllDifferentiableVariables) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %7
// %1                                             // user: %3
// %2                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $*Model.AllDifferentiableVariables):
  %3 = load %1 : $*Model.AllDifferentiableVariables // user: %6
  %4 = load %2 : $*Model.AllDifferentiableVariables // user: %6
  // function_ref Model.AllDifferentiableVariables.tangentVector(from:)
  %5 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV13tangentVector4fromA2E_tF : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables // user: %6
  %6 = apply %5(%3, %4) : $@convention(method) (Model.AllDifferentiableVariables, Model.AllDifferentiableVariables) -> Model.AllDifferentiableVariables // user: %7
  store %6 to %0 : $*Model.AllDifferentiableVariables // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP13tangentVector4from07TangentG0Qz09CotangentG0Qz_tFTW'

// Model.allDifferentiableVariables.getter
sil hidden @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvg : $@convention(method) (Model) -> Model.AllDifferentiableVariables {
// %0                                             // users: %11, %3, %1
bb0(%0 : $Model):
  debug_value %0 : $Model, let, name "self", argno 1 // id: %1
  %2 = metatype $@thin Model.AllDifferentiableVariables.Type // user: %20
  %3 = struct_extract %0 : $Model, #Model.w       // user: %6
  %4 = alloc_stack $Float                         // users: %10, %22, %8
  %5 = alloc_stack $Float                         // users: %6, %9, %8
  store %3 to %5 : $*Float                        // id: %6
  // function_ref Differentiable<>.allDifferentiableVariables.getter
  %7 = function_ref @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvg : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in_guaranteed τ_0_0) -> @out τ_0_0 // user: %8
  %8 = apply %7<Float>(%4, %5) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in_guaranteed τ_0_0) -> @out τ_0_0
  dealloc_stack %5 : $*Float                      // id: %9
  %10 = load %4 : $*Float                         // user: %20
  %11 = struct_extract %0 : $Model, #Model.b      // user: %14
  %12 = alloc_stack $Float                        // users: %18, %21, %16
  %13 = alloc_stack $Float                        // users: %14, %17, %16
  store %11 to %13 : $*Float                      // id: %14
  // function_ref Differentiable<>.allDifferentiableVariables.getter
  %15 = function_ref @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvg : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in_guaranteed τ_0_0) -> @out τ_0_0 // user: %16
  %16 = apply %15<Float>(%12, %13) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in_guaranteed τ_0_0) -> @out τ_0_0
  dealloc_stack %13 : $*Float                     // id: %17
  %18 = load %12 : $*Float                        // user: %20
  // function_ref Model.AllDifferentiableVariables.init(w:b:)
  %19 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesV1w1bAESf_SftcfC : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %20
  %20 = apply %19(%10, %18, %2) : $@convention(method) (Float, Float, @thin Model.AllDifferentiableVariables.Type) -> Model.AllDifferentiableVariables // user: %23
  dealloc_stack %12 : $*Float                     // id: %21
  dealloc_stack %4 : $*Float                      // id: %22
  return %20 : $Model.AllDifferentiableVariables  // id: %23
} // end sil function '$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvg'

// Model.allDifferentiableVariables.setter
sil hidden @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvs : $@convention(method) (Model.AllDifferentiableVariables, @inout Model) -> () {
// %0                                             // users: %13, %4, %2
// %1                                             // users: %16, %7, %3
bb0(%0 : $Model.AllDifferentiableVariables, %1 : $*Model):
  debug_value %0 : $Model.AllDifferentiableVariables, let, name "newValue", argno 1 // id: %2
  debug_value_addr %1 : $*Model, var, name "self", argno 2 // id: %3
  %4 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %6
  %5 = alloc_stack $Float                         // users: %6, %12, %10
  store %4 to %5 : $*Float                        // id: %6
  %7 = begin_access [modify] [static] %1 : $*Model // users: %11, %8
  %8 = struct_element_addr %7 : $*Model, #Model.w // user: %10
  // function_ref Differentiable<>.allDifferentiableVariables.setter
  %9 = function_ref @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvs : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in τ_0_0, @inout τ_0_0) -> () // user: %10
  %10 = apply %9<Float>(%5, %8) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in τ_0_0, @inout τ_0_0) -> ()
  end_access %7 : $*Model                         // id: %11
  dealloc_stack %5 : $*Float                      // id: %12
  %13 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %15
  %14 = alloc_stack $Float                        // users: %15, %21, %19
  store %13 to %14 : $*Float                      // id: %15
  %16 = begin_access [modify] [static] %1 : $*Model // users: %20, %17
  %17 = struct_element_addr %16 : $*Model, #Model.b // user: %19
  // function_ref Differentiable<>.allDifferentiableVariables.setter
  %18 = function_ref @$ss14DifferentiablePs03AllA9VariablesQzRszrlE03allaC0xvs : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in τ_0_0, @inout τ_0_0) -> () // user: %19
  %19 = apply %18<Float>(%14, %17) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.AllDifferentiableVariables> (@in τ_0_0, @inout τ_0_0) -> ()
  end_access %16 : $*Model                        // id: %20
  dealloc_stack %14 : $*Float                     // id: %21
  %22 = tuple ()                                  // user: %23
  return %22 : $()                                // id: %23
} // end sil function '$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvs'

// Model.allDifferentiableVariables.modify
sil hidden [transparent] @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0VvM : $@yield_once @convention(method) (@inout Model) -> @yields @inout Model.AllDifferentiableVariables {
// %0                                             // users: %2, %1
bb0(%0 : $*Model):
  debug_value_addr %0 : $*Model, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Model // users: %4, %12, %11, %20, %18
  %3 = alloc_stack $Model.AllDifferentiableVariables // users: %16, %9, %7, %13, %19, %8
  %4 = load %2 : $*Model                          // user: %6
  // function_ref Model.allDifferentiableVariables.getter
  %5 = function_ref @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvg : $@convention(method) (Model) -> Model.AllDifferentiableVariables // user: %6
  %6 = apply %5(%4) : $@convention(method) (Model) -> Model.AllDifferentiableVariables // user: %7
  store %6 to %3 : $*Model.AllDifferentiableVariables // id: %7
  yield %3 : $*Model.AllDifferentiableVariables, resume bb1, unwind bb2 // id: %8

bb1:                                              // Preds: bb0
  %9 = load %3 : $*Model.AllDifferentiableVariables // user: %11
  // function_ref Model.allDifferentiableVariables.setter
  %10 = function_ref @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvs : $@convention(method) (Model.AllDifferentiableVariables, @inout Model) -> () // user: %11
  %11 = apply %10(%9, %2) : $@convention(method) (Model.AllDifferentiableVariables, @inout Model) -> ()
  end_access %2 : $*Model                         // id: %12
  dealloc_stack %3 : $*Model.AllDifferentiableVariables // id: %13
  %14 = tuple ()                                  // user: %15
  return %14 : $()                                // id: %15

bb2:                                              // Preds: bb0
  %16 = load %3 : $*Model.AllDifferentiableVariables // user: %18
  // function_ref Model.allDifferentiableVariables.setter
  %17 = function_ref @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvs : $@convention(method) (Model.AllDifferentiableVariables, @inout Model) -> () // user: %18
  %18 = apply %17(%16, %2) : $@convention(method) (Model.AllDifferentiableVariables, @inout Model) -> ()
  dealloc_stack %3 : $*Model.AllDifferentiableVariables // id: %19
  end_access %2 : $*Model                         // id: %20
  unwind                                          // id: %21
} // end sil function '$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0VvM'

// Model.moved(along:)
sil hidden @$s6sample5ModelV5moved5alongA2C26AllDifferentiableVariablesV_tF : $@convention(method) (Model.AllDifferentiableVariables, Model) -> Model {
// %0                                             // users: %21, %9, %2
// %1                                             // users: %18, %6, %3
bb0(%0 : $Model.AllDifferentiableVariables, %1 : $Model):
  debug_value %0 : $Model.AllDifferentiableVariables, let, name "direction", argno 1 // id: %2
  debug_value %1 : $Model, let, name "self", argno 2 // id: %3
  %4 = metatype $@thin Model.Type                 // user: %30
  %5 = alloc_stack $Float                         // users: %16, %32, %13
  %6 = struct_extract %1 : $Model, #Model.w       // user: %8
  %7 = alloc_stack $Float                         // users: %8, %15, %13
  store %6 to %7 : $*Float                        // id: %8
  %9 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.w // user: %11
  %10 = alloc_stack $Float                        // users: %11, %14, %13
  store %9 to %10 : $*Float                       // id: %11
  // function_ref Differentiable<>.moved(along:)
  %12 = function_ref @$ss14DifferentiablePs13TangentVectors02__A0PQzRszrlE5moved5alongxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.TangentVector> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0 // user: %13
  %13 = apply %12<Float>(%5, %10, %7) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.TangentVector> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0
  dealloc_stack %10 : $*Float                     // id: %14
  dealloc_stack %7 : $*Float                      // id: %15
  %16 = load %5 : $*Float                         // user: %30
  %17 = alloc_stack $Float                        // users: %28, %31, %25
  %18 = struct_extract %1 : $Model, #Model.b      // user: %20
  %19 = alloc_stack $Float                        // users: %20, %27, %25
  store %18 to %19 : $*Float                      // id: %20
  %21 = struct_extract %0 : $Model.AllDifferentiableVariables, #Model.AllDifferentiableVariables.b // user: %23
  %22 = alloc_stack $Float                        // users: %23, %26, %25
  store %21 to %22 : $*Float                      // id: %23
  // function_ref Differentiable<>.moved(along:)
  %24 = function_ref @$ss14DifferentiablePs13TangentVectors02__A0PQzRszrlE5moved5alongxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.TangentVector> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0 // user: %25
  %25 = apply %24<Float>(%17, %22, %19) : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable, τ_0_0 == τ_0_0.TangentVector> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0
  dealloc_stack %22 : $*Float                     // id: %26
  dealloc_stack %19 : $*Float                     // id: %27
  %28 = load %17 : $*Float                        // user: %30
  // function_ref Model.init(w:b:)
  %29 = function_ref @$s6sample5ModelV1w1bACSf_SftcfC : $@convention(method) (Float, Float, @thin Model.Type) -> Model // user: %30
  %30 = apply %29(%16, %28, %4) : $@convention(method) (Float, Float, @thin Model.Type) -> Model // user: %33
  dealloc_stack %17 : $*Float                     // id: %31
  dealloc_stack %5 : $*Float                      // id: %32
  return %30 : $Model                             // id: %33
} // end sil function '$s6sample5ModelV5moved5alongA2C26AllDifferentiableVariablesV_tF'

// Model.tangentVector(from:)
sil hidden @$s6sample5ModelV13tangentVector4fromAC26AllDifferentiableVariablesVAG_tF : $@convention(method) (Model.AllDifferentiableVariables, Model) -> Model.AllDifferentiableVariables {
// %0                                             // users: %4, %2
// %1                                             // user: %3
bb0(%0 : $Model.AllDifferentiableVariables, %1 : $Model):
  debug_value %0 : $Model.AllDifferentiableVariables, let, name "cotangent", argno 1 // id: %2
  debug_value %1 : $Model, let, name "self", argno 2 // id: %3
  return %0 : $Model.AllDifferentiableVariables   // id: %4
} // end sil function '$s6sample5ModelV13tangentVector4fromAC26AllDifferentiableVariablesVAG_tF'

// protocol witness for __Differentiable.allDifferentiableVariables.getter in conformance Model
sil private [transparent] [thunk] @$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvgTW : $@convention(witness_method: __Differentiable) (@in_guaranteed Model) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model):
  %2 = load %1 : $*Model                          // user: %4
  // function_ref Model.allDifferentiableVariables.getter
  %3 = function_ref @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvg : $@convention(method) (Model) -> Model.AllDifferentiableVariables // user: %4
  %4 = apply %3(%2) : $@convention(method) (Model) -> Model.AllDifferentiableVariables // user: %5
  store %4 to %0 : $*Model.AllDifferentiableVariables // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvgTW'

// protocol witness for __Differentiable.allDifferentiableVariables.setter in conformance Model
sil private [transparent] [thunk] @$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvsTW : $@convention(witness_method: __Differentiable) (@in Model.AllDifferentiableVariables, @inout Model) -> () {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model):
  %2 = load %0 : $*Model.AllDifferentiableVariables // user: %4
  // function_ref Model.allDifferentiableVariables.setter
  %3 = function_ref @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0Vvs : $@convention(method) (Model.AllDifferentiableVariables, @inout Model) -> () // user: %4
  %4 = apply %3(%2, %1) : $@convention(method) (Model.AllDifferentiableVariables, @inout Model) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvsTW'

// protocol witness for __Differentiable.allDifferentiableVariables.modify in conformance Model
sil private [transparent] [thunk] @$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvMTW : $@yield_once @convention(witness_method: __Differentiable) (@inout Model) -> @yields @inout Model.AllDifferentiableVariables {
// %0                                             // user: %2
bb0(%0 : $*Model):
  // function_ref Model.allDifferentiableVariables.modify
  %1 = function_ref @$s6sample5ModelV26allDifferentiableVariablesAC03AlldE0VvM : $@yield_once @convention(method) (@inout Model) -> @yields @inout Model.AllDifferentiableVariables // user: %2
  (%2, %3) = begin_apply %1(%0) : $@yield_once @convention(method) (@inout Model) -> @yields @inout Model.AllDifferentiableVariables // users: %4, %5, %8
  yield %2 : $*Model.AllDifferentiableVariables, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_apply %3                                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  abort_apply %3                                  // id: %8
  unwind                                          // id: %9
} // end sil function '$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvMTW'

// protocol witness for __Differentiable.moved(along:) in conformance Model
sil private [transparent] [thunk] @$s6sample5ModelVs16__DifferentiableAAsADP5moved5alongx13TangentVectorQz_tFTW : $@convention(witness_method: __Differentiable) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Model) -> @out Model {
// %0                                             // user: %7
// %1                                             // user: %3
// %2                                             // user: %4
bb0(%0 : $*Model, %1 : $*Model.AllDifferentiableVariables, %2 : $*Model):
  %3 = load %1 : $*Model.AllDifferentiableVariables // user: %6
  %4 = load %2 : $*Model                          // user: %6
  // function_ref Model.moved(along:)
  %5 = function_ref @$s6sample5ModelV5moved5alongA2C26AllDifferentiableVariablesV_tF : $@convention(method) (Model.AllDifferentiableVariables, Model) -> Model // user: %6
  %6 = apply %5(%3, %4) : $@convention(method) (Model.AllDifferentiableVariables, Model) -> Model // user: %7
  store %6 to %0 : $*Model                        // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s6sample5ModelVs16__DifferentiableAAsADP5moved5alongx13TangentVectorQz_tFTW'

// protocol witness for __Differentiable.tangentVector(from:) in conformance Model
sil private [transparent] [thunk] @$s6sample5ModelVs16__DifferentiableAAsADP13tangentVector4from07TangentE0Qz09CotangentE0Qz_tFTW : $@convention(witness_method: __Differentiable) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Model) -> @out Model.AllDifferentiableVariables {
// %0                                             // user: %7
// %1                                             // user: %3
// %2                                             // user: %4
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Model.AllDifferentiableVariables, %2 : $*Model):
  %3 = load %1 : $*Model.AllDifferentiableVariables // user: %6
  %4 = load %2 : $*Model                          // user: %6
  // function_ref Model.tangentVector(from:)
  %5 = function_ref @$s6sample5ModelV13tangentVector4fromAC26AllDifferentiableVariablesVAG_tF : $@convention(method) (Model.AllDifferentiableVariables, Model) -> Model.AllDifferentiableVariables // user: %6
  %6 = apply %5(%3, %4) : $@convention(method) (Model.AllDifferentiableVariables, Model) -> Model.AllDifferentiableVariables // user: %7
  store %6 to %0 : $*Model.AllDifferentiableVariables // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s6sample5ModelVs16__DifferentiableAAsADP13tangentVector4from07TangentE0Qz09CotangentE0Qz_tFTW'

// Float.init(_builtinFloatLiteral:)
sil public_external [transparent] [serialized] @$sSf20_builtinFloatLiteralSfBf80__tcfC : $@convention(method) (Builtin.FPIEEE80, @thin Float.Type) -> Float {
// %0                                             // user: %2
bb0(%0 : $Builtin.FPIEEE80, %1 : $@thin Float.Type):
  %2 = builtin "fptrunc_FPIEEE80_FPIEEE32"(%0 : $Builtin.FPIEEE80) : $Builtin.FPIEEE32 // user: %3
  %3 = struct $Float (%2 : $Builtin.FPIEEE32)     // user: %4
  return %3 : $Float                              // id: %4
} // end sil function '$sSf20_builtinFloatLiteralSfBf80__tcfC'

// closure #1 in 
sil private [differentiable source 0 wrt 0, 1 jvp @AD__$s6sampleSfAA5ModelV_SftXEfU___jvp_src_0_wrt_0_1 vjp @AD__$s6sampleSfAA5ModelV_SftXEfU___vjp_src_0_wrt_0_1] @$s6sampleSfAA5ModelV_SftXEfU_ : $@convention(thin) (Model, Float) -> Float {
// %0                                             // users: %5, %2
// %1                                             // users: %5, %3
bb0(%0 : $Model, %1 : $Float):
  debug_value %0 : $Model, let, name "model", argno 1 // id: %2
  debug_value %1 : $Float, let, name "input", argno 2 // id: %3
  // function_ref Model.applied(to:)
  %4 = function_ref @$s6sample5ModelV7applied2toS2f_tF : $@convention(method) (Float, Model) -> Float // user: %5
  %5 = apply %4(%1, %0) : $@convention(method) (Float, Model) -> Float // user: %6
  return %5 : $Float                              // id: %6
} // end sil function '$s6sampleSfAA5ModelV_SftXEfU_'

// thunk for @callee_guaranteed (@unowned Model, @unowned Float) -> (@unowned Float)
sil shared [transparent] [serializable] [reabstraction_thunk] @$s6sample5ModelVS2fIgyyd_ACS2fIegnnr_TR : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> Float) -> @out Float {
// %0                                             // user: %7
// %1                                             // user: %4
// %2                                             // user: %5
// %3                                             // user: %6
bb0(%0 : $*Float, %1 : $*Model, %2 : $*Float, %3 : $@noescape @callee_guaranteed (Model, Float) -> Float):
  %4 = load %1 : $*Model                          // user: %6
  %5 = load %2 : $*Float                          // user: %6
  %6 = apply %3(%4, %5) : $@noescape @callee_guaranteed (Model, Float) -> Float // user: %7
  store %6 to %0 : $*Float                        // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s6sample5ModelVS2fIgyyd_ACS2fIegnnr_TR'

// thunk for @callee_guaranteed (@unowned Model, @unowned Float) -> (@unowned Float, @owned @escaping @callee_guaranteed (@unowned Model.AllDifferentiableVariables, @unowned Float) -> (@unowned Float))
sil shared [transparent] [serializable] [reabstraction_thunk] @$s6sample5ModelVS2fAC26AllDifferentiableVariablesVS2fIegyyd_Igyydo_ACS2fAES2fIegnnr_Iegnnro_TR : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float)) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float) {
// %0                                             // user: %9
// %1                                             // user: %4
// %2                                             // user: %5
// %3                                             // user: %6
bb0(%0 : $*Float, %1 : $*Model, %2 : $*Float, %3 : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float)):
  %4 = load %1 : $*Model                          // user: %6
  %5 = load %2 : $*Float                          // user: %6
  %6 = apply %3(%4, %5) : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) // users: %8, %7
  %7 = tuple_extract %6 : $(Float, @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float), 0 // user: %9
  %8 = tuple_extract %6 : $(Float, @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float), 1 // user: %11
  store %7 to %0 : $*Float                        // id: %9
  // function_ref thunk for @escaping @callee_guaranteed (@unowned Model.AllDifferentiableVariables, @unowned Float) -> (@unowned Float)
  %10 = function_ref @$s6sample5ModelV26AllDifferentiableVariablesVS2fIegyyd_AES2fIegnnr_TR : $@convention(thin) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float, @guaranteed @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) -> @out Float // user: %11
  %11 = partial_apply [callee_guaranteed] %10(%8) : $@convention(thin) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float, @guaranteed @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) -> @out Float // user: %12
  return %11 : $@callee_guaranteed (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float) -> @out Float // id: %12
} // end sil function '$s6sample5ModelVS2fAC26AllDifferentiableVariablesVS2fIegyyd_Igyydo_ACS2fAES2fIegnnr_Iegnnro_TR'

// thunk for @escaping @callee_guaranteed (@unowned Model.AllDifferentiableVariables, @unowned Float) -> (@unowned Float)
sil shared [transparent] [serializable] [reabstraction_thunk] @$s6sample5ModelV26AllDifferentiableVariablesVS2fIegyyd_AES2fIegnnr_TR : $@convention(thin) (@in_guaranteed Model.AllDifferentiableVariables, @in_guaranteed Float, @guaranteed @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) -> @out Float {
// %0                                             // user: %7
// %1                                             // user: %4
// %2                                             // user: %5
// %3                                             // user: %6
bb0(%0 : $*Float, %1 : $*Model.AllDifferentiableVariables, %2 : $*Float, %3 : $@callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float):
  %4 = load %1 : $*Model.AllDifferentiableVariables // user: %6
  %5 = load %2 : $*Float                          // user: %6
  %6 = apply %3(%4, %5) : $@callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float // user: %7
  store %6 to %0 : $*Float                        // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s6sample5ModelV26AllDifferentiableVariablesVS2fIegyyd_AES2fIegnnr_TR'

// thunk for @callee_guaranteed (@unowned Model, @unowned Float) -> (@unowned Float, @owned @escaping @callee_guaranteed (@unowned Float) -> (@unowned Model.AllDifferentiableVariables, @unowned Float))
sil shared [transparent] [serializable] [reabstraction_thunk] @$s6sample5ModelVS3fAC26AllDifferentiableVariablesVSfIegydd_Igyydo_ACS3fAESfIegnrr_Iegnnro_TR : $@convention(thin) (@in_guaranteed Model, @in_guaranteed Float, @noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float))) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float)) {
// %0                                             // user: %9
// %1                                             // user: %4
// %2                                             // user: %5
// %3                                             // user: %6
bb0(%0 : $*Float, %1 : $*Model, %2 : $*Float, %3 : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float))):
  %4 = load %1 : $*Model                          // user: %6
  %5 = load %2 : $*Float                          // user: %6
  %6 = apply %3(%4, %5) : $@noescape @callee_guaranteed (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // users: %8, %7
  %7 = tuple_extract %6 : $(Float, @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)), 0 // user: %9
  %8 = tuple_extract %6 : $(Float, @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)), 1 // user: %11
  store %7 to %0 : $*Float                        // id: %9
  // function_ref thunk for @escaping @callee_guaranteed (@unowned Float) -> (@unowned Model.AllDifferentiableVariables, @unowned Float)
  %10 = function_ref @$sSf6sample5ModelV26AllDifferentiableVariablesVSfIegydd_SfAESfIegnrr_TR : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) -> (@out Model.AllDifferentiableVariables, @out Float) // user: %11
  %11 = partial_apply [callee_guaranteed] %10(%8) : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) -> (@out Model.AllDifferentiableVariables, @out Float) // user: %12
  return %11 : $@callee_guaranteed (@in_guaranteed Float) -> (@out Model.AllDifferentiableVariables, @out Float) // id: %12
} // end sil function '$s6sample5ModelVS3fAC26AllDifferentiableVariablesVSfIegydd_Igyydo_ACS3fAESfIegnrr_Iegnnro_TR'

// thunk for @escaping @callee_guaranteed (@unowned Float) -> (@unowned Model.AllDifferentiableVariables, @unowned Float)
sil shared [transparent] [serializable] [reabstraction_thunk] @$sSf6sample5ModelV26AllDifferentiableVariablesVSfIegydd_SfAESfIegnrr_TR : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) -> (@out Model.AllDifferentiableVariables, @out Float) {
// %0                                             // user: %8
// %1                                             // user: %9
// %2                                             // user: %4
// %3                                             // user: %5
bb0(%0 : $*Model.AllDifferentiableVariables, %1 : $*Float, %2 : $*Float, %3 : $@callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)):
  %4 = load %2 : $*Float                          // user: %5
  %5 = apply %3(%4) : $@callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float) // users: %7, %6
  %6 = tuple_extract %5 : $(Model.AllDifferentiableVariables, Float), 0 // user: %8
  %7 = tuple_extract %5 : $(Model.AllDifferentiableVariables, Float), 1 // user: %9
  store %6 to %0 : $*Model.AllDifferentiableVariables // id: %8
  store %7 to %1 : $*Float                        // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$sSf6sample5ModelV26AllDifferentiableVariablesVSfIegydd_SfAESfIegnrr_TR'

// Differentiable.gradient<A, B>(at:in:)
sil [serialized] @$ss14DifferentiablePsE8gradient2at2in15CotangentVectorQz_AFQyd__tqd___qd_0_x_qd__tXEtsAARd__sAARd_0_SFRd_0_AFs02__A0PQyd_0_Rsd_0_r0_lF : $@convention(method) <τ_0_0 where τ_0_0 : Differentiable><τ_1_0, τ_1_1 where τ_1_0 : Differentiable, τ_1_1 : Differentiable, τ_1_1 : FloatingPoint, τ_1_1 == τ_1_1.CotangentVector> (@in_guaranteed τ_1_0, @differentiable @noescape @callee_guaranteed (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0) -> @out τ_1_1, @in_guaranteed τ_0_0) -> (@out τ_0_0.CotangentVector, @out τ_1_0.CotangentVector)

// _allocateUninitializedArray<A>(_:)
sil [serialized] [always_inline] @$ss27_allocateUninitializedArrayySayxG_BptBwlF : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)

// default argument 1 of print(_:separator:terminator:)
sil shared_external [serialized] @$ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 " "                    // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function '$ss5print_9separator10terminatoryypd_S2StFfA0_'

// default argument 2 of print(_:separator:terminator:)
sil shared_external [serialized] @$ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "\n"                   // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function '$ss5print_9separator10terminatoryypd_S2StFfA1_'

// print(_:separator:terminator:)
sil @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()

// AD__$sSf1moiyS2f_SftFZ__jvp_src_0_wrt_0_1
sil [serialized] @AD__$sSf1moiyS2f_SftFZ__jvp_src_0_wrt_0_1 : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float, Float) -> Float)

// static Float._vjpMultiply(lhs:rhs:)
sil [serialized] @$sSf12_vjpMultiply3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float) -> (Float, Float))

// AD__$sSf1poiyS2f_SftFZ__jvp_src_0_wrt_0_1
sil [serialized] @AD__$sSf1poiyS2f_SftFZ__jvp_src_0_wrt_0_1 : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float, Float) -> Float)

// static Float._vjpAdd(lhs:rhs:)
sil [serialized] @$sSf7_vjpAdd3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float) -> (Float, Float))

// AD__$sSf1soiyS2f_SftFZ__jvp_src_0_wrt_0_1
sil [serialized] @AD__$sSf1soiyS2f_SftFZ__jvp_src_0_wrt_0_1 : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float, Float) -> Float)

// static Float._vjpSubtract(lhs:rhs:)
sil [serialized] @$sSf12_vjpSubtract3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float) -> (Float, Float))

// AD__$s6sampleSfAA5ModelV_SftXEfU___jvp_src_0_wrt_0_1
sil hidden @AD__$s6sampleSfAA5ModelV_SftXEfU___jvp_src_0_wrt_0_1 : $@convention(thin) (Model, Float) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) {
bb0(%0 : $Model, %1 : $Float):
  return undef : $(Float, @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) // id: %2
} // end sil function 'AD__$s6sampleSfAA5ModelV_SftXEfU___jvp_src_0_wrt_0_1'

// AD__$s6sampleSfAA5ModelV_SftXEfU___primal_src_0_wrt_0_1
sil hidden @AD__$s6sampleSfAA5ModelV_SftXEfU___primal_src_0_wrt_0_1 : $@convention(thin) (Model, Float) -> (@owned _AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, Float) {
// %0                                             // users: %5, %2
// %1                                             // users: %5, %3
bb0(%0 : $Model, %1 : $Float):
  debug_value %0 : $Model, let, name "model", argno 1 // id: %2
  debug_value %1 : $Float, let, name "input", argno 2 // id: %3
  // function_ref AD__$s6sample5ModelV7applied2toS2f_tF__vjp_src_0_wrt_0_1
  %4 = function_ref @AD__$s6sample5ModelV7applied2toS2f_tF__vjp_src_0_wrt_0_1 : $@convention(method) (Float, Model) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // user: %5
  %5 = apply %4(%1, %0) : $@convention(method) (Float, Model) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // users: %7, %6
  %6 = tuple_extract %5 : $(Float, @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)), 0 // user: %9
  %7 = tuple_extract %5 : $(Float, @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)), 1 // user: %8
  %8 = struct $_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1 (%7 : $@callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // user: %9
  %9 = tuple (%8 : $_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, %6 : $Float) // user: %10
  return %9 : $(_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, Float) // id: %10
} // end sil function 'AD__$s6sampleSfAA5ModelV_SftXEfU___primal_src_0_wrt_0_1'

// AD__$s6sampleSfAA5ModelV_SftXEfU___adjoint_src_0_wrt_0_1
sil hidden @AD__$s6sampleSfAA5ModelV_SftXEfU___adjoint_src_0_wrt_0_1 : $@convention(thin) (Float, @guaranteed _AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1) -> (Model.AllDifferentiableVariables, Float) {
// %0                                             // users: %7, %4, %2
// %1                                             // user: %3
bb0(%0 : $Float, %1 : $_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1):
  retain_value %0 : $Float                        // id: %2
  %3 = struct_extract %1 : $_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, #_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1.pullback_0 // user: %4
  %4 = apply %3(%0) : $@callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float) // users: %6, %5
  %5 = tuple_extract %4 : $(Model.AllDifferentiableVariables, Float), 0 // user: %8
  %6 = tuple_extract %4 : $(Model.AllDifferentiableVariables, Float), 1 // user: %8
  release_value %0 : $Float                       // id: %7
  %8 = tuple (%5 : $Model.AllDifferentiableVariables, %6 : $Float) // user: %9
  return %8 : $(Model.AllDifferentiableVariables, Float) // id: %9
} // end sil function 'AD__$s6sampleSfAA5ModelV_SftXEfU___adjoint_src_0_wrt_0_1'

// AD__$s6sampleSfAA5ModelV_SftXEfU___vjp_src_0_wrt_0_1
sil hidden @AD__$s6sampleSfAA5ModelV_SftXEfU___vjp_src_0_wrt_0_1 : $@convention(thin) (Model, Float) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Model, %1 : $Float):
  // function_ref AD__$s6sampleSfAA5ModelV_SftXEfU___primal_src_0_wrt_0_1
  %2 = function_ref @AD__$s6sampleSfAA5ModelV_SftXEfU___primal_src_0_wrt_0_1 : $@convention(thin) (Model, Float) -> (@owned _AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, Float) // user: %3
  %3 = apply %2(%0, %1) : $@convention(thin) (Model, Float) -> (@owned _AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, Float) // users: %5, %4
  %4 = tuple_extract %3 : $(_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, Float), 0 // user: %7
  %5 = tuple_extract %3 : $(_AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1, Float), 1 // user: %8
  // function_ref AD__$s6sampleSfAA5ModelV_SftXEfU___adjoint_src_0_wrt_0_1
  %6 = function_ref @AD__$s6sampleSfAA5ModelV_SftXEfU___adjoint_src_0_wrt_0_1 : $@convention(thin) (Float, @guaranteed _AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1) -> (Model.AllDifferentiableVariables, Float) // user: %7
  %7 = partial_apply [callee_guaranteed] %6(%4) : $@convention(thin) (Float, @guaranteed _AD__$s6sampleSfAA5ModelV_SftXEfU___Type__src_0_wrt_0_1) -> (Model.AllDifferentiableVariables, Float) // user: %8
  %8 = tuple (%5 : $Float, %7 : $@callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // user: %9
  return %8 : $(Float, @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // id: %9
} // end sil function 'AD__$s6sampleSfAA5ModelV_SftXEfU___vjp_src_0_wrt_0_1'

// AD__$s6sample5ModelV7applied2toS2f_tF__jvp_src_0_wrt_0_1
sil hidden @AD__$s6sample5ModelV7applied2toS2f_tF__jvp_src_0_wrt_0_1 : $@convention(method) (Float, Model) -> (Float, @owned @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) {
bb0(%0 : $Float, %1 : $Model):
  return undef : $(Float, @callee_guaranteed (Model.AllDifferentiableVariables, Float) -> Float) // id: %2
} // end sil function 'AD__$s6sample5ModelV7applied2toS2f_tF__jvp_src_0_wrt_0_1'

// AD__$s6sample5ModelV7applied2toS2f_tF__primal_src_0_wrt_0_1
sil hidden @AD__$s6sample5ModelV7applied2toS2f_tF__primal_src_0_wrt_0_1 : $@convention(method) (Float, Model) -> (@owned _AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, Float) {
// %0                                             // users: %8, %2
// %1                                             // users: %11, %6, %3
bb0(%0 : $Float, %1 : $Model):
  debug_value %0 : $Float, let, name "input", argno 1 // id: %2
  debug_value %1 : $Model, let, name "self", argno 2 // id: %3
  %4 = metatype $@thin Float.Type                 // user: %13
  %5 = metatype $@thin Float.Type                 // user: %8
  %6 = struct_extract %1 : $Model, #Model.w       // user: %8
  // function_ref static Float._vjpMultiply(lhs:rhs:)
  %7 = function_ref @$sSf12_vjpMultiply3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float) -> (Float, Float)) // user: %8
  %8 = apply %7(%6, %0, %5) : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float) -> (Float, Float)) // users: %10, %9
  %9 = tuple_extract %8 : $(Float, @callee_guaranteed (Float) -> (Float, Float)), 0 // user: %13
  %10 = tuple_extract %8 : $(Float, @callee_guaranteed (Float) -> (Float, Float)), 1 // user: %16
  %11 = struct_extract %1 : $Model, #Model.b      // user: %13
  // function_ref static Float._vjpAdd(lhs:rhs:)
  %12 = function_ref @$sSf7_vjpAdd3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZ : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float) -> (Float, Float)) // user: %13
  %13 = apply %12(%9, %11, %4) : $@convention(method) (Float, Float, @thin Float.Type) -> (Float, @owned @callee_guaranteed (Float) -> (Float, Float)) // users: %15, %14
  %14 = tuple_extract %13 : $(Float, @callee_guaranteed (Float) -> (Float, Float)), 0 // user: %17
  %15 = tuple_extract %13 : $(Float, @callee_guaranteed (Float) -> (Float, Float)), 1 // user: %16
  %16 = struct $_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1 (%10 : $@callee_guaranteed (Float) -> (Float, Float), %15 : $@callee_guaranteed (Float) -> (Float, Float)) // user: %17
  %17 = tuple (%16 : $_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, %14 : $Float) // user: %18
  return %17 : $(_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, Float) // id: %18
} // end sil function 'AD__$s6sample5ModelV7applied2toS2f_tF__primal_src_0_wrt_0_1'

// AD__$s6sample5ModelV7applied2toS2f_tF__adjoint_src_0_wrt_0_1
sil hidden @AD__$s6sample5ModelV7applied2toS2f_tF__adjoint_src_0_wrt_0_1 : $@convention(method) (Float, @guaranteed _AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1) -> (Model.AllDifferentiableVariables, Float) {
// %0                                             // users: %15, %4, %2
// %1                                             // users: %7, %3
bb0(%0 : $Float, %1 : $_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1):
  retain_value %0 : $Float                        // id: %2
  %3 = struct_extract %1 : $_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, #_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1.pullback_1 // user: %4
  %4 = apply %3(%0) : $@callee_guaranteed (Float) -> (Float, Float) // users: %6, %5
  %5 = tuple_extract %4 : $(Float, Float), 0      // users: %14, %8
  %6 = tuple_extract %4 : $(Float, Float), 1      // users: %16, %11
  %7 = struct_extract %1 : $_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, #_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1.pullback_0 // user: %8
  %8 = apply %7(%5) : $@callee_guaranteed (Float) -> (Float, Float) // users: %10, %9
  %9 = tuple_extract %8 : $(Float, Float), 0      // users: %13, %11
  %10 = tuple_extract %8 : $(Float, Float), 1     // user: %17
  %11 = struct $Model.AllDifferentiableVariables (%9 : $Float, %6 : $Float) // users: %17, %12
  retain_value %11 : $Model.AllDifferentiableVariables // id: %12
  release_value %9 : $Float                       // id: %13
  release_value %5 : $Float                       // id: %14
  release_value %0 : $Float                       // id: %15
  release_value %6 : $Float                       // id: %16
  %17 = tuple (%11 : $Model.AllDifferentiableVariables, %10 : $Float) // user: %18
  return %17 : $(Model.AllDifferentiableVariables, Float) // id: %18
} // end sil function 'AD__$s6sample5ModelV7applied2toS2f_tF__adjoint_src_0_wrt_0_1'

// AD__$s6sample5ModelV7applied2toS2f_tF__vjp_src_0_wrt_0_1
sil hidden @AD__$s6sample5ModelV7applied2toS2f_tF__vjp_src_0_wrt_0_1 : $@convention(method) (Float, Model) -> (Float, @owned @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Float, %1 : $Model):
  // function_ref AD__$s6sample5ModelV7applied2toS2f_tF__primal_src_0_wrt_0_1
  %2 = function_ref @AD__$s6sample5ModelV7applied2toS2f_tF__primal_src_0_wrt_0_1 : $@convention(method) (Float, Model) -> (@owned _AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, Float) // user: %3
  %3 = apply %2(%0, %1) : $@convention(method) (Float, Model) -> (@owned _AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, Float) // users: %5, %4
  %4 = tuple_extract %3 : $(_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, Float), 0 // user: %7
  %5 = tuple_extract %3 : $(_AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1, Float), 1 // user: %8
  // function_ref AD__$s6sample5ModelV7applied2toS2f_tF__adjoint_src_0_wrt_0_1
  %6 = function_ref @AD__$s6sample5ModelV7applied2toS2f_tF__adjoint_src_0_wrt_0_1 : $@convention(method) (Float, @guaranteed _AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1) -> (Model.AllDifferentiableVariables, Float) // user: %7
  %7 = partial_apply [callee_guaranteed] %6(%4) : $@convention(method) (Float, @guaranteed _AD__$s6sample5ModelV7applied2toS2f_tF__Type__src_0_wrt_0_1) -> (Model.AllDifferentiableVariables, Float) // user: %8
  %8 = tuple (%5 : $Float, %7 : $@callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // user: %9
  return %8 : $(Float, @callee_guaranteed (Float) -> (Model.AllDifferentiableVariables, Float)) // id: %9
} // end sil function 'AD__$s6sample5ModelV7applied2toS2f_tF__vjp_src_0_wrt_0_1'

// protocol witness for FloatingPoint.init(sign:exponent:significand:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF4sign8exponent11significandxs17FloatingPointSignO_8ExponentQzxtcfCTW : $@convention(witness_method: FloatingPoint) (FloatingPointSign, @in Int, @in Float, @thick Float.Type) -> @out Float {
// %0                                             // user: %10
// %1                                             // user: %9
// %2                                             // user: %5
// %3                                             // user: %6
bb0(%0 : $*Float, %1 : $FloatingPointSign, %2 : $*Int, %3 : $*Float, %4 : $@thick Float.Type):
  %5 = load %2 : $*Int                            // user: %9
  %6 = load %3 : $*Float                          // user: %9
  %7 = metatype $@thin Float.Type                 // user: %9
  // function_ref Float.init(sign:exponent:significand:)
  %8 = function_ref @$sSf4sign8exponent11significandSfs17FloatingPointSignO_SiSftcfC : $@convention(method) (FloatingPointSign, Int, Float, @thin Float.Type) -> Float // user: %9
  %9 = apply %8(%1, %5, %6, %7) : $@convention(method) (FloatingPointSign, Int, Float, @thin Float.Type) -> Float // user: %10
  store %9 to %0 : $*Float                        // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12
} // end sil function '$sSfSFsSF4sign8exponent11significandxs17FloatingPointSignO_8ExponentQzxtcfCTW'

// protocol witness for FloatingPoint.init(signOf:magnitudeOf:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF6signOf09magnitudeB0xx_xtcfCTW : $@convention(witness_method: FloatingPoint) (@in Float, @in Float, @thick Float.Type) -> @out Float {
// %0                                             // user: %8
// %1                                             // user: %5
// %2                                             // user: %6
// %3                                             // user: %7
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float, %3 : $@thick Float.Type):
  // function_ref specialized BinaryFloatingPoint.init(signOf:magnitudeOf:)
  %4 = function_ref @$sSBsE6signOf09magnitudeB0xx_xtcfCSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %7
  %5 = load %1 : $*Float                          // user: %7
  %6 = load %2 : $*Float                          // user: %7
  %7 = apply %4(%5, %6, %3) : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %8
  store %7 to %0 : $*Float                        // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSfSFsSF6signOf09magnitudeB0xx_xtcfCTW'

// protocol witness for FloatingPoint.init(_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSFyxSicfCTW : $@convention(witness_method: FloatingPoint) (Int, @thick Float.Type) -> @out Float {
// %0                                             // user: %6
// %1                                             // user: %3
bb0(%0 : $*Float, %1 : $Int, %2 : $@thick Float.Type):
  %3 = struct_extract %1 : $Int, #Int._value      // user: %4
  %4 = builtin "sitofp_Int64_FPIEEE32"(%3 : $Builtin.Int64) : $Builtin.FPIEEE32 // user: %5
  %5 = struct $Float (%4 : $Builtin.FPIEEE32)     // user: %6
  store %5 to %0 : $*Float                        // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$sSfSFsSFyxSicfCTW'

// protocol witness for FloatingPoint.init<A>(_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSFyxqd__cSzRd__lufCTW : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick Float.Type) -> @out Float {
// %0                                             // user: %37
// %1                                             // users: %30, %29, %23, %21, %17, %15, %4
bb0(%0 : $*Float, %1 : $*τ_0_0, %2 : $@thick Float.Type):
  %3 = witness_method $τ_0_0, #BinaryInteger.bitWidth!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %4
  %4 = apply %3<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %6
  %5 = integer_literal $Builtin.Int64, 64         // user: %7
  %6 = struct_extract %4 : $Int, #Int._value      // user: %7
  %7 = builtin "cmp_slt_Int64"(%5 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int1 // user: %8
  cond_br %7, bb4, bb1                            // id: %8

bb1:                                              // Preds: bb0
  %9 = metatype $@thick τ_0_0.Type               // user: %11
  %10 = witness_method $τ_0_0, #BinaryInteger.isSigned!getter.1 : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %11
  %11 = apply %10<τ_0_0>(%9) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %12
  %12 = struct_extract %11 : $Bool, #Bool._value  // user: %13
  cond_br %12, bb3, bb2                           // id: %13

bb2:                                              // Preds: bb1
  %14 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %15
  %15 = apply %14<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %16
  %16 = struct_extract %15 : $UInt, #UInt._value  // user: %18
  destroy_addr %1 : $*τ_0_0                      // id: %17
  %18 = builtin "uitofp_Int64_FPIEEE32"(%16 : $Builtin.Int64) : $Builtin.FPIEEE32 // user: %19
  br bb5(%18 : $Builtin.FPIEEE32)                 // id: %19

bb3:                                              // Preds: bb1
  %20 = witness_method $τ_0_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %21
  %21 = apply %20<τ_0_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %22
  %22 = struct_extract %21 : $UInt, #UInt._value  // user: %24
  destroy_addr %1 : $*τ_0_0                      // id: %23
  %24 = builtin "sitofp_Int64_FPIEEE32"(%22 : $Builtin.Int64) : $Builtin.FPIEEE32 // user: %25
  br bb5(%24 : $Builtin.FPIEEE32)                 // id: %25

bb4:                                              // Preds: bb0
  %26 = alloc_stack $Float                        // users: %33, %31, %29
  %27 = metatype $@thick Float.Type               // user: %29
  // function_ref specialized static BinaryFloatingPoint<>._convert<A>(from:)
  %28 = function_ref @$sSBss17FixedWidthInteger14RawSignificandRpzrlE8_convert4fromx5value_Sb5exacttqd___tSzRd__lFZqd__SfXMTSfSbSfRszSzRd__r__lIetMnyrd_Tpq5 : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_1_0, @thick Float.Type) -> (@out Float, Bool) // user: %29
  %29 = apply %28<Float, τ_0_0>(%26, %1, %27) : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_1_0, @thick Float.Type) -> (@out Float, Bool)
  destroy_addr %1 : $*τ_0_0                      // id: %30
  %31 = struct_element_addr %26 : $*Float, #Float._value // user: %32
  %32 = load %31 : $*Builtin.FPIEEE32             // user: %34
  dealloc_stack %26 : $*Float                     // id: %33
  br bb5(%32 : $Builtin.FPIEEE32)                 // id: %34

// %35                                            // user: %36
bb5(%35 : $Builtin.FPIEEE32):                     // Preds: bb4 bb3 bb2
  %36 = struct $Float (%35 : $Builtin.FPIEEE32)   // user: %37
  store %36 to %0 : $*Float                       // id: %37
  %38 = tuple ()                                  // user: %39
  return %38 : $()                                // id: %39
} // end sil function '$sSfSFsSFyxqd__cSzRd__lufCTW'

// protocol witness for FloatingPoint.init<A>(exactly:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF7exactlyxSgqd___tcSzRd__lufCTW : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick Float.Type) -> @out Optional<Float> {
// %0                                             // user: %5
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Optional<Float>, %1 : $*τ_0_0, %2 : $@thick Float.Type):
  // function_ref specialized BinaryFloatingPoint<>.init<A>(exactly:)
  %3 = function_ref @$sSBss17FixedWidthInteger14RawSignificandRpzrlE7exactlyxSgqd___tcSzRd__lufCqd__SfXMTSfSgSfRszSzRd__r__lIetMiyd_Tpq5 : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick Float.Type) -> Optional<Float> // user: %4
  %4 = apply %3<Float, τ_0_0>(%1, %2) : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick Float.Type) -> Optional<Float> // user: %5
  store %4 to %0 : $*Optional<Float>              // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF7exactlyxSgqd___tcSzRd__lufCTW'

// protocol witness for static FloatingPoint.radix.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF5radixSivgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $@thick Float.Type):
  // function_ref static BinaryFloatingPoint.radix.getter
  %1 = function_ref @$sSBsE5radixSivgZ : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@thick τ_0_0.Type) -> Int // user: %2
  %2 = apply %1<Float>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@thick τ_0_0.Type) -> Int // user: %3
  return %2 : $Int                                // id: %3
} // end sil function '$sSfSFsSF5radixSivgZTW'

// protocol witness for static FloatingPoint.nan.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF3nanxvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %5
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = integer_literal $Builtin.Int32, 2143289344 // user: %3
  %3 = builtin "bitcast_Int32_FPIEEE32"(%2 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %4
  %4 = struct $Float (%3 : $Builtin.FPIEEE32)     // user: %5
  store %4 to %0 : $*Float                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF3nanxvgZTW'

// protocol witness for static FloatingPoint.signalingNaN.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF12signalingNaNxvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %5
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = integer_literal $Builtin.Int32, 2141192192 // user: %3
  %3 = builtin "bitcast_Int32_FPIEEE32"(%2 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %4
  %4 = struct $Float (%3 : $Builtin.FPIEEE32)     // user: %5
  store %4 to %0 : $*Float                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF12signalingNaNxvgZTW'

// protocol witness for static FloatingPoint.infinity.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF8infinityxvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %5
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = integer_literal $Builtin.Int32, 2139095040 // user: %3
  %3 = builtin "bitcast_Int32_FPIEEE32"(%2 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %4
  %4 = struct $Float (%3 : $Builtin.FPIEEE32)     // user: %5
  store %4 to %0 : $*Float                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF8infinityxvgZTW'

// protocol witness for static FloatingPoint.greatestFiniteMagnitude.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF23greatestFiniteMagnitudexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %4
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = float_literal $Builtin.FPIEEE32, 0x7F7FFFFF // 3.40282347E+38 // user: %3
  %3 = struct $Float (%2 : $Builtin.FPIEEE32)     // user: %4
  store %3 to %0 : $*Float                        // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSfSFsSF23greatestFiniteMagnitudexvgZTW'

// protocol witness for static FloatingPoint.pi.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF2pixvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %4
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = float_literal $Builtin.FPIEEE32, 0x40490FDA // 3.1415925 // user: %3
  %3 = struct $Float (%2 : $Builtin.FPIEEE32)     // user: %4
  store %3 to %0 : $*Float                        // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSfSFsSF2pixvgZTW'

// protocol witness for FloatingPoint.ulp.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF3ulpxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> @out Float {
// %0                                             // user: %34
// %1                                             // user: %2
bb0(%0 : $*Float, %1 : $*Float):
  %2 = struct_element_addr %1 : $*Float, #Float._value // user: %3
  %3 = load %2 : $*Builtin.FPIEEE32               // user: %4
  %4 = builtin "bitcast_FPIEEE32_Int32"(%3 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %27, %6
  %5 = integer_literal $Builtin.Int32, 23         // user: %6
  %6 = builtin "lshr_Int32"(%4 : $Builtin.Int32, %5 : $Builtin.Int32) : $Builtin.Int32 // user: %7
  %7 = builtin "zextOrBitCast_Int32_Int64"(%6 : $Builtin.Int32) : $Builtin.Int64 // user: %9
  %8 = integer_literal $Builtin.Int64, 255        // users: %10, %9
  %9 = builtin "and_Int64"(%7 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int64 // users: %19, %10
  %10 = builtin "cmp_ult_Int64"(%9 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int1 // user: %12
  %11 = integer_literal $Builtin.Int1, -1         // user: %12
  %12 = builtin "int_expect_Int1"(%10 : $Builtin.Int1, %11 : $Builtin.Int1) : $Builtin.Int1 // user: %13
  cond_br %12, bb2, bb1                           // id: %13

bb1:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int32, 2143289344 // user: %15
  %15 = builtin "bitcast_Int32_FPIEEE32"(%14 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %16
  %16 = struct $Float (%15 : $Builtin.FPIEEE32)   // user: %17
  br bb5(%16 : $Float)                            // id: %17

bb2:                                              // Preds: bb0
  %18 = integer_literal $Builtin.Int64, 0         // user: %19
  %19 = builtin "cmp_ult_Int64"(%18 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %20
  cond_br %19, bb4, bb3                           // id: %20

bb3:                                              // Preds: bb2
  %21 = float_literal $Builtin.FPIEEE32, 0x1 // 1.40129846E-45 // user: %22
  %22 = struct $Float (%21 : $Builtin.FPIEEE32)   // user: %23
  br bb5(%22 : $Float)                            // id: %23

bb4:                                              // Preds: bb2
  %24 = integer_literal $Builtin.Int32, 2139095040 // user: %25
  %25 = builtin "bitcast_Int32_FPIEEE32"(%24 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %26
  %26 = builtin "bitcast_FPIEEE32_Int32"(%25 : $Builtin.FPIEEE32) : $Builtin.Int32 // user: %27
  %27 = builtin "and_Int32"(%4 : $Builtin.Int32, %26 : $Builtin.Int32) : $Builtin.Int32 // user: %28
  %28 = builtin "bitcast_Int32_FPIEEE32"(%27 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %30
  %29 = float_literal $Builtin.FPIEEE32, 0x34000000 // 1.1920929E-7 // user: %30
  %30 = builtin "fmul_FPIEEE32"(%28 : $Builtin.FPIEEE32, %29 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %31
  %31 = struct $Float (%30 : $Builtin.FPIEEE32)   // user: %32
  br bb5(%31 : $Float)                            // id: %32

// %33                                            // user: %34
bb5(%33 : $Float):                                // Preds: bb4 bb3 bb1
  store %33 to %0 : $*Float                       // id: %34
  %35 = tuple ()                                  // user: %36
  return %35 : $()                                // id: %36
} // end sil function '$sSfSFsSF3ulpxvgTW'

// protocol witness for static FloatingPoint.ulpOfOne.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF8ulpOfOnexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %4
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = float_literal $Builtin.FPIEEE32, 0x34000000 // 1.1920929E-7 // user: %3
  %3 = struct $Float (%2 : $Builtin.FPIEEE32)     // user: %4
  store %3 to %0 : $*Float                        // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSfSFsSF8ulpOfOnexvgZTW'

// protocol witness for static FloatingPoint.leastNormalMagnitude.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF20leastNormalMagnitudexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %4
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = float_literal $Builtin.FPIEEE32, 0x800000 // 1.17549435E-38 // user: %3
  %3 = struct $Float (%2 : $Builtin.FPIEEE32)     // user: %4
  store %3 to %0 : $*Float                        // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSfSFsSF20leastNormalMagnitudexvgZTW'

// protocol witness for static FloatingPoint.leastNonzeroMagnitude.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF21leastNonzeroMagnitudexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Float.Type) -> @out Float {
// %0                                             // user: %5
bb0(%0 : $*Float, %1 : $@thick Float.Type):
  %2 = float_literal $Builtin.FPIEEE80, 0x3F6A8000000000000000 // 1.40129846432481707092E-45 // user: %3
  %3 = builtin "fptrunc_FPIEEE80_FPIEEE32"(%2 : $Builtin.FPIEEE80) : $Builtin.FPIEEE32 // user: %4
  %4 = struct $Float (%3 : $Builtin.FPIEEE32)     // user: %5
  store %4 to %0 : $*Float                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF21leastNonzeroMagnitudexvgZTW'

// protocol witness for FloatingPoint.sign.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF4signs17FloatingPointSignOvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> FloatingPointSign {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = load %0 : $*Float                          // user: %3
  // function_ref Float.sign.getter
  %2 = function_ref @$sSf4signs17FloatingPointSignOvg : $@convention(method) (Float) -> FloatingPointSign // user: %3
  %3 = apply %2(%1) : $@convention(method) (Float) -> FloatingPointSign // user: %4
  return %3 : $FloatingPointSign                  // id: %4
} // end sil function '$sSfSFsSF4signs17FloatingPointSignOvgTW'

// protocol witness for FloatingPoint.exponent.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF8exponent8ExponentQzvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> @out Int {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Int, %1 : $*Float):
  %2 = load %1 : $*Float                          // user: %4
  // function_ref Float.exponent.getter
  %3 = function_ref @$sSf8exponentSivg : $@convention(method) (Float) -> Int // user: %4
  %4 = apply %3(%2) : $@convention(method) (Float) -> Int // user: %5
  store %4 to %0 : $*Int                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF8exponent8ExponentQzvgTW'

// protocol witness for FloatingPoint.significand.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF11significandxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> @out Float {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Float, %1 : $*Float):
  %2 = load %1 : $*Float                          // user: %4
  // function_ref Float.significand.getter
  %3 = function_ref @$sSf11significandSfvg : $@convention(method) (Float) -> Float // user: %4
  %4 = apply %3(%2) : $@convention(method) (Float) -> Float // user: %5
  store %4 to %0 : $*Float                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF11significandxvgTW'

// protocol witness for static FloatingPoint./ infix(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF1doiyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float, @thick Float.Type) -> @out Float {
// %0                                             // user: %10
// %1                                             // user: %4
// %2                                             // user: %6
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float, %3 : $@thick Float.Type):
  %4 = struct_element_addr %1 : $*Float, #Float._value // user: %5
  %5 = load %4 : $*Builtin.FPIEEE32               // user: %8
  %6 = struct_element_addr %2 : $*Float, #Float._value // user: %7
  %7 = load %6 : $*Builtin.FPIEEE32               // user: %8
  %8 = builtin "fdiv_FPIEEE32"(%5 : $Builtin.FPIEEE32, %7 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %9
  %9 = struct $Float (%8 : $Builtin.FPIEEE32)     // user: %10
  store %9 to %0 : $*Float                        // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12
} // end sil function '$sSfSFsSF1doiyxx_xtFZTW'

// protocol witness for static FloatingPoint./= infix(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF2deoiyyxz_xtFZTW : $@convention(witness_method: FloatingPoint) (@inout Float, @in_guaranteed Float, @thick Float.Type) -> () {
// %0                                             // user: %5
// %1                                             // user: %3
bb0(%0 : $*Float, %1 : $*Float, %2 : $@thick Float.Type):
  %3 = struct_element_addr %1 : $*Float, #Float._value // user: %4
  %4 = load %3 : $*Builtin.FPIEEE32               // user: %7
  %5 = struct_element_addr %0 : $*Float, #Float._value // users: %8, %6
  %6 = load %5 : $*Builtin.FPIEEE32               // user: %7
  %7 = builtin "fdiv_FPIEEE32"(%6 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %8
  store %7 to %5 : $*Builtin.FPIEEE32             // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSfSFsSF2deoiyyxz_xtFZTW'

// protocol witness for FloatingPoint.remainder(dividingBy:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF9remainder10dividingByxx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float) -> @out Float {
// %0                                             // user: %7
// %1                                             // user: %3
// %2                                             // user: %4
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float):
  %3 = load %1 : $*Float                          // user: %6
  %4 = load %2 : $*Float                          // user: %6
  // function_ref _stdlib_remainderf
  %5 = function_ref @_stdlib_remainderf : $@convention(c) (Float, Float) -> Float // user: %6
  %6 = apply %5(%4, %3) : $@convention(c) (Float, Float) -> Float // user: %7
  store %6 to %0 : $*Float                        // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$sSfSFsSF9remainder10dividingByxx_tFTW'

// protocol witness for FloatingPoint.formRemainder(dividingBy:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF13formRemainder10dividingByyx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @inout Float) -> () {
// %0                                             // user: %2
// %1                                             // users: %6, %3
bb0(%0 : $*Float, %1 : $*Float):
  %2 = load %0 : $*Float                          // user: %5
  %3 = load %1 : $*Float                          // user: %5
  // function_ref _stdlib_remainderf
  %4 = function_ref @_stdlib_remainderf : $@convention(c) (Float, Float) -> Float // user: %5
  %5 = apply %4(%3, %2) : $@convention(c) (Float, Float) -> Float // user: %6
  store %5 to %1 : $*Float                        // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$sSfSFsSF13formRemainder10dividingByyx_tFTW'

// protocol witness for FloatingPoint.truncatingRemainder(dividingBy:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF19truncatingRemainder10dividingByxx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float) -> @out Float {
// %0                                             // user: %9
// %1                                             // user: %3
// %2                                             // user: %5
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float):
  %3 = struct_element_addr %1 : $*Float, #Float._value // user: %4
  %4 = load %3 : $*Builtin.FPIEEE32               // user: %7
  %5 = struct_element_addr %2 : $*Float, #Float._value // user: %6
  %6 = load %5 : $*Builtin.FPIEEE32               // user: %7
  %7 = builtin "frem_FPIEEE32"(%6 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %8
  %8 = struct $Float (%7 : $Builtin.FPIEEE32)     // user: %9
  store %8 to %0 : $*Float                        // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$sSfSFsSF19truncatingRemainder10dividingByxx_tFTW'

// protocol witness for FloatingPoint.formTruncatingRemainder(dividingBy:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF23formTruncatingRemainder10dividingByyx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @inout Float) -> () {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $*Float, %1 : $*Float):
  %2 = struct_element_addr %0 : $*Float, #Float._value // user: %3
  %3 = load %2 : $*Builtin.FPIEEE32               // user: %6
  %4 = struct_element_addr %1 : $*Float, #Float._value // users: %7, %5
  %5 = load %4 : $*Builtin.FPIEEE32               // user: %6
  %6 = builtin "frem_FPIEEE32"(%5 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %7
  store %6 to %4 : $*Builtin.FPIEEE32             // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$sSfSFsSF23formTruncatingRemainder10dividingByyx_tFTW'

// protocol witness for FloatingPoint.squareRoot() in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF10squareRootxyFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> @out Float {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Float, %1 : $*Float):
  %2 = load %1 : $*Float                          // user: %4
  // function_ref _stdlib_squareRootf
  %3 = function_ref @_stdlib_squareRootf : $@convention(c) (Float) -> Float // user: %4
  %4 = apply %3(%2) : $@convention(c) (Float) -> Float // user: %5
  store %4 to %0 : $*Float                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSfSFsSF10squareRootxyFTW'

// protocol witness for FloatingPoint.formSquareRoot() in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF14formSquareRootyyFTW : $@convention(witness_method: FloatingPoint) (@inout Float) -> () {
// %0                                             // users: %4, %1
bb0(%0 : $*Float):
  %1 = load %0 : $*Float                          // user: %3
  // function_ref _stdlib_squareRootf
  %2 = function_ref @_stdlib_squareRootf : $@convention(c) (Float) -> Float // user: %3
  %3 = apply %2(%1) : $@convention(c) (Float) -> Float // user: %4
  store %3 to %0 : $*Float                        // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSfSFsSF14formSquareRootyyFTW'

// protocol witness for FloatingPoint.addingProduct(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF13addingProductyxx_xtFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float, @in_guaranteed Float) -> @out Float {
// %0                                             // user: %12
// %1                                             // user: %4
// %2                                             // user: %6
// %3                                             // user: %8
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float, %3 : $*Float):
  %4 = struct_element_addr %1 : $*Float, #Float._value // user: %5
  %5 = load %4 : $*Builtin.FPIEEE32               // user: %10
  %6 = struct_element_addr %2 : $*Float, #Float._value // user: %7
  %7 = load %6 : $*Builtin.FPIEEE32               // user: %10
  %8 = struct_element_addr %3 : $*Float, #Float._value // user: %9
  %9 = load %8 : $*Builtin.FPIEEE32               // user: %10
  %10 = builtin "int_fma_FPIEEE32"(%5 : $Builtin.FPIEEE32, %7 : $Builtin.FPIEEE32, %9 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %11
  %11 = struct $Float (%10 : $Builtin.FPIEEE32)   // user: %12
  store %11 to %0 : $*Float                       // id: %12
  %13 = tuple ()                                  // user: %14
  return %13 : $()                                // id: %14
} // end sil function '$sSfSFsSF13addingProductyxx_xtFTW'

// protocol witness for FloatingPoint.addProduct(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF10addProductyyx_xtFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float, @inout Float) -> () {
// %0                                             // user: %3
// %1                                             // user: %5
// %2                                             // user: %7
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float):
  %3 = struct_element_addr %0 : $*Float, #Float._value // user: %4
  %4 = load %3 : $*Builtin.FPIEEE32               // user: %9
  %5 = struct_element_addr %1 : $*Float, #Float._value // user: %6
  %6 = load %5 : $*Builtin.FPIEEE32               // user: %9
  %7 = struct_element_addr %2 : $*Float, #Float._value // users: %10, %8
  %8 = load %7 : $*Builtin.FPIEEE32               // user: %9
  %9 = builtin "int_fma_FPIEEE32"(%4 : $Builtin.FPIEEE32, %6 : $Builtin.FPIEEE32, %8 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %10
  store %9 to %7 : $*Builtin.FPIEEE32             // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12
} // end sil function '$sSfSFsSF10addProductyyx_xtFTW'

// protocol witness for static FloatingPoint.minimum(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF7minimumyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float, @thick Float.Type) -> @out Float {
// %0                                             // user: %8
// %1                                             // user: %5
// %2                                             // user: %6
// %3                                             // user: %7
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float, %3 : $@thick Float.Type):
  // function_ref specialized static FloatingPoint.minimum(_:_:)
  %4 = function_ref @$sSFsE7minimumyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %7
  %5 = load %1 : $*Float                          // user: %7
  %6 = load %2 : $*Float                          // user: %7
  %7 = apply %4(%5, %6, %3) : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %8
  store %7 to %0 : $*Float                        // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSfSFsSF7minimumyxx_xtFZTW'

// protocol witness for static FloatingPoint.maximum(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF7maximumyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float, @thick Float.Type) -> @out Float {
// %0                                             // user: %8
// %1                                             // user: %5
// %2                                             // user: %6
// %3                                             // user: %7
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float, %3 : $@thick Float.Type):
  // function_ref specialized static FloatingPoint.maximum(_:_:)
  %4 = function_ref @$sSFsE7maximumyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %7
  %5 = load %1 : $*Float                          // user: %7
  %6 = load %2 : $*Float                          // user: %7
  %7 = apply %4(%5, %6, %3) : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %8
  store %7 to %0 : $*Float                        // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSfSFsSF7maximumyxx_xtFZTW'

// protocol witness for static FloatingPoint.minimumMagnitude(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF16minimumMagnitudeyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float, @thick Float.Type) -> @out Float {
// %0                                             // user: %8
// %1                                             // user: %5
// %2                                             // user: %6
// %3                                             // user: %7
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float, %3 : $@thick Float.Type):
  // function_ref specialized static FloatingPoint.minimumMagnitude(_:_:)
  %4 = function_ref @$sSFsE16minimumMagnitudeyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %7
  %5 = load %1 : $*Float                          // user: %7
  %6 = load %2 : $*Float                          // user: %7
  %7 = apply %4(%5, %6, %3) : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %8
  store %7 to %0 : $*Float                        // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSfSFsSF16minimumMagnitudeyxx_xtFZTW'

// protocol witness for static FloatingPoint.maximumMagnitude(_:_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF16maximumMagnitudeyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float, @thick Float.Type) -> @out Float {
// %0                                             // user: %8
// %1                                             // user: %5
// %2                                             // user: %6
// %3                                             // user: %7
bb0(%0 : $*Float, %1 : $*Float, %2 : $*Float, %3 : $@thick Float.Type):
  // function_ref specialized static FloatingPoint.maximumMagnitude(_:_:)
  %4 = function_ref @$sSFsE16maximumMagnitudeyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %7
  %5 = load %1 : $*Float                          // user: %7
  %6 = load %2 : $*Float                          // user: %7
  %7 = apply %4(%5, %6, %3) : $@convention(method) (Float, Float, @thick Float.Type) -> Float // user: %8
  store %7 to %0 : $*Float                        // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSfSFsSF16maximumMagnitudeyxx_xtFZTW'

// protocol witness for FloatingPoint.rounded(_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF7roundedyxs25FloatingPointRoundingRuleOFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed FloatingPointRoundingRule, @in_guaranteed Float) -> @out Float {
// %0                                             // user: %89
// %1                                             // users: %13, %8
// %2                                             // user: %3
bb0(%0 : $*Float, %1 : $*FloatingPointRoundingRule, %2 : $*Float):
  %3 = load %2 : $*Float                          // users: %6, %5
  %4 = alloc_stack $Float                         // users: %88, %87, %83, %78, %73, %68, %64, %21, %16, %13, %6
  %5 = struct_extract %3 : $Float, #Float._value  // users: %84, %79, %74, %69, %65, %26, %22, %17
  store %3 to %4 : $*Float                        // id: %6
  %7 = alloc_stack $FloatingPointRoundingRule     // users: %82, %77, %72, %25, %20, %15, %11, %10, %9, %8
  copy_addr %1 to [initialization] %7 : $*FloatingPointRoundingRule // id: %8
  switch_enum_addr %7 : $*FloatingPointRoundingRule, case #FloatingPointRoundingRule.toNearestOrAwayFromZero!enumelt: bb12, case #FloatingPointRoundingRule.toNearestOrEven!enumelt: bb11, case #FloatingPointRoundingRule.towardZero!enumelt: bb10, case #FloatingPointRoundingRule.awayFromZero!enumelt: bb4, case #FloatingPointRoundingRule.up!enumelt: bb3, case #FloatingPointRoundingRule.down!enumelt: bb2, default bb1 // id: %9

bb1:                                              // Preds: bb0
  destroy_addr %7 : $*FloatingPointRoundingRule   // id: %10
  dealloc_stack %7 : $*FloatingPointRoundingRule  // id: %11
  // function_ref Float._roundSlowPath(_:)
  %12 = function_ref @$sSf14_roundSlowPathyys25FloatingPointRoundingRuleOF : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Float) -> () // user: %13
  %13 = apply %12(%1, %4) : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Float) -> ()
  br bb13                                         // id: %14

bb2:                                              // Preds: bb0
  dealloc_stack %7 : $*FloatingPointRoundingRule  // id: %15
  %16 = struct_element_addr %4 : $*Float, #Float._value // user: %18
  %17 = builtin "int_floor_FPIEEE32"(%5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %18
  store %17 to %16 : $*Builtin.FPIEEE32           // id: %18
  br bb13                                         // id: %19

bb3:                                              // Preds: bb0
  dealloc_stack %7 : $*FloatingPointRoundingRule  // id: %20
  %21 = struct_element_addr %4 : $*Float, #Float._value // user: %23
  %22 = builtin "int_ceil_FPIEEE32"(%5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %23
  store %22 to %21 : $*Builtin.FPIEEE32           // id: %23
  br bb13                                         // id: %24

bb4:                                              // Preds: bb0
  dealloc_stack %7 : $*FloatingPointRoundingRule  // id: %25
  %26 = builtin "bitcast_FPIEEE32_Int32"(%5 : $Builtin.FPIEEE32) : $Builtin.Int32 // user: %28
  %27 = integer_literal $Builtin.Int32, 31        // user: %28
  %28 = builtin "lshr_Int32"(%26 : $Builtin.Int32, %27 : $Builtin.Int32) : $Builtin.Int32 // user: %29
  %29 = builtin "zextOrBitCast_Int32_Int64"(%28 : $Builtin.Int32) : $Builtin.Int64 // user: %37
  %30 = integer_literal $Builtin.Int64, 0         // users: %61, %37
  %31 = integer_literal $Builtin.Int64, 1         // users: %62, %61, %37
  %32 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %33
  %33 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %32 : $FloatingPointSign // user: %37
  %34 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %35
  %35 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %34 : $FloatingPointSign // user: %37
  %36 = enum $Optional<FloatingPointSign>, #Optional.none!enumelt // user: %37
  %37 = select_value %29 : $Builtin.Int64, case %31: %33, case %30: %35, default %36 : $Optional<FloatingPointSign> // user: %38
  switch_enum %37 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb7, case #Optional.none!enumelt: bb5 // id: %38

bb5:                                              // Preds: bb4
  %39 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %46
  %40 = integer_literal $Builtin.Word, 97         // user: %47
  %41 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %43
  %42 = integer_literal $Builtin.Word, 57         // user: %45
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %45
  %44 = integer_literal $Builtin.Int8, 2          // users: %54, %47, %45
  %45 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %44 : $Builtin.Int8) // user: %58
  %46 = builtin "ptrtoint_Word"(%39 : $Builtin.RawPointer) : $Builtin.Word // user: %47
  %47 = struct $StaticString (%46 : $Builtin.Word, %40 : $Builtin.Word, %44 : $Builtin.Int8) // user: %58
  %48 = integer_literal $Builtin.Int64, 206       // user: %49
  %49 = struct $UInt (%48 : $Builtin.Int64)       // user: %58
  br bb6                                          // id: %50

bb6:                                              // Preds: bb5
  %51 = string_literal utf8 "Fatal error"         // user: %53
  %52 = integer_literal $Builtin.Word, 11         // user: %54
  %53 = builtin "ptrtoint_Word"(%51 : $Builtin.RawPointer) : $Builtin.Word // user: %54
  %54 = struct $StaticString (%53 : $Builtin.Word, %52 : $Builtin.Word, %44 : $Builtin.Int8) // user: %58
  %55 = integer_literal $Builtin.Int32, 1         // user: %56
  %56 = struct $UInt32 (%55 : $Builtin.Int32)     // user: %58
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %57 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %58
  %58 = apply %57(%54, %45, %47, %49, %56) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %59

// %60                                            // user: %61
bb7(%60 : $FloatingPointSign):                    // Preds: bb4
  %61 = select_enum %60 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %30, case #FloatingPointSign.minus!enumelt: %31 : $Builtin.Int64 // user: %62
  %62 = builtin "cmp_eq_Int64"(%61 : $Builtin.Int64, %31 : $Builtin.Int64) : $Builtin.Int1 // user: %63
  cond_br %62, bb9, bb8                           // id: %63

bb8:                                              // Preds: bb7
  %64 = struct_element_addr %4 : $*Float, #Float._value // user: %66
  %65 = builtin "int_ceil_FPIEEE32"(%5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %66
  store %65 to %64 : $*Builtin.FPIEEE32           // id: %66
  br bb13                                         // id: %67

bb9:                                              // Preds: bb7
  %68 = struct_element_addr %4 : $*Float, #Float._value // user: %70
  %69 = builtin "int_floor_FPIEEE32"(%5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %70
  store %69 to %68 : $*Builtin.FPIEEE32           // id: %70
  br bb13                                         // id: %71

bb10:                                             // Preds: bb0
  dealloc_stack %7 : $*FloatingPointRoundingRule  // id: %72
  %73 = struct_element_addr %4 : $*Float, #Float._value // user: %75
  %74 = builtin "int_trunc_FPIEEE32"(%5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %75
  store %74 to %73 : $*Builtin.FPIEEE32           // id: %75
  br bb13                                         // id: %76

bb11:                                             // Preds: bb0
  dealloc_stack %7 : $*FloatingPointRoundingRule  // id: %77
  %78 = struct_element_addr %4 : $*Float, #Float._value // user: %80
  %79 = builtin "int_rint_FPIEEE32"(%5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %80
  store %79 to %78 : $*Builtin.FPIEEE32           // id: %80
  br bb13                                         // id: %81

bb12:                                             // Preds: bb0
  dealloc_stack %7 : $*FloatingPointRoundingRule  // id: %82
  %83 = struct_element_addr %4 : $*Float, #Float._value // user: %85
  %84 = builtin "int_round_FPIEEE32"(%5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %85
  store %84 to %83 : $*Builtin.FPIEEE32           // id: %85
  br bb13                                         // id: %86

bb13:                                             // Preds: bb12 bb11 bb10 bb9 bb8 bb3 bb2 bb1
  %87 = load %4 : $*Float                         // user: %89
  dealloc_stack %4 : $*Float                      // id: %88
  store %87 to %0 : $*Float                       // id: %89
  %90 = tuple ()                                  // user: %91
  return %90 : $()                                // id: %91
} // end sil function '$sSfSFsSF7roundedyxs25FloatingPointRoundingRuleOFTW'

// protocol witness for FloatingPoint.round(_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF5roundyys25FloatingPointRoundingRuleOFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed FloatingPointRoundingRule, @inout Float) -> () {
// %0                                             // users: %8, %3
// %1                                             // users: %54, %48, %42, %36, %31, %23, %17, %11, %8
bb0(%0 : $*FloatingPointRoundingRule, %1 : $*Float):
  %2 = alloc_stack $FloatingPointRoundingRule     // users: %53, %47, %41, %22, %16, %10, %6, %5, %4, %3
  copy_addr %0 to [initialization] %2 : $*FloatingPointRoundingRule // id: %3
  switch_enum_addr %2 : $*FloatingPointRoundingRule, case #FloatingPointRoundingRule.toNearestOrAwayFromZero!enumelt: bb9, case #FloatingPointRoundingRule.toNearestOrEven!enumelt: bb8, case #FloatingPointRoundingRule.towardZero!enumelt: bb7, case #FloatingPointRoundingRule.awayFromZero!enumelt: bb4, case #FloatingPointRoundingRule.up!enumelt: bb3, case #FloatingPointRoundingRule.down!enumelt: bb2, default bb1 // id: %4

bb1:                                              // Preds: bb0
  destroy_addr %2 : $*FloatingPointRoundingRule   // id: %5
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %6
  // function_ref Float._roundSlowPath(_:)
  %7 = function_ref @$sSf14_roundSlowPathyys25FloatingPointRoundingRuleOF : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Float) -> () // user: %8
  %8 = apply %7(%0, %1) : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Float) -> ()
  br bb10                                         // id: %9

bb2:                                              // Preds: bb0
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %10
  %11 = struct_element_addr %1 : $*Float, #Float._value // users: %14, %12
  %12 = load %11 : $*Builtin.FPIEEE32             // user: %13
  %13 = builtin "int_floor_FPIEEE32"(%12 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %14
  store %13 to %11 : $*Builtin.FPIEEE32           // id: %14
  br bb10                                         // id: %15

bb3:                                              // Preds: bb0
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %16
  %17 = struct_element_addr %1 : $*Float, #Float._value // users: %20, %18
  %18 = load %17 : $*Builtin.FPIEEE32             // user: %19
  %19 = builtin "int_ceil_FPIEEE32"(%18 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %20
  store %19 to %17 : $*Builtin.FPIEEE32           // id: %20
  br bb10                                         // id: %21

bb4:                                              // Preds: bb0
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %22
  %23 = load %1 : $*Float                         // users: %37, %32, %25
  // function_ref Float.sign.getter
  %24 = function_ref @$sSf4signs17FloatingPointSignOvg : $@convention(method) (Float) -> FloatingPointSign // user: %25
  %25 = apply %24(%23) : $@convention(method) (Float) -> FloatingPointSign // user: %28
  %26 = integer_literal $Builtin.Int64, 0         // user: %28
  %27 = integer_literal $Builtin.Int64, 1         // users: %29, %28
  %28 = select_enum %25 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %26, case #FloatingPointSign.minus!enumelt: %27 : $Builtin.Int64 // user: %29
  %29 = builtin "cmp_eq_Int64"(%28 : $Builtin.Int64, %27 : $Builtin.Int64) : $Builtin.Int1 // user: %30
  cond_br %29, bb6, bb5                           // id: %30

bb5:                                              // Preds: bb4
  %31 = struct_element_addr %1 : $*Float, #Float._value // user: %34
  %32 = struct_extract %23 : $Float, #Float._value // user: %33
  %33 = builtin "int_ceil_FPIEEE32"(%32 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %34
  store %33 to %31 : $*Builtin.FPIEEE32           // id: %34
  br bb10                                         // id: %35

bb6:                                              // Preds: bb4
  %36 = struct_element_addr %1 : $*Float, #Float._value // user: %39
  %37 = struct_extract %23 : $Float, #Float._value // user: %38
  %38 = builtin "int_floor_FPIEEE32"(%37 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %39
  store %38 to %36 : $*Builtin.FPIEEE32           // id: %39
  br bb10                                         // id: %40

bb7:                                              // Preds: bb0
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %41
  %42 = struct_element_addr %1 : $*Float, #Float._value // users: %45, %43
  %43 = load %42 : $*Builtin.FPIEEE32             // user: %44
  %44 = builtin "int_trunc_FPIEEE32"(%43 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %45
  store %44 to %42 : $*Builtin.FPIEEE32           // id: %45
  br bb10                                         // id: %46

bb8:                                              // Preds: bb0
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %47
  %48 = struct_element_addr %1 : $*Float, #Float._value // users: %51, %49
  %49 = load %48 : $*Builtin.FPIEEE32             // user: %50
  %50 = builtin "int_rint_FPIEEE32"(%49 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %51
  store %50 to %48 : $*Builtin.FPIEEE32           // id: %51
  br bb10                                         // id: %52

bb9:                                              // Preds: bb0
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %53
  %54 = struct_element_addr %1 : $*Float, #Float._value // users: %57, %55
  %55 = load %54 : $*Builtin.FPIEEE32             // user: %56
  %56 = builtin "int_round_FPIEEE32"(%55 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %57
  store %56 to %54 : $*Builtin.FPIEEE32           // id: %57
  br bb10                                         // id: %58

bb10:                                             // Preds: bb9 bb8 bb7 bb6 bb5 bb3 bb2 bb1
  %59 = tuple ()                                  // user: %60
  return %59 : $()                                // id: %60
} // end sil function '$sSfSFsSF5roundyys25FloatingPointRoundingRuleOFTW'

// protocol witness for FloatingPoint.nextUp.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF6nextUpxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> @out Float {
// %0                                             // user: %26
// %1                                             // user: %2
bb0(%0 : $*Float, %1 : $*Float):
  %2 = struct_element_addr %1 : $*Float, #Float._value // user: %3
  %3 = load %2 : $*Builtin.FPIEEE32               // user: %5
  %4 = float_literal $Builtin.FPIEEE32, 0x0 // 0  // user: %5
  %5 = builtin "fadd_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // users: %14, %9, %6
  %6 = struct $Float (%5 : $Builtin.FPIEEE32)     // user: %13
  %7 = integer_literal $Builtin.Int32, 2139095040 // user: %8
  %8 = builtin "bitcast_Int32_FPIEEE32"(%7 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %9
  %9 = builtin "fcmp_olt_FPIEEE32"(%5 : $Builtin.FPIEEE32, %8 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %11
  %10 = integer_literal $Builtin.Int1, -1         // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %12
  cond_br %11, bb2, bb1                           // id: %12

bb1:                                              // Preds: bb0
  br bb3(%6 : $Float)                             // id: %13

bb2:                                              // Preds: bb0
  %14 = builtin "bitcast_FPIEEE32_Int32"(%5 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %20, %16
  %15 = integer_literal $Builtin.Int32, 31        // user: %16
  %16 = builtin "ashr_Int32"(%14 : $Builtin.Int32, %15 : $Builtin.Int32) : $Builtin.Int32 // user: %18
  %17 = integer_literal $Builtin.Int32, 1         // user: %18
  %18 = builtin "or_Int32"(%16 : $Builtin.Int32, %17 : $Builtin.Int32) : $Builtin.Int32 // user: %20
  %19 = integer_literal $Builtin.Int1, 0          // user: %20
  %20 = builtin "uadd_with_overflow_Int32"(%14 : $Builtin.Int32, %18 : $Builtin.Int32, %19 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %21
  %21 = tuple_extract %20 : $(Builtin.Int32, Builtin.Int1), 0 // user: %22
  %22 = builtin "bitcast_Int32_FPIEEE32"(%21 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %23
  %23 = struct $Float (%22 : $Builtin.FPIEEE32)   // user: %24
  br bb3(%23 : $Float)                            // id: %24

// %25                                            // user: %26
bb3(%25 : $Float):                                // Preds: bb2 bb1
  store %25 to %0 : $*Float                       // id: %26
  %27 = tuple ()                                  // user: %28
  return %27 : $()                                // id: %28
} // end sil function '$sSfSFsSF6nextUpxvgTW'

// protocol witness for FloatingPoint.nextDown.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF8nextDownxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> @out Float {
// %0                                             // user: %27
// %1                                             // user: %2
bb0(%0 : $*Float, %1 : $*Float):
  %2 = struct_element_addr %1 : $*Float, #Float._value // user: %3
  %3 = load %2 : $*Builtin.FPIEEE32               // user: %4
  %4 = builtin "fneg_FPIEEE32"(%3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %6
  %5 = float_literal $Builtin.FPIEEE32, 0x0 // 0  // user: %6
  %6 = builtin "fadd_FPIEEE32"(%4 : $Builtin.FPIEEE32, %5 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // users: %14, %13, %9
  %7 = integer_literal $Builtin.Int32, 2139095040 // user: %8
  %8 = builtin "bitcast_Int32_FPIEEE32"(%7 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %9
  %9 = builtin "fcmp_olt_FPIEEE32"(%6 : $Builtin.FPIEEE32, %8 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %11
  %10 = integer_literal $Builtin.Int1, -1         // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %12
  cond_br %11, bb2, bb1                           // id: %12

bb1:                                              // Preds: bb0
  br bb3(%6 : $Builtin.FPIEEE32)                  // id: %13

bb2:                                              // Preds: bb0
  %14 = builtin "bitcast_FPIEEE32_Int32"(%6 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %20, %16
  %15 = integer_literal $Builtin.Int32, 31        // user: %16
  %16 = builtin "ashr_Int32"(%14 : $Builtin.Int32, %15 : $Builtin.Int32) : $Builtin.Int32 // user: %18
  %17 = integer_literal $Builtin.Int32, 1         // user: %18
  %18 = builtin "or_Int32"(%16 : $Builtin.Int32, %17 : $Builtin.Int32) : $Builtin.Int32 // user: %20
  %19 = integer_literal $Builtin.Int1, 0          // user: %20
  %20 = builtin "uadd_with_overflow_Int32"(%14 : $Builtin.Int32, %18 : $Builtin.Int32, %19 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %21
  %21 = tuple_extract %20 : $(Builtin.Int32, Builtin.Int1), 0 // user: %22
  %22 = builtin "bitcast_Int32_FPIEEE32"(%21 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %23
  br bb3(%22 : $Builtin.FPIEEE32)                 // id: %23

// %24                                            // user: %25
bb3(%24 : $Builtin.FPIEEE32):                     // Preds: bb2 bb1
  %25 = builtin "fneg_FPIEEE32"(%24 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %26
  %26 = struct $Float (%25 : $Builtin.FPIEEE32)   // user: %27
  store %26 to %0 : $*Float                       // id: %27
  %28 = tuple ()                                  // user: %29
  return %28 : $()                                // id: %29
} // end sil function '$sSfSFsSF8nextDownxvgTW'

// protocol witness for FloatingPoint.isEqual(to:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF7isEqual2toSbx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $*Float, %1 : $*Float):
  %2 = struct_element_addr %0 : $*Float, #Float._value // user: %3
  %3 = load %2 : $*Builtin.FPIEEE32               // user: %6
  %4 = struct_element_addr %1 : $*Float, #Float._value // user: %5
  %5 = load %4 : $*Builtin.FPIEEE32               // user: %6
  %6 = builtin "fcmp_oeq_FPIEEE32"(%5 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$sSfSFsSF7isEqual2toSbx_tFTW'

// protocol witness for FloatingPoint.isLess(than:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF6isLess4thanSbx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $*Float, %1 : $*Float):
  %2 = struct_element_addr %0 : $*Float, #Float._value // user: %3
  %3 = load %2 : $*Builtin.FPIEEE32               // user: %6
  %4 = struct_element_addr %1 : $*Float, #Float._value // user: %5
  %5 = load %4 : $*Builtin.FPIEEE32               // user: %6
  %6 = builtin "fcmp_olt_FPIEEE32"(%5 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$sSfSFsSF6isLess4thanSbx_tFTW'

// protocol witness for FloatingPoint.isLessThanOrEqualTo(_:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF19isLessThanOrEqualToySbxFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $*Float, %1 : $*Float):
  %2 = struct_element_addr %0 : $*Float, #Float._value // user: %3
  %3 = load %2 : $*Builtin.FPIEEE32               // user: %6
  %4 = struct_element_addr %1 : $*Float, #Float._value // user: %5
  %5 = load %4 : $*Builtin.FPIEEE32               // user: %6
  %6 = builtin "fcmp_ole_FPIEEE32"(%5 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$sSfSFsSF19isLessThanOrEqualToySbxFTW'

// protocol witness for FloatingPoint.isTotallyOrdered(belowOrEqualTo:) in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF16isTotallyOrdered14belowOrEqualToSbx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float, @in_guaranteed Float) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*Float, %1 : $*Float):
  // function_ref specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)
  %2 = function_ref @$sSBsE16isTotallyOrdered14belowOrEqualToSbx_tFSf_Tgq5 : $@convention(method) (Float, Float) -> Bool // user: %5
  %3 = load %0 : $*Float                          // user: %5
  %4 = load %1 : $*Float                          // user: %5
  %5 = apply %2(%3, %4) : $@convention(method) (Float, Float) -> Bool // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$sSfSFsSF16isTotallyOrdered14belowOrEqualToSbx_tFTW'

// protocol witness for FloatingPoint.isNormal.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF8isNormalSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = struct_element_addr %0 : $*Float, #Float._value // user: %2
  %2 = load %1 : $*Builtin.FPIEEE32               // user: %3
  %3 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // user: %5
  %4 = integer_literal $Builtin.Int32, 23         // user: %5
  %5 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int32 // user: %6
  %6 = builtin "zextOrBitCast_Int32_Int64"(%5 : $Builtin.Int32) : $Builtin.Int64 // user: %8
  %7 = integer_literal $Builtin.Int64, 255        // users: %14, %8
  %8 = builtin "and_Int64"(%6 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int64 // users: %14, %10
  %9 = integer_literal $Builtin.Int64, 0          // user: %10
  %10 = builtin "cmp_ult_Int64"(%9 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int1 // user: %11
  cond_br %10, bb2, bb1                           // id: %11

bb1:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  br bb3(%12 : $Builtin.Int1)                     // id: %13

bb2:                                              // Preds: bb0
  %14 = builtin "cmp_ult_Int64"(%8 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int1 // user: %15
  br bb3(%14 : $Builtin.Int1)                     // id: %15

// %16                                            // user: %17
bb3(%16 : $Builtin.Int1):                         // Preds: bb2 bb1
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %18
  return %17 : $Bool                              // id: %18
} // end sil function '$sSfSFsSF8isNormalSbvgTW'

// protocol witness for FloatingPoint.isFinite.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF8isFiniteSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = struct_element_addr %0 : $*Float, #Float._value // user: %2
  %2 = load %1 : $*Builtin.FPIEEE32               // user: %3
  %3 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // user: %5
  %4 = integer_literal $Builtin.Int32, 23         // user: %5
  %5 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int32 // user: %6
  %6 = builtin "zextOrBitCast_Int32_Int64"(%5 : $Builtin.Int32) : $Builtin.Int64 // user: %8
  %7 = integer_literal $Builtin.Int64, 255        // users: %9, %8
  %8 = builtin "and_Int64"(%6 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int64 // user: %9
  %9 = builtin "cmp_ult_Int64"(%8 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int1 // user: %10
  %10 = struct $Bool (%9 : $Builtin.Int1)         // user: %11
  return %10 : $Bool                              // id: %11
} // end sil function '$sSfSFsSF8isFiniteSbvgTW'

// protocol witness for FloatingPoint.isZero.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF6isZeroSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = struct_element_addr %0 : $*Float, #Float._value // user: %2
  %2 = load %1 : $*Builtin.FPIEEE32               // user: %3
  %3 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %15, %5
  %4 = integer_literal $Builtin.Int32, 23         // user: %5
  %5 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int32 // user: %6
  %6 = builtin "zextOrBitCast_Int32_Int64"(%5 : $Builtin.Int32) : $Builtin.Int64 // user: %8
  %7 = integer_literal $Builtin.Int64, 255        // user: %8
  %8 = builtin "and_Int64"(%6 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int64 // user: %10
  %9 = integer_literal $Builtin.Int64, 0          // user: %10
  %10 = builtin "cmp_eq_Int64"(%8 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %11
  cond_br %10, bb2, bb1                           // id: %11

bb1:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  br bb3(%12 : $Builtin.Int1)                     // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int32, 8388607   // user: %15
  %15 = builtin "and_Int32"(%3 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32 // user: %17
  %16 = integer_literal $Builtin.Int32, 0         // user: %17
  %17 = builtin "cmp_eq_Int32"(%15 : $Builtin.Int32, %16 : $Builtin.Int32) : $Builtin.Int1 // user: %18
  br bb3(%17 : $Builtin.Int1)                     // id: %18

// %19                                            // user: %20
bb3(%19 : $Builtin.Int1):                         // Preds: bb2 bb1
  %20 = struct $Bool (%19 : $Builtin.Int1)        // user: %21
  return %20 : $Bool                              // id: %21
} // end sil function '$sSfSFsSF6isZeroSbvgTW'

// protocol witness for FloatingPoint.isSubnormal.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF11isSubnormalSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = struct_element_addr %0 : $*Float, #Float._value // user: %2
  %2 = load %1 : $*Builtin.FPIEEE32               // user: %3
  %3 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %15, %5
  %4 = integer_literal $Builtin.Int32, 23         // user: %5
  %5 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int32 // user: %6
  %6 = builtin "zextOrBitCast_Int32_Int64"(%5 : $Builtin.Int32) : $Builtin.Int64 // user: %8
  %7 = integer_literal $Builtin.Int64, 255        // user: %8
  %8 = builtin "and_Int64"(%6 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int64 // user: %10
  %9 = integer_literal $Builtin.Int64, 0          // users: %17, %10
  %10 = builtin "cmp_eq_Int64"(%8 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %11
  cond_br %10, bb2, bb1                           // id: %11

bb1:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  br bb3(%12 : $Builtin.Int1)                     // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int32, 8388607   // user: %15
  %15 = builtin "and_Int32"(%3 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32 // user: %16
  %16 = builtin "zextOrBitCast_Int32_Int64"(%15 : $Builtin.Int32) : $Builtin.Int64 // user: %17
  %17 = builtin "cmp_eq_Int64"(%16 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %19
  %18 = integer_literal $Builtin.Int1, -1         // user: %19
  %19 = builtin "xor_Int1"(%17 : $Builtin.Int1, %18 : $Builtin.Int1) : $Builtin.Int1 // user: %20
  br bb3(%19 : $Builtin.Int1)                     // id: %20

// %21                                            // user: %22
bb3(%21 : $Builtin.Int1):                         // Preds: bb2 bb1
  %22 = struct $Bool (%21 : $Builtin.Int1)        // user: %23
  return %22 : $Bool                              // id: %23
} // end sil function '$sSfSFsSF11isSubnormalSbvgTW'

// protocol witness for FloatingPoint.isInfinite.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF10isInfiniteSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = struct_element_addr %0 : $*Float, #Float._value // user: %2
  %2 = load %1 : $*Builtin.FPIEEE32               // user: %3
  %3 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %12, %5
  %4 = integer_literal $Builtin.Int32, 23         // user: %5
  %5 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int32 // user: %6
  %6 = builtin "zextOrBitCast_Int32_Int64"(%5 : $Builtin.Int32) : $Builtin.Int64 // user: %8
  %7 = integer_literal $Builtin.Int64, 255        // users: %9, %8
  %8 = builtin "and_Int64"(%6 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int64 // user: %9
  %9 = builtin "cmp_ult_Int64"(%8 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int1 // user: %10
  cond_br %9, bb2, bb1                            // id: %10

bb1:                                              // Preds: bb0
  %11 = integer_literal $Builtin.Int32, 8388607   // user: %12
  %12 = builtin "and_Int32"(%3 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int32 // user: %14
  %13 = integer_literal $Builtin.Int32, 0         // user: %14
  %14 = builtin "cmp_eq_Int32"(%12 : $Builtin.Int32, %13 : $Builtin.Int32) : $Builtin.Int1 // user: %15
  br bb3(%14 : $Builtin.Int1)                     // id: %15

bb2:                                              // Preds: bb0
  %16 = integer_literal $Builtin.Int1, 0          // user: %17
  br bb3(%16 : $Builtin.Int1)                     // id: %17

// %18                                            // user: %19
bb3(%18 : $Builtin.Int1):                         // Preds: bb2 bb1
  %19 = struct $Bool (%18 : $Builtin.Int1)        // user: %20
  return %19 : $Bool                              // id: %20
} // end sil function '$sSfSFsSF10isInfiniteSbvgTW'

// protocol witness for FloatingPoint.isNaN.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF5isNaNSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = struct_element_addr %0 : $*Float, #Float._value // user: %2
  %2 = load %1 : $*Builtin.FPIEEE32               // user: %3
  %3 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %12, %5
  %4 = integer_literal $Builtin.Int32, 23         // user: %5
  %5 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int32 // user: %6
  %6 = builtin "zextOrBitCast_Int32_Int64"(%5 : $Builtin.Int32) : $Builtin.Int64 // user: %8
  %7 = integer_literal $Builtin.Int64, 255        // users: %9, %8
  %8 = builtin "and_Int64"(%6 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int64 // user: %9
  %9 = builtin "cmp_ult_Int64"(%8 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int1 // user: %10
  cond_br %9, bb2, bb1                            // id: %10

bb1:                                              // Preds: bb0
  %11 = integer_literal $Builtin.Int32, 8388607   // user: %12
  %12 = builtin "and_Int32"(%3 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int32 // user: %14
  %13 = integer_literal $Builtin.Int64, 0         // user: %15
  %14 = builtin "zextOrBitCast_Int32_Int64"(%12 : $Builtin.Int32) : $Builtin.Int64 // user: %15
  %15 = builtin "cmp_eq_Int64"(%14 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %17
  %16 = integer_literal $Builtin.Int1, -1         // user: %17
  %17 = builtin "xor_Int1"(%15 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %18
  br bb3(%17 : $Builtin.Int1)                     // id: %18

bb2:                                              // Preds: bb0
  %19 = integer_literal $Builtin.Int1, 0          // user: %20
  br bb3(%19 : $Builtin.Int1)                     // id: %20

// %21                                            // user: %22
bb3(%21 : $Builtin.Int1):                         // Preds: bb2 bb1
  %22 = struct $Bool (%21 : $Builtin.Int1)        // user: %23
  return %22 : $Bool                              // id: %23
} // end sil function '$sSfSFsSF5isNaNSbvgTW'

// protocol witness for FloatingPoint.isSignalingNaN.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSfSFsSF14isSignalingNaNSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Float):
  %1 = struct_element_addr %0 : $*Float, #Float._value // user: %2
  %2 = load %1 : $*Builtin.FPIEEE32               // user: %3
  %3 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %20, %13, %5
  %4 = integer_literal $Builtin.Int32, 23         // user: %5
  %5 = builtin "lshr_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int32 // user: %6
  %6 = builtin "zextOrBitCast_Int32_Int64"(%5 : $Builtin.Int32) : $Builtin.Int64 // user: %8
  %7 = integer_literal $Builtin.Int64, 255        // users: %9, %8
  %8 = builtin "and_Int64"(%6 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int64 // user: %9
  %9 = builtin "cmp_ult_Int64"(%8 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int1 // user: %10
  cond_br %9, bb1, bb2                            // id: %10

bb1:                                              // Preds: bb0
  br bb5                                          // id: %11

bb2:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int32, 8388607   // user: %13
  %13 = builtin "and_Int32"(%3 : $Builtin.Int32, %12 : $Builtin.Int32) : $Builtin.Int32 // user: %15
  %14 = integer_literal $Builtin.Int64, 0         // user: %16
  %15 = builtin "zextOrBitCast_Int32_Int64"(%13 : $Builtin.Int32) : $Builtin.Int64 // user: %16
  %16 = builtin "cmp_eq_Int64"(%15 : $Builtin.Int64, %14 : $Builtin.Int64) : $Builtin.Int1 // user: %17
  cond_br %16, bb3, bb4                           // id: %17

bb3:                                              // Preds: bb2
  br bb5                                          // id: %18

bb4:                                              // Preds: bb2
  %19 = integer_literal $Builtin.Int32, 4194304   // user: %20
  %20 = builtin "and_Int32"(%3 : $Builtin.Int32, %19 : $Builtin.Int32) : $Builtin.Int32 // user: %22
  %21 = integer_literal $Builtin.Int32, 0         // user: %22
  %22 = builtin "cmp_eq_Int32"(%20 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int1 // user: %23
  br bb6(%22 : $Builtin.Int1)                     // id: %23

bb5:                                              // Preds: bb3 bb1
  %24 = integer_literal $Builtin.Int1, 0          // user: %25
  br bb6(%24 : $Builtin.Int1)                     // id: %25

// %26                                            // user: %27
bb6(%26 : $Builtin.Int1):                         // Preds: bb5 bb4
  %27 = struct $Bool (%26 : $Builtin.Int1)        // user: %28
  return %27 : $Bool                              // id: %28
} // end sil function '$sSfSFsSF14isSignalingNaNSbvgTW'

// protocol witness for FloatingPoint.floatingPointClass.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF18floatingPointClasss08FloatingB14ClassificationOvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> FloatingPointClassification {
// %0                                             // user: %2
bb0(%0 : $*Float):
  // function_ref specialized FloatingPoint.floatingPointClass.getter
  %1 = function_ref @$sSFsE18floatingPointClasss08FloatingB14ClassificationOvgSf_Tgq5 : $@convention(method) (Float) -> FloatingPointClassification // user: %3
  %2 = load %0 : $*Float                          // user: %3
  %3 = apply %1(%2) : $@convention(method) (Float) -> FloatingPointClassification // user: %4
  return %3 : $FloatingPointClassification        // id: %4
} // end sil function '$sSfSFsSF18floatingPointClasss08FloatingB14ClassificationOvgTW'

// protocol witness for FloatingPoint.isCanonical.getter in conformance Float
sil shared_external [transparent] [serialized] [thunk] @$sSfSFsSF11isCanonicalSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Float) -> Bool {
bb0(%0 : $*Float):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$sSfSFsSF11isCanonicalSbvgTW'

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// Float.init(sign:exponent:significand:)
sil [serialized] @$sSf4sign8exponent11significandSfs17FloatingPointSignO_SiSftcfC : $@convention(method) (FloatingPointSign, Int, Float, @thin Float.Type) -> Float

// specialized BinaryFloatingPoint.init(signOf:magnitudeOf:)
sil shared_external [serializable] @$sSBsE6signOf09magnitudeB0xx_xtcfCSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float {
// %0                                             // user: %4
// %1                                             // user: %3
bb0(%0 : $Float, %1 : $Float, %2 : $@thick Float.Type):
  %3 = struct_extract %1 : $Float, #Float._value  // user: %40
  %4 = struct_extract %0 : $Float, #Float._value  // user: %5
  %5 = builtin "bitcast_FPIEEE32_Int32"(%4 : $Builtin.FPIEEE32) : $Builtin.Int32 // user: %7
  %6 = integer_literal $Builtin.Int32, 31         // user: %7
  %7 = builtin "lshr_Int32"(%5 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %8
  %8 = builtin "zextOrBitCast_Int32_Int64"(%7 : $Builtin.Int32) : $Builtin.Int64 // user: %16
  %9 = integer_literal $Builtin.Int64, 0          // user: %16
  %10 = integer_literal $Builtin.Int64, 1         // user: %16
  %11 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %12
  %12 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %11 : $FloatingPointSign // user: %16
  %13 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %14
  %14 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %13 : $FloatingPointSign // user: %16
  %15 = enum $Optional<FloatingPointSign>, #Optional.none!enumelt // user: %16
  %16 = select_value %8 : $Builtin.Int64, case %10: %12, case %9: %14, default %15 : $Optional<FloatingPointSign> // user: %17
  switch_enum %16 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb1 // id: %17

bb1:                                              // Preds: bb0
  %18 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %25
  %19 = integer_literal $Builtin.Word, 97         // user: %26
  %20 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %22
  %21 = integer_literal $Builtin.Word, 57         // user: %24
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %23 = integer_literal $Builtin.Int8, 2          // users: %33, %26, %24
  %24 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %23 : $Builtin.Int8) // user: %37
  %25 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %26
  %26 = struct $StaticString (%25 : $Builtin.Word, %19 : $Builtin.Word, %23 : $Builtin.Int8) // user: %37
  %27 = integer_literal $Builtin.Int64, 206       // user: %28
  %28 = struct $UInt (%27 : $Builtin.Int64)       // user: %37
  br bb2                                          // id: %29

bb2:                                              // Preds: bb1
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %23 : $Builtin.Int8) // user: %37
  %34 = integer_literal $Builtin.Int32, 1         // user: %35
  %35 = struct $UInt32 (%34 : $Builtin.Int32)     // user: %37
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %36 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %37
  %37 = apply %36(%33, %24, %26, %28, %35) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %38

// %39                                            // user: %52
bb3(%39 : $FloatingPointSign):                    // Preds: bb0
  %40 = builtin "bitcast_FPIEEE32_Int32"(%3 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %47, %42
  %41 = integer_literal $Builtin.Int32, 23        // user: %42
  %42 = builtin "lshr_Int32"(%40 : $Builtin.Int32, %41 : $Builtin.Int32) : $Builtin.Int32 // user: %43
  %43 = builtin "zextOrBitCast_Int32_Int64"(%42 : $Builtin.Int32) : $Builtin.Int64 // user: %45
  %44 = integer_literal $Builtin.Int64, 255       // user: %45
  %45 = builtin "and_Int64"(%43 : $Builtin.Int64, %44 : $Builtin.Int64) : $Builtin.Int64 // user: %48
  %46 = integer_literal $Builtin.Int32, 8388607   // user: %47
  %47 = builtin "and_Int32"(%40 : $Builtin.Int32, %46 : $Builtin.Int32) : $Builtin.Int32 // user: %49
  %48 = struct $UInt (%45 : $Builtin.Int64)       // user: %52
  %49 = struct $UInt32 (%47 : $Builtin.Int32)     // user: %52
  %50 = metatype $@thin Float.Type                // user: %52
  // function_ref Float.init(sign:exponentBitPattern:significandBitPattern:)
  %51 = function_ref @$sSf4sign18exponentBitPattern011significandcD0Sfs17FloatingPointSignO_Sus6UInt32VtcfC : $@convention(method) (FloatingPointSign, UInt, UInt32, @thin Float.Type) -> Float // user: %52
  %52 = apply %51(%39, %48, %49, %50) : $@convention(method) (FloatingPointSign, UInt, UInt32, @thin Float.Type) -> Float // user: %53
  return %52 : $Float                             // id: %53
} // end sil function '$sSBsE6signOf09magnitudeB0xx_xtcfCSf_Tgq5'

// _fatalErrorMessage(_:_:file:line:flags:)
sil [noinline] [_semantics "programtermination_point"] @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

// Float.init(sign:exponentBitPattern:significandBitPattern:)
sil [serialized] @$sSf4sign18exponentBitPattern011significandcD0Sfs17FloatingPointSignO_Sus6UInt32VtcfC : $@convention(method) (FloatingPointSign, UInt, UInt32, @thin Float.Type) -> Float

// specialized static BinaryFloatingPoint<>._convert<A>(from:)
sil shared_external [serializable] @$sSBss17FixedWidthInteger14RawSignificandRpzrlE8_convert4fromx5value_Sb5exacttqd___tSzRd__lFZqd__SfXMTSfSbSfRszSzRd__r__lIetMnyrd_Tpq5 : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_1_0, @thick Float.Type) -> (@out Float, Bool) {
// %0                                             // users: %975, %877, %743, %737, %514, %236, %230
// %1                                             // users: %833, %826, %793, %776, %719, %712, %679, %662, %471, %464, %431, %414, %211, %204, %171, %154, %105, %86, %81, %65, %60, %46, %41, %33
bb0(%0 : $*Float, %1 : $*τ_1_0, %2 : $@thick Float.Type):
  %3 = integer_literal $Builtin.IntLiteral, 1     // users: %567, %537
  %4 = integer_literal $Builtin.Int64, 1          // users: %621, %606, %541, %5
  %5 = builtin "sitofp_Int64_FPIEEE32"(%4 : $Builtin.Int64) : $Builtin.FPIEEE32 // user: %6
  %6 = builtin "bitcast_FPIEEE32_Int32"(%5 : $Builtin.FPIEEE32) : $Builtin.Int32 // user: %8
  %7 = integer_literal $Builtin.Int32, 23         // user: %8
  %8 = builtin "lshr_Int32"(%6 : $Builtin.Int32, %7 : $Builtin.Int32) : $Builtin.Int32 // user: %9
  %9 = builtin "zextOrBitCast_Int32_Int64"(%8 : $Builtin.Int32) : $Builtin.Int64 // user: %11
  %10 = integer_literal $Builtin.Int64, 255       // user: %11
  %11 = builtin "and_Int64"(%9 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // users: %868, %505
  %12 = integer_literal $Builtin.Int32, 8388607   // users: %617, %592
  %13 = integer_literal $Builtin.Int64, 0         // users: %973, %950, %929, %865, %838, %820, %724, %706, %632, %629, %625, %476, %458, %216, %198, %122, %119, %115, %114, %92, %71, %14
  %14 = struct $Int (%13 : $Builtin.Int64)        // users: %934, %913, %800, %686, %438, %178, %76, %55
  %15 = metatype $@thick τ_1_0.Type              // users: %826, %810, %807, %802, %793, %790, %776, %773, %761, %756, %712, %696, %693, %688, %679, %676, %662, %659, %647, %642, %464, %448, %445, %440, %431, %428, %414, %411, %399, %394, %204, %188, %185, %180, %171, %168, %154, %151, %138, %132, %81, %78, %60, %57, %50, %33, %30, %17
  %16 = witness_method $τ_1_0, #BinaryInteger.isSigned!getter.1 : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // users: %761, %756, %647, %642, %399, %394, %138, %132, %50, %17
  %17 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %18
  %18 = struct_extract %17 : $Bool, #Bool._value  // user: %19
  cond_br %18, bb2, bb1                           // id: %19

bb1:                                              // Preds: bb0
  %20 = integer_literal $Builtin.Int1, 0          // user: %21
  %21 = struct $Bool (%20 : $Builtin.Int1)        // user: %22
  br bb3(%21 : $Bool)                             // id: %22

bb2:                                              // Preds: bb0
  %23 = alloc_stack $τ_1_0                       // users: %35, %34, %33, %30
  %24 = alloc_stack $τ_1_0.IntegerLiteralType    // users: %31, %30, %28
  %25 = metatype $@thick τ_1_0.IntegerLiteralType.Type // user: %28
  %26 = integer_literal $Builtin.IntLiteral, 0    // user: %28
  %27 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // user: %28
  %28 = apply %27<τ_1_0.IntegerLiteralType>(%24, %26, %25) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %29 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // user: %30
  %30 = apply %29<τ_1_0>(%23, %24, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %24 : $*τ_1_0.IntegerLiteralType // id: %31
  %32 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %33
  %33 = apply %32<τ_1_0>(%1, %23, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %36
  destroy_addr %23 : $*τ_1_0                     // id: %34
  dealloc_stack %23 : $*τ_1_0                    // id: %35
  br bb3(%33 : $Bool)                             // id: %36

// %37                                            // user: %38
bb3(%37 : $Bool):                                 // Preds: bb2 bb1
  %38 = struct_extract %37 : $Bool, #Bool._value  // user: %39
  cond_br %38, bb11, bb4                          // id: %39

bb4:                                              // Preds: bb3
  %40 = witness_method $τ_1_0, #BinaryInteger.bitWidth!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // users: %46, %41
  %41 = apply %40<τ_1_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %43
  %42 = integer_literal $Builtin.Int64, 64        // users: %48, %44
  %43 = struct_extract %41 : $Int, #Int._value    // user: %44
  %44 = builtin "cmp_slt_Int64"(%43 : $Builtin.Int64, %42 : $Builtin.Int64) : $Builtin.Int1 // user: %45
  cond_br %44, bb10, bb5                          // id: %45

bb5:                                              // Preds: bb4
  %46 = apply %40<τ_1_0>(%1) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %47
  %47 = struct_extract %46 : $Int, #Int._value    // user: %48
  %48 = builtin "cmp_slt_Int64"(%42 : $Builtin.Int64, %47 : $Builtin.Int64) : $Builtin.Int1 // user: %49
  cond_br %48, bb9, bb6                           // id: %49

bb6:                                              // Preds: bb5
  %50 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %51
  %51 = struct_extract %50 : $Bool, #Bool._value  // user: %52
  cond_br %51, bb8, bb7                           // id: %52

bb7:                                              // Preds: bb6
  %53 = alloc_stack $τ_1_0                       // users: %62, %61, %60, %57
  %54 = alloc_stack $Int                          // users: %58, %57, %55
  store %14 to %54 : $*Int                        // id: %55
  %56 = witness_method $τ_1_0, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %57
  %57 = apply %56<τ_1_0, Int>(%53, %54, %15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %54 : $*Int                       // id: %58
  %59 = witness_method $τ_1_0, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %60
  %60 = apply %59<τ_1_0>(%1, %53, %15) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %63
  destroy_addr %53 : $*τ_1_0                     // id: %61
  dealloc_stack %53 : $*τ_1_0                    // id: %62
  br bb12(%60 : $Bool)                            // id: %63

bb8:                                              // Preds: bb6
  %64 = alloc_stack $τ_1_0                       // users: %70, %69, %67, %65
  copy_addr %1 to [initialization] %64 : $*τ_1_0 // id: %65
  %66 = witness_method $τ_1_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %67
  %67 = apply %66<τ_1_0>(%64) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %68
  %68 = struct_extract %67 : $UInt, #UInt._value  // user: %71
  destroy_addr %64 : $*τ_1_0                     // id: %69
  dealloc_stack %64 : $*τ_1_0                    // id: %70
  %71 = builtin "cmp_eq_Int64"(%68 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %72
  %72 = struct $Bool (%71 : $Builtin.Int1)        // user: %73
  br bb12(%72 : $Bool)                            // id: %73

bb9:                                              // Preds: bb5
  %74 = alloc_stack $τ_1_0                       // users: %83, %82, %81, %78
  %75 = alloc_stack $Int                          // users: %79, %78, %76
  store %14 to %75 : $*Int                        // id: %76
  %77 = witness_method $τ_1_0, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %78
  %78 = apply %77<τ_1_0, Int>(%74, %75, %15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %75 : $*Int                       // id: %79
  %80 = witness_method $τ_1_0, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %81
  %81 = apply %80<τ_1_0>(%1, %74, %15) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %84
  destroy_addr %74 : $*τ_1_0                     // id: %82
  dealloc_stack %74 : $*τ_1_0                    // id: %83
  br bb12(%81 : $Bool)                            // id: %84

bb10:                                             // Preds: bb4
  %85 = alloc_stack $τ_1_0                       // users: %91, %90, %88, %86
  copy_addr %1 to [initialization] %85 : $*τ_1_0 // id: %86
  %87 = witness_method $τ_1_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %88
  %88 = apply %87<τ_1_0>(%85) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %89
  %89 = struct_extract %88 : $UInt, #UInt._value  // user: %92
  destroy_addr %85 : $*τ_1_0                     // id: %90
  dealloc_stack %85 : $*τ_1_0                    // id: %91
  %92 = builtin "cmp_eq_Int64"(%89 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %93
  %93 = struct $Bool (%92 : $Builtin.Int1)        // user: %94
  br bb12(%93 : $Bool)                            // id: %94

bb11:                                             // Preds: bb3
  %95 = integer_literal $Builtin.Int1, 0          // user: %96
  %96 = struct $Bool (%95 : $Builtin.Int1)        // user: %97
  br bb12(%96 : $Bool)                            // id: %97

// %98                                            // user: %100
bb12(%98 : $Bool):                                // Preds: bb11 bb10 bb9 bb8 bb7
  %99 = integer_literal $Builtin.Int1, -1         // users: %976, %868, %621, %541, %515, %505, %282, %101
  %100 = struct_extract %98 : $Bool, #Bool._value // user: %101
  %101 = builtin "int_expect_Int1"(%100 : $Builtin.Int1, %99 : $Builtin.Int1) : $Builtin.Int1 // user: %102
  cond_br %101, bb162, bb13                       // id: %102

bb13:                                             // Preds: bb12
  %103 = alloc_stack $τ_1_0.Magnitude            // users: %962, %751, %584, %583, %578, %516, %249, %240, %131, %107, %105
  %104 = witness_method $τ_1_0, #Numeric.magnitude!getter.1 : <Self where Self : Numeric> (Self) -> () -> Self.Magnitude : $@convention(witness_method: Numeric) <τ_0_0 where τ_0_0 : Numeric> (@in_guaranteed τ_0_0) -> @out τ_0_0.Magnitude // user: %105
  %105 = apply %104<τ_1_0>(%103, %1) : $@convention(witness_method: Numeric) <τ_0_0 where τ_0_0 : Numeric> (@in_guaranteed τ_0_0) -> @out τ_0_0.Magnitude
  %106 = witness_method $τ_1_0.Magnitude, #BinaryInteger._binaryLogarithm!1 : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %107
  %107 = apply %106<τ_1_0.Magnitude>(%103) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %108
  %108 = struct_extract %107 : $Int, #Int._value  // users: %621, %620, %610, %528, %505, %246, %243, %126, %122, %115
  %109 = float_literal $Builtin.FPIEEE32, 0x7F7FFFFF // 3.40282347E+38 // user: %110
  %110 = struct $Float (%109 : $Builtin.FPIEEE32) // user: %112
  // function_ref Float.exponent.getter
  %111 = function_ref @$sSf8exponentSivg : $@convention(method) (Float) -> Int // user: %112
  %112 = apply %111(%110) : $@convention(method) (Float) -> Int // user: %113
  %113 = struct_extract %112 : $Int, #Int._value  // users: %636, %629, %126, %119, %114
  %114 = builtin "cmp_slt_Int64"(%113 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // users: %628, %626, %118, %116
  %115 = builtin "cmp_slt_Int64"(%108 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // users: %503, %116
  %116 = builtin "cmp_eq_Int1"(%114 : $Builtin.Int1, %115 : $Builtin.Int1) : $Builtin.Int1 // user: %117
  cond_br %116, bb15, bb14                        // id: %117

bb14:                                             // Preds: bb13
  br bb21(%114 : $Builtin.Int1)                   // id: %118

bb15:                                             // Preds: bb13
  %119 = builtin "cmp_eq_Int64"(%113 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %120
  cond_br %119, bb17, bb16                        // id: %120

bb16:                                             // Preds: bb15
  br bb20                                         // id: %121

bb17:                                             // Preds: bb15
  %122 = builtin "cmp_eq_Int64"(%108 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %123
  cond_br %122, bb19, bb18                        // id: %123

bb18:                                             // Preds: bb17
  br bb20                                         // id: %124

bb19:                                             // Preds: bb17
  br bb42                                         // id: %125

bb20:                                             // Preds: bb18 bb16
  %126 = builtin "cmp_slt_Int64"(%113 : $Builtin.Int64, %108 : $Builtin.Int64) : $Builtin.Int1 // user: %127
  br bb21(%126 : $Builtin.Int1)                   // id: %127

// %128                                           // user: %129
bb21(%128 : $Builtin.Int1):                       // Preds: bb20 bb14
  cond_br %128, bb23, bb22                        // id: %129

bb22:                                             // Preds: bb21
  br bb42                                         // id: %130

bb23:                                             // Preds: bb21
  destroy_addr %103 : $*τ_1_0.Magnitude          // id: %131
  %132 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %133
  %133 = struct_extract %132 : $Bool, #Bool._value // user: %134
  cond_br %133, bb25, bb24                        // id: %134

bb24:                                             // Preds: bb23
  %135 = integer_literal $Builtin.Int1, 0         // user: %136
  %136 = struct $Bool (%135 : $Builtin.Int1)      // user: %137
  br bb38(%136 : $Bool)                           // id: %137

bb25:                                             // Preds: bb23
  %138 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %139
  %139 = struct_extract %138 : $Bool, #Bool._value // user: %140
  cond_br %139, bb27, bb26                        // id: %140

bb26:                                             // Preds: bb25
  %141 = integer_literal $Builtin.Int1, 0         // user: %142
  %142 = struct $Bool (%141 : $Builtin.Int1)      // user: %143
  br bb28(%142 : $Bool)                           // id: %143

bb27:                                             // Preds: bb25
  %144 = alloc_stack $τ_1_0                      // users: %156, %155, %154, %151
  %145 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %152, %151, %149
  %146 = metatype $@thick τ_1_0.IntegerLiteralType.Type // user: %149
  %147 = integer_literal $Builtin.IntLiteral, 0   // user: %149
  %148 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // user: %149
  %149 = apply %148<τ_1_0.IntegerLiteralType>(%145, %147, %146) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %150 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // user: %151
  %151 = apply %150<τ_1_0>(%144, %145, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %145 : $*τ_1_0.IntegerLiteralType // id: %152
  %153 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %154
  %154 = apply %153<τ_1_0>(%1, %144, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %157
  destroy_addr %144 : $*τ_1_0                    // id: %155
  dealloc_stack %144 : $*τ_1_0                   // id: %156
  br bb28(%154 : $Bool)                           // id: %157

// %158                                           // users: %223, %159
bb28(%158 : $Bool):                               // Preds: bb27 bb26
  %159 = struct_extract %158 : $Bool, #Bool._value // user: %160
  cond_br %159, bb37, bb29                        // id: %160

bb29:                                             // Preds: bb28
  %161 = alloc_stack $τ_1_0                      // users: %173, %172, %171, %168
  %162 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %169, %168, %166
  %163 = metatype $@thick τ_1_0.IntegerLiteralType.Type // users: %184, %166
  %164 = integer_literal $Builtin.IntLiteral, 0   // users: %184, %166
  %165 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // users: %184, %166
  %166 = apply %165<τ_1_0.IntegerLiteralType>(%162, %164, %163) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %167 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // users: %185, %168
  %168 = apply %167<τ_1_0>(%161, %162, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %162 : $*τ_1_0.IntegerLiteralType // id: %169
  %170 = witness_method $τ_1_0, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %171
  %171 = apply %170<τ_1_0>(%1, %161, %15) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %174
  destroy_addr %161 : $*τ_1_0                    // id: %172
  dealloc_stack %161 : $*τ_1_0                   // id: %173
  %174 = struct_extract %171 : $Bool, #Bool._value // user: %175
  cond_br %174, bb36, bb30                        // id: %175

bb30:                                             // Preds: bb29
  %176 = alloc_stack $τ_1_0                      // users: %218, %208, %206, %205, %204, %200, %192, %188, %180
  %177 = alloc_stack $Int                         // users: %181, %180, %178
  store %14 to %177 : $*Int                       // id: %178
  %179 = witness_method $τ_1_0, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %180
  %180 = apply %179<τ_1_0, Int>(%176, %177, %15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %177 : $*Int                      // id: %181
  %182 = alloc_stack $τ_1_0                      // users: %190, %189, %188, %185
  %183 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %186, %185, %184
  %184 = apply %165<τ_1_0.IntegerLiteralType>(%183, %164, %163) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %185 = apply %167<τ_1_0>(%182, %183, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %183 : $*τ_1_0.IntegerLiteralType // id: %186
  %187 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // users: %204, %188
  %188 = apply %187<τ_1_0>(%176, %182, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %202
  destroy_addr %182 : $*τ_1_0                    // id: %189
  dealloc_stack %182 : $*τ_1_0                   // id: %190
  %191 = alloc_stack $τ_1_0                      // users: %197, %196, %194, %192
  copy_addr %176 to [initialization] %191 : $*τ_1_0 // id: %192
  %193 = witness_method $τ_1_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // users: %212, %194
  %194 = apply %193<τ_1_0>(%191) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %195
  %195 = struct_extract %194 : $UInt, #UInt._value // user: %198
  destroy_addr %191 : $*τ_1_0                    // id: %196
  dealloc_stack %191 : $*τ_1_0                   // id: %197
  %198 = builtin "cmp_eq_Int64"(%195 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %199
  cond_br %198, bb32, bb31                        // id: %199

bb31:                                             // Preds: bb30
  destroy_addr %176 : $*τ_1_0                    // id: %200
  br bb35                                         // id: %201

bb32:                                             // Preds: bb30
  %202 = struct_extract %188 : $Bool, #Bool._value // user: %203
  cond_br %202, bb34, bb33                        // id: %203

bb33:                                             // Preds: bb32
  %204 = apply %187<τ_1_0>(%1, %176, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %207
  destroy_addr %176 : $*τ_1_0                    // id: %205
  dealloc_stack %176 : $*τ_1_0                   // id: %206
  br bb38(%204 : $Bool)                           // id: %207

bb34:                                             // Preds: bb32
  destroy_addr %176 : $*τ_1_0                    // id: %208
  br bb35                                         // id: %209

bb35:                                             // Preds: bb34 bb31
  %210 = alloc_stack $τ_1_0                      // users: %215, %214, %212, %211
  copy_addr %1 to [initialization] %210 : $*τ_1_0 // id: %211
  %212 = apply %193<τ_1_0>(%210) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %213
  %213 = struct_extract %212 : $UInt, #UInt._value // user: %216
  destroy_addr %210 : $*τ_1_0                    // id: %214
  dealloc_stack %210 : $*τ_1_0                   // id: %215
  %216 = builtin "cmp_slt_Int64"(%213 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %217
  %217 = struct $Bool (%216 : $Builtin.Int1)      // user: %219
  dealloc_stack %176 : $*τ_1_0                   // id: %218
  br bb38(%217 : $Bool)                           // id: %219

bb36:                                             // Preds: bb29
  %220 = integer_literal $Builtin.Int1, 0         // user: %221
  %221 = struct $Bool (%220 : $Builtin.Int1)      // user: %222
  br bb38(%221 : $Bool)                           // id: %222

bb37:                                             // Preds: bb28
  br bb38(%158 : $Bool)                           // id: %223

// %224                                           // user: %225
bb38(%224 : $Bool):                               // Preds: bb37 bb36 bb35 bb33 bb24
  %225 = struct_extract %224 : $Bool, #Bool._value // user: %226
  cond_br %225, bb40, bb39                        // id: %226

bb39:                                             // Preds: bb38
  %227 = integer_literal $Builtin.Int32, 2139095040 // user: %228
  %228 = builtin "bitcast_Int32_FPIEEE32"(%227 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %229
  %229 = struct $Float (%228 : $Builtin.FPIEEE32) // user: %230
  store %229 to %0 : $*Float                      // id: %230
  br bb41                                         // id: %231

bb40:                                             // Preds: bb38
  %232 = integer_literal $Builtin.Int32, 2139095040 // user: %233
  %233 = builtin "bitcast_Int32_FPIEEE32"(%232 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %234
  %234 = builtin "fneg_FPIEEE32"(%233 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %235
  %235 = struct $Float (%234 : $Builtin.FPIEEE32) // user: %236
  store %235 to %0 : $*Float                      // id: %236
  br bb41                                         // id: %237

bb41:                                             // Preds: bb40 bb39
  %238 = integer_literal $Builtin.Int1, 0         // user: %239
  %239 = struct $Bool (%238 : $Builtin.Int1)      // user: %241
  dealloc_stack %103 : $*τ_1_0.Magnitude         // id: %240
  br bb163(%239 : $Bool)                          // id: %241

bb42:                                             // Preds: bb22 bb19
  %242 = integer_literal $Builtin.Int64, 23       // users: %528, %246, %243
  %243 = builtin "cmp_slt_Int64"(%242 : $Builtin.Int64, %108 : $Builtin.Int64) : $Builtin.Int1 // user: %244
  cond_br %243, bb85, bb43                        // id: %244

bb43:                                             // Preds: bb42
  %245 = integer_literal $Builtin.Int1, 0         // users: %503, %480, %402, %397, %372, %314, %246
  %246 = builtin "ssub_with_overflow_Int64"(%242 : $Builtin.Int64, %108 : $Builtin.Int64, %245 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %247
  %247 = tuple_extract %246 : $(Builtin.Int64, Builtin.Int1), 0 // user: %390
  %248 = alloc_stack $τ_1_0.Magnitude            // users: %389, %388, %385, %364, %352, %337, %329, %295, %278, %249
  copy_addr [take] %103 to [initialization] %248 : $*τ_1_0.Magnitude // id: %249
  %250 = metatype $@thick τ_1_0.Magnitude.Type   // users: %364, %361, %352, %349, %329, %326, %315, %278, %275, %252
  %251 = witness_method $τ_1_0.Magnitude, #BinaryInteger.isSigned!getter.1 : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // users: %315, %252
  %252 = apply %251<τ_1_0.Magnitude>(%250) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %253
  %253 = struct_extract %252 : $Bool, #Bool._value // user: %254
  cond_br %253, bb45, bb44                        // id: %254

bb44:                                             // Preds: bb43
  br bb49                                         // id: %255

bb45:                                             // Preds: bb43
  %256 = string_literal utf8 "Negative value is not representable" // user: %258
  %257 = integer_literal $Builtin.Word, 35        // user: %260
  %258 = builtin "ptrtoint_Word"(%256 : $Builtin.RawPointer) : $Builtin.Word // user: %260
  %259 = integer_literal $Builtin.Int8, 2         // users: %288, %264, %260
  %260 = struct $StaticString (%258 : $Builtin.Word, %257 : $Builtin.Word, %259 : $Builtin.Int8) // user: %292
  %261 = string_literal utf8 "/swift-base/swift/stdlib/public/core/Integers.swift" // user: %263
  %262 = integer_literal $Builtin.Word, 51        // user: %264
  %263 = builtin "ptrtoint_Word"(%261 : $Builtin.RawPointer) : $Builtin.Word // user: %264
  %264 = struct $StaticString (%263 : $Builtin.Word, %262 : $Builtin.Word, %259 : $Builtin.Int8) // user: %292
  %265 = integer_literal $Builtin.Int64, 3346     // user: %266
  %266 = struct $UInt (%265 : $Builtin.Int64)     // user: %292
  br bb46                                         // id: %267

bb46:                                             // Preds: bb45
  %268 = alloc_stack $τ_1_0.Magnitude            // users: %280, %279, %278, %275
  %269 = alloc_stack $τ_1_0.Magnitude.IntegerLiteralType // users: %276, %275, %273
  %270 = metatype $@thick τ_1_0.Magnitude.IntegerLiteralType.Type // user: %273
  %271 = integer_literal $Builtin.IntLiteral, 0   // user: %273
  %272 = witness_method $τ_1_0.Magnitude.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // user: %273
  %273 = apply %272<τ_1_0.Magnitude.IntegerLiteralType>(%269, %271, %270) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %274 = witness_method $τ_1_0.Magnitude, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // user: %275
  %275 = apply %274<τ_1_0.Magnitude>(%268, %269, %250) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %269 : $*τ_1_0.Magnitude.IntegerLiteralType // id: %276
  %277 = witness_method $τ_1_0.Magnitude, #Comparable.">="!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %278
  %278 = apply %277<τ_1_0.Magnitude>(%248, %268, %250) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %281
  destroy_addr %268 : $*τ_1_0.Magnitude          // id: %279
  dealloc_stack %268 : $*τ_1_0.Magnitude         // id: %280
  %281 = struct_extract %278 : $Bool, #Bool._value // user: %282
  %282 = builtin "int_expect_Int1"(%281 : $Builtin.Int1, %99 : $Builtin.Int1) : $Builtin.Int1 // user: %283
  cond_br %282, bb47, bb48                        // id: %283

bb47:                                             // Preds: bb46
  br bb49                                         // id: %284

bb48:                                             // Preds: bb46
  %285 = string_literal utf8 "Fatal error"        // user: %287
  %286 = integer_literal $Builtin.Word, 11        // user: %288
  %287 = builtin "ptrtoint_Word"(%285 : $Builtin.RawPointer) : $Builtin.Word // user: %288
  %288 = struct $StaticString (%287 : $Builtin.Word, %286 : $Builtin.Word, %259 : $Builtin.Int8) // user: %292
  %289 = integer_literal $Builtin.Int32, 1        // user: %290
  %290 = struct $UInt32 (%289 : $Builtin.Int32)   // user: %292
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %291 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %292
  %292 = apply %291(%288, %260, %264, %266, %290) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %293

bb49:                                             // Preds: bb47 bb44
  %294 = witness_method $τ_1_0.Magnitude, #BinaryInteger.bitWidth!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %295
  %295 = apply %294<τ_1_0.Magnitude>(%248) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %297
  %296 = integer_literal $Builtin.Int64, 32       // user: %298
  %297 = struct_extract %295 : $Int, #Int._value  // user: %298
  %298 = builtin "cmp_slt_Int64"(%297 : $Builtin.Int64, %296 : $Builtin.Int64) : $Builtin.Int1 // user: %299
  cond_br %298, bb50, bb51                        // id: %299

bb50:                                             // Preds: bb49
  br bb63                                         // id: %300

bb51:                                             // Preds: bb49
  %301 = string_literal utf8 "Not enough bits to represent the passed value" // user: %303
  %302 = integer_literal $Builtin.Word, 45        // user: %305
  %303 = builtin "ptrtoint_Word"(%301 : $Builtin.RawPointer) : $Builtin.Word // user: %305
  %304 = integer_literal $Builtin.Int8, 2         // users: %378, %309, %305
  %305 = struct $StaticString (%303 : $Builtin.Word, %302 : $Builtin.Word, %304 : $Builtin.Int8) // user: %382
  %306 = string_literal utf8 "/swift-base/swift/stdlib/public/core/Integers.swift" // user: %308
  %307 = integer_literal $Builtin.Word, 51        // user: %309
  %308 = builtin "ptrtoint_Word"(%306 : $Builtin.RawPointer) : $Builtin.Word // user: %309
  %309 = struct $StaticString (%308 : $Builtin.Word, %307 : $Builtin.Word, %304 : $Builtin.Int8) // user: %382
  %310 = integer_literal $Builtin.Int64, 3350     // user: %311
  %311 = struct $UInt (%310 : $Builtin.Int64)     // user: %382
  br bb52                                         // id: %312

bb52:                                             // Preds: bb51
  %313 = integer_literal $Builtin.Int32, -1       // user: %359
  %314 = struct $Bool (%245 : $Builtin.Int1)      // users: %369, %368, %318
  %315 = apply %251<τ_1_0.Magnitude>(%250) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %316
  %316 = struct_extract %315 : $Bool, #Bool._value // user: %317
  cond_br %316, bb54, bb53                        // id: %317

bb53:                                             // Preds: bb52
  br bb55(%314 : $Bool)                           // id: %318

bb54:                                             // Preds: bb52
  %319 = alloc_stack $τ_1_0.Magnitude            // users: %331, %330, %329, %326
  %320 = alloc_stack $τ_1_0.Magnitude.IntegerLiteralType // users: %327, %326, %324
  %321 = metatype $@thick τ_1_0.Magnitude.IntegerLiteralType.Type // user: %324
  %322 = integer_literal $Builtin.IntLiteral, 0   // user: %324
  %323 = witness_method $τ_1_0.Magnitude.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // user: %324
  %324 = apply %323<τ_1_0.Magnitude.IntegerLiteralType>(%320, %322, %321) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %325 = witness_method $τ_1_0.Magnitude, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // user: %326
  %326 = apply %325<τ_1_0.Magnitude>(%319, %320, %250) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %320 : $*τ_1_0.Magnitude.IntegerLiteralType // id: %327
  %328 = witness_method $τ_1_0.Magnitude, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %329
  %329 = apply %328<τ_1_0.Magnitude>(%248, %319, %250) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %332
  destroy_addr %319 : $*τ_1_0.Magnitude          // id: %330
  dealloc_stack %319 : $*τ_1_0.Magnitude         // id: %331
  br bb55(%329 : $Bool)                           // id: %332

// %333                                           // user: %334
bb55(%333 : $Bool):                               // Preds: bb54 bb53
  %334 = struct_extract %333 : $Bool, #Bool._value // user: %335
  cond_br %334, bb59, bb56                        // id: %335

bb56:                                             // Preds: bb55
  %336 = alloc_stack $τ_1_0.Magnitude            // users: %343, %342, %339, %337
  copy_addr %248 to [initialization] %336 : $*τ_1_0.Magnitude // id: %337
  %338 = witness_method $τ_1_0.Magnitude, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %339
  %339 = apply %338<τ_1_0.Magnitude>(%336) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %340
  %340 = struct_extract %339 : $UInt, #UInt._value // user: %341
  %341 = builtin "truncOrBitCast_Int64_Int32"(%340 : $Builtin.Int64) : $Builtin.Int32 // user: %346
  destroy_addr %336 : $*τ_1_0.Magnitude          // id: %342
  dealloc_stack %336 : $*τ_1_0.Magnitude         // id: %343
  %344 = alloc_stack $τ_1_0.Magnitude            // users: %354, %353, %352, %349
  %345 = alloc_stack $UInt32                      // users: %350, %349, %347
  %346 = struct $UInt32 (%341 : $Builtin.Int32)   // user: %347
  store %346 to %345 : $*UInt32                   // id: %347
  %348 = witness_method $τ_1_0.Magnitude, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // users: %361, %349
  %349 = apply %348<τ_1_0.Magnitude, UInt32>(%344, %345, %250) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %345 : $*UInt32                   // id: %350
  %351 = witness_method $τ_1_0.Magnitude, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %352
  %352 = apply %351<τ_1_0.Magnitude>(%344, %248, %250) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %355
  destroy_addr %344 : $*τ_1_0.Magnitude          // id: %353
  dealloc_stack %344 : $*τ_1_0.Magnitude         // id: %354
  %355 = struct_extract %352 : $Bool, #Bool._value // user: %356
  cond_br %355, bb58, bb57                        // id: %356

bb57:                                             // Preds: bb56
  %357 = alloc_stack $τ_1_0.Magnitude            // users: %366, %365, %364, %361
  %358 = alloc_stack $UInt32                      // users: %362, %361, %360
  %359 = struct $UInt32 (%313 : $Builtin.Int32)   // user: %360
  store %359 to %358 : $*UInt32                   // id: %360
  %361 = apply %348<τ_1_0.Magnitude, UInt32>(%357, %358, %250) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %358 : $*UInt32                   // id: %362
  %363 = witness_method $τ_1_0.Magnitude, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %364
  %364 = apply %363<τ_1_0.Magnitude>(%357, %248, %250) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %367
  destroy_addr %357 : $*τ_1_0.Magnitude          // id: %365
  dealloc_stack %357 : $*τ_1_0.Magnitude         // id: %366
  br bb60(%364 : $Bool)                           // id: %367

bb58:                                             // Preds: bb56
  br bb60(%314 : $Bool)                           // id: %368

bb59:                                             // Preds: bb55
  br bb60(%314 : $Bool)                           // id: %369

// %370                                           // user: %371
bb60(%370 : $Bool):                               // Preds: bb59 bb58 bb57
  %371 = struct_extract %370 : $Bool, #Bool._value // user: %372
  %372 = builtin "int_expect_Int1"(%371 : $Builtin.Int1, %245 : $Builtin.Int1) : $Builtin.Int1 // user: %373
  cond_br %372, bb62, bb61                        // id: %373

bb61:                                             // Preds: bb60
  br bb63                                         // id: %374

bb62:                                             // Preds: bb60
  %375 = string_literal utf8 "Fatal error"        // user: %377
  %376 = integer_literal $Builtin.Word, 11        // user: %378
  %377 = builtin "ptrtoint_Word"(%375 : $Builtin.RawPointer) : $Builtin.Word // user: %378
  %378 = struct $StaticString (%377 : $Builtin.Word, %376 : $Builtin.Word, %304 : $Builtin.Int8) // user: %382
  %379 = integer_literal $Builtin.Int32, 1        // user: %380
  %380 = struct $UInt32 (%379 : $Builtin.Int32)   // user: %382
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %381 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %382
  %382 = apply %381(%378, %305, %309, %311, %380) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %383

bb63:                                             // Preds: bb61 bb50
  %384 = witness_method $τ_1_0.Magnitude, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %385
  %385 = apply %384<τ_1_0.Magnitude>(%248) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %386
  %386 = struct_extract %385 : $UInt, #UInt._value // user: %387
  %387 = builtin "truncOrBitCast_Int64_Int32"(%386 : $Builtin.Int64) : $Builtin.Int32 // user: %393
  destroy_addr %248 : $*τ_1_0.Magnitude          // id: %388
  dealloc_stack %248 : $*τ_1_0.Magnitude         // id: %389
  %390 = builtin "truncOrBitCast_Int64_Int32"(%247 : $Builtin.Int64) : $Builtin.Int32 // user: %392
  %391 = integer_literal $Builtin.Int32, 31       // user: %392
  %392 = builtin "and_Int32"(%390 : $Builtin.Int32, %391 : $Builtin.Int32) : $Builtin.Int32 // user: %393
  %393 = builtin "shl_Int32"(%387 : $Builtin.Int32, %392 : $Builtin.Int32) : $Builtin.Int32 // user: %510
  %394 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %395
  %395 = struct_extract %394 : $Bool, #Bool._value // user: %396
  cond_br %395, bb65, bb64                        // id: %396

bb64:                                             // Preds: bb63
  %397 = struct $Bool (%245 : $Builtin.Int1)      // user: %398
  br bb78(%397 : $Bool)                           // id: %398

bb65:                                             // Preds: bb63
  %399 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %400
  %400 = struct_extract %399 : $Bool, #Bool._value // user: %401
  cond_br %400, bb67, bb66                        // id: %401

bb66:                                             // Preds: bb65
  %402 = struct $Bool (%245 : $Builtin.Int1)      // user: %403
  br bb68(%402 : $Bool)                           // id: %403

bb67:                                             // Preds: bb65
  %404 = alloc_stack $τ_1_0                      // users: %416, %415, %414, %411
  %405 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %412, %411, %409
  %406 = metatype $@thick τ_1_0.IntegerLiteralType.Type // user: %409
  %407 = integer_literal $Builtin.IntLiteral, 0   // user: %409
  %408 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // user: %409
  %409 = apply %408<τ_1_0.IntegerLiteralType>(%405, %407, %406) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %410 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // user: %411
  %411 = apply %410<τ_1_0>(%404, %405, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %405 : $*τ_1_0.IntegerLiteralType // id: %412
  %413 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %414
  %414 = apply %413<τ_1_0>(%1, %404, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %417
  destroy_addr %404 : $*τ_1_0                    // id: %415
  dealloc_stack %404 : $*τ_1_0                   // id: %416
  br bb68(%414 : $Bool)                           // id: %417

// %418                                           // users: %482, %419
bb68(%418 : $Bool):                               // Preds: bb67 bb66
  %419 = struct_extract %418 : $Bool, #Bool._value // user: %420
  cond_br %419, bb77, bb69                        // id: %420

bb69:                                             // Preds: bb68
  %421 = alloc_stack $τ_1_0                      // users: %433, %432, %431, %428
  %422 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %429, %428, %426
  %423 = metatype $@thick τ_1_0.IntegerLiteralType.Type // users: %444, %426
  %424 = integer_literal $Builtin.IntLiteral, 0   // users: %444, %426
  %425 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // users: %444, %426
  %426 = apply %425<τ_1_0.IntegerLiteralType>(%422, %424, %423) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %427 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // users: %445, %428
  %428 = apply %427<τ_1_0>(%421, %422, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %422 : $*τ_1_0.IntegerLiteralType // id: %429
  %430 = witness_method $τ_1_0, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %431
  %431 = apply %430<τ_1_0>(%1, %421, %15) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %434
  destroy_addr %421 : $*τ_1_0                    // id: %432
  dealloc_stack %421 : $*τ_1_0                   // id: %433
  %434 = struct_extract %431 : $Bool, #Bool._value // user: %435
  cond_br %434, bb76, bb70                        // id: %435

bb70:                                             // Preds: bb69
  %436 = alloc_stack $τ_1_0                      // users: %478, %468, %466, %465, %464, %460, %452, %448, %440
  %437 = alloc_stack $Int                         // users: %441, %440, %438
  store %14 to %437 : $*Int                       // id: %438
  %439 = witness_method $τ_1_0, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %440
  %440 = apply %439<τ_1_0, Int>(%436, %437, %15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %437 : $*Int                      // id: %441
  %442 = alloc_stack $τ_1_0                      // users: %450, %449, %448, %445
  %443 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %446, %445, %444
  %444 = apply %425<τ_1_0.IntegerLiteralType>(%443, %424, %423) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %445 = apply %427<τ_1_0>(%442, %443, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %443 : $*τ_1_0.IntegerLiteralType // id: %446
  %447 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // users: %464, %448
  %448 = apply %447<τ_1_0>(%436, %442, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %462
  destroy_addr %442 : $*τ_1_0                    // id: %449
  dealloc_stack %442 : $*τ_1_0                   // id: %450
  %451 = alloc_stack $τ_1_0                      // users: %457, %456, %454, %452
  copy_addr %436 to [initialization] %451 : $*τ_1_0 // id: %452
  %453 = witness_method $τ_1_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // users: %472, %454
  %454 = apply %453<τ_1_0>(%451) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %455
  %455 = struct_extract %454 : $UInt, #UInt._value // user: %458
  destroy_addr %451 : $*τ_1_0                    // id: %456
  dealloc_stack %451 : $*τ_1_0                   // id: %457
  %458 = builtin "cmp_eq_Int64"(%455 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %459
  cond_br %458, bb72, bb71                        // id: %459

bb71:                                             // Preds: bb70
  destroy_addr %436 : $*τ_1_0                    // id: %460
  br bb75                                         // id: %461

bb72:                                             // Preds: bb70
  %462 = struct_extract %448 : $Bool, #Bool._value // user: %463
  cond_br %462, bb74, bb73                        // id: %463

bb73:                                             // Preds: bb72
  %464 = apply %447<τ_1_0>(%1, %436, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %467
  destroy_addr %436 : $*τ_1_0                    // id: %465
  dealloc_stack %436 : $*τ_1_0                   // id: %466
  br bb78(%464 : $Bool)                           // id: %467

bb74:                                             // Preds: bb72
  destroy_addr %436 : $*τ_1_0                    // id: %468
  br bb75                                         // id: %469

bb75:                                             // Preds: bb74 bb71
  %470 = alloc_stack $τ_1_0                      // users: %475, %474, %472, %471
  copy_addr %1 to [initialization] %470 : $*τ_1_0 // id: %471
  %472 = apply %453<τ_1_0>(%470) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %473
  %473 = struct_extract %472 : $UInt, #UInt._value // user: %476
  destroy_addr %470 : $*τ_1_0                    // id: %474
  dealloc_stack %470 : $*τ_1_0                   // id: %475
  %476 = builtin "cmp_slt_Int64"(%473 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %477
  %477 = struct $Bool (%476 : $Builtin.Int1)      // user: %479
  dealloc_stack %436 : $*τ_1_0                   // id: %478
  br bb78(%477 : $Bool)                           // id: %479

bb76:                                             // Preds: bb69
  %480 = struct $Bool (%245 : $Builtin.Int1)      // user: %481
  br bb78(%480 : $Bool)                           // id: %481

bb77:                                             // Preds: bb68
  br bb78(%418 : $Bool)                           // id: %482

// %483                                           // user: %484
bb78(%483 : $Bool):                               // Preds: bb77 bb76 bb75 bb73 bb64
  %484 = struct_extract %483 : $Bool, #Bool._value // user: %485
  cond_br %484, bb80, bb79                        // id: %485

bb79:                                             // Preds: bb78
  %486 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %487
  br bb81(%486 : $FloatingPointSign)              // id: %487

bb80:                                             // Preds: bb78
  %488 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %489
  br bb81(%488 : $FloatingPointSign)              // id: %489

// %490                                           // user: %513
bb81(%490 : $FloatingPointSign):                  // Preds: bb80 bb79
  %491 = string_literal utf8 "Negative value is not representable" // user: %493
  %492 = integer_literal $Builtin.Word, 35        // user: %495
  %493 = builtin "ptrtoint_Word"(%491 : $Builtin.RawPointer) : $Builtin.Word // user: %495
  %494 = integer_literal $Builtin.Int8, 2         // users: %521, %499, %495
  %495 = struct $StaticString (%493 : $Builtin.Word, %492 : $Builtin.Word, %494 : $Builtin.Int8) // user: %525
  %496 = string_literal utf8 "/swift-base/swift/stdlib/public/core/Integers.swift" // user: %498
  %497 = integer_literal $Builtin.Word, 51        // user: %499
  %498 = builtin "ptrtoint_Word"(%496 : $Builtin.RawPointer) : $Builtin.Word // user: %499
  %499 = struct $StaticString (%498 : $Builtin.Word, %497 : $Builtin.Word, %494 : $Builtin.Int8) // user: %525
  %500 = integer_literal $Builtin.Int64, 3346     // user: %501
  %501 = struct $UInt (%500 : $Builtin.Int64)     // user: %525
  br bb82                                         // id: %502

bb82:                                             // Preds: bb81
  %503 = builtin "int_expect_Int1"(%115 : $Builtin.Int1, %245 : $Builtin.Int1) : $Builtin.Int1 // user: %504
  cond_br %503, bb84, bb83                        // id: %504

bb83:                                             // Preds: bb82
  %505 = builtin "uadd_with_overflow_Int64"(%11 : $Builtin.Int64, %108 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %507, %506
  %506 = tuple_extract %505 : $(Builtin.Int64, Builtin.Int1), 0 // user: %509
  %507 = tuple_extract %505 : $(Builtin.Int64, Builtin.Int1), 1 // user: %508
  cond_fail %507 : $Builtin.Int1                  // id: %508
  %509 = struct $UInt (%506 : $Builtin.Int64)     // user: %513
  %510 = struct $UInt32 (%393 : $Builtin.Int32)   // user: %513
  %511 = metatype $@thin Float.Type               // user: %513
  // function_ref Float.init(sign:exponentBitPattern:significandBitPattern:)
  %512 = function_ref @$sSf4sign18exponentBitPattern011significandcD0Sfs17FloatingPointSignO_Sus6UInt32VtcfC : $@convention(method) (FloatingPointSign, UInt, UInt32, @thin Float.Type) -> Float // user: %513
  %513 = apply %512(%490, %509, %510, %511) : $@convention(method) (FloatingPointSign, UInt, UInt32, @thin Float.Type) -> Float // user: %514
  store %513 to %0 : $*Float                      // id: %514
  %515 = struct $Bool (%99 : $Builtin.Int1)       // user: %517
  dealloc_stack %103 : $*τ_1_0.Magnitude         // id: %516
  br bb163(%515 : $Bool)                          // id: %517

bb84:                                             // Preds: bb82
  %518 = string_literal utf8 "Fatal error"        // user: %520
  %519 = integer_literal $Builtin.Word, 11        // user: %521
  %520 = builtin "ptrtoint_Word"(%518 : $Builtin.RawPointer) : $Builtin.Word // user: %521
  %521 = struct $StaticString (%520 : $Builtin.Word, %519 : $Builtin.Word, %494 : $Builtin.Int8) // user: %525
  %522 = integer_literal $Builtin.Int32, 1        // user: %523
  %523 = struct $UInt32 (%522 : $Builtin.Int32)   // user: %525
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %524 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %525
  %525 = apply %524(%521, %495, %499, %501, %523) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %526

bb85:                                             // Preds: bb42
  %527 = integer_literal $Builtin.Int1, 0         // users: %954, %882, %866, %842, %764, %759, %745, %728, %650, %645, %612, %528
  %528 = builtin "ssub_with_overflow_Int64"(%108 : $Builtin.Int64, %242 : $Builtin.Int64, %527 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %529
  %529 = tuple_extract %528 : $(Builtin.Int64, Builtin.Int1), 0 // users: %541, %530
  %530 = struct $Int (%529 : $Builtin.Int64)      // user: %581
  %531 = alloc_stack $τ_1_0.Magnitude            // users: %961, %960, %750, %749, %599, %594, %562, %549
  %532 = metatype $@thick τ_1_0.Magnitude.Type   // users: %939, %936, %918, %915, %908, %891, %888, %879, %599, %594, %583, %578, %571, %568, %562, %559, %549, %539
  %533 = alloc_stack $τ_1_0.Magnitude            // users: %552, %551, %549, %539
  %534 = alloc_stack $τ_1_0.Magnitude.IntegerLiteralType // users: %540, %539, %537
  %535 = metatype $@thick τ_1_0.Magnitude.IntegerLiteralType.Type // users: %887, %567, %558, %537
  %536 = witness_method $τ_1_0.Magnitude.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // users: %887, %567, %558, %537
  %537 = apply %536<τ_1_0.Magnitude.IntegerLiteralType>(%534, %3, %535) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %538 = witness_method $τ_1_0.Magnitude, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // users: %888, %568, %559, %539
  %539 = apply %538<τ_1_0.Magnitude>(%533, %534, %532) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %534 : $*τ_1_0.Magnitude.IntegerLiteralType // id: %540
  %541 = builtin "ssub_with_overflow_Int64"(%529 : $Builtin.Int64, %4 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %543, %542
  %542 = tuple_extract %541 : $(Builtin.Int64, Builtin.Int1), 0 // user: %545
  %543 = tuple_extract %541 : $(Builtin.Int64, Builtin.Int1), 1 // user: %544
  cond_fail %543 : $Builtin.Int1                  // id: %544
  %545 = struct $Int (%542 : $Builtin.Int64)      // user: %547
  %546 = alloc_stack $Int                         // users: %550, %549, %547
  store %545 to %546 : $*Int                      // id: %547
  %548 = witness_method $τ_1_0.Magnitude, #BinaryInteger."<<"!1 : <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (Self, RHS) -> @dynamic_self Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %549
  %549 = apply %548<τ_1_0.Magnitude, Int>(%531, %533, %546, %532) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %546 : $*Int                      // id: %550
  destroy_addr %533 : $*τ_1_0.Magnitude          // id: %551
  dealloc_stack %533 : $*τ_1_0.Magnitude         // id: %552
  %553 = alloc_stack $τ_1_0.Magnitude            // users: %959, %958, %748, %747, %578, %571
  %554 = alloc_stack $τ_1_0.Magnitude            // users: %575, %574, %571, %562
  %555 = alloc_stack $τ_1_0.Magnitude            // users: %564, %563, %562, %559
  %556 = alloc_stack $τ_1_0.Magnitude.IntegerLiteralType // users: %560, %559, %558
  %557 = integer_literal $Builtin.IntLiteral, 2   // user: %558
  %558 = apply %536<τ_1_0.Magnitude.IntegerLiteralType>(%556, %557, %535) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %559 = apply %538<τ_1_0.Magnitude>(%555, %556, %532) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %556 : $*τ_1_0.Magnitude.IntegerLiteralType // id: %560
  %561 = witness_method $τ_1_0.Magnitude, #Numeric."*"!1 : <Self where Self : Numeric> (Self.Type) -> (Self, Self) -> @dynamic_self Self : $@convention(witness_method: Numeric) <τ_0_0 where τ_0_0 : Numeric> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %562
  %562 = apply %561<τ_1_0.Magnitude>(%554, %555, %531, %532) : $@convention(witness_method: Numeric) <τ_0_0 where τ_0_0 : Numeric> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  destroy_addr %555 : $*τ_1_0.Magnitude          // id: %563
  dealloc_stack %555 : $*τ_1_0.Magnitude         // id: %564
  %565 = alloc_stack $τ_1_0.Magnitude            // users: %573, %572, %571, %568
  %566 = alloc_stack $τ_1_0.Magnitude.IntegerLiteralType // users: %569, %568, %567
  %567 = apply %536<τ_1_0.Magnitude.IntegerLiteralType>(%566, %3, %535) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %568 = apply %538<τ_1_0.Magnitude>(%565, %566, %532) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %566 : $*τ_1_0.Magnitude.IntegerLiteralType // id: %569
  %570 = witness_method $τ_1_0.Magnitude, #AdditiveArithmetic."-"!1 : <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> @dynamic_self Self : $@convention(witness_method: AdditiveArithmetic) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %571
  %571 = apply %570<τ_1_0.Magnitude>(%553, %554, %565, %532) : $@convention(witness_method: AdditiveArithmetic) <τ_0_0 where τ_0_0 : AdditiveArithmetic> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  destroy_addr %565 : $*τ_1_0.Magnitude          // id: %572
  dealloc_stack %565 : $*τ_1_0.Magnitude         // id: %573
  destroy_addr %554 : $*τ_1_0.Magnitude          // id: %574
  dealloc_stack %554 : $*τ_1_0.Magnitude         // id: %575
  %576 = alloc_stack $τ_1_0.Magnitude            // users: %957, %953, %945, %940, %939, %924, %919, %918, %904, %899, %891, %746, %641, %599, %594, %578
  %577 = witness_method $τ_1_0.Magnitude, #BinaryInteger."&"!1 : <Self where Self : BinaryInteger> (Self.Type) -> (Self, Self) -> @dynamic_self Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %578
  %578 = apply %577<τ_1_0.Magnitude>(%576, %103, %553, %532) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  %579 = alloc_stack $τ_1_0.Magnitude            // users: %591, %590, %587, %583
  %580 = alloc_stack $Int                         // users: %585, %583, %581
  store %530 to %580 : $*Int                      // id: %581
  %582 = witness_method $τ_1_0.Magnitude, #BinaryInteger.">>"!1 : <Self where Self : BinaryInteger><RHS where RHS : BinaryInteger> (Self.Type) -> (Self, RHS) -> @dynamic_self Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %583
  %583 = apply %582<τ_1_0.Magnitude, Int>(%579, %103, %580, %532) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_0_0, @in_guaranteed τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  destroy_addr %103 : $*τ_1_0.Magnitude          // id: %584
  dealloc_stack %580 : $*Int                      // id: %585
  %586 = witness_method $τ_1_0.Magnitude, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // users: %946, %925, %587
  %587 = apply %586<τ_1_0.Magnitude>(%579) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %588
  %588 = struct_extract %587 : $UInt, #UInt._value // user: %589
  %589 = builtin "truncOrBitCast_Int64_Int32"(%588 : $Builtin.Int64) : $Builtin.Int32 // users: %604, %592
  destroy_addr %579 : $*τ_1_0.Magnitude          // id: %590
  dealloc_stack %579 : $*τ_1_0.Magnitude         // id: %591
  %592 = builtin "and_Int32"(%589 : $Builtin.Int32, %12 : $Builtin.Int32) : $Builtin.Int32 // users: %612, %610
  %593 = witness_method $τ_1_0.Magnitude, #Comparable.">"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %594
  %594 = apply %593<τ_1_0.Magnitude>(%576, %531, %532) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %595
  %595 = struct_extract %594 : $Bool, #Bool._value // user: %596
  cond_br %595, bb86, bb87                        // id: %596

bb86:                                             // Preds: bb85
  br bb93                                         // id: %597

bb87:                                             // Preds: bb85
  %598 = witness_method $τ_1_0.Magnitude, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %599
  %599 = apply %598<τ_1_0.Magnitude>(%576, %531, %532) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %600
  %600 = struct_extract %599 : $Bool, #Bool._value // user: %601
  cond_br %600, bb89, bb88                        // id: %601

bb88:                                             // Preds: bb87
  br bb92                                         // id: %602

bb89:                                             // Preds: bb87
  %603 = integer_literal $Builtin.Int32, 1        // user: %604
  %604 = builtin "and_Int32"(%589 : $Builtin.Int32, %603 : $Builtin.Int32) : $Builtin.Int32 // user: %605
  %605 = builtin "zextOrBitCast_Int32_Int64"(%604 : $Builtin.Int32) : $Builtin.Int64 // user: %606
  %606 = builtin "cmp_eq_Int64"(%605 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %607
  cond_br %606, bb91, bb90                        // id: %607

bb90:                                             // Preds: bb89
  br bb92                                         // id: %608

bb91:                                             // Preds: bb89
  br bb93                                         // id: %609

bb92:                                             // Preds: bb90 bb88
  br bb128(%108 : $Builtin.Int64, %592 : $Builtin.Int32) // id: %610

bb93:                                             // Preds: bb91 bb86
  %611 = integer_literal $Builtin.Int32, 1        // user: %612
  %612 = builtin "uadd_with_overflow_Int32"(%592 : $Builtin.Int32, %611 : $Builtin.Int32, %527 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %614, %613
  %613 = tuple_extract %612 : $(Builtin.Int32, Builtin.Int1), 0 // users: %753, %620, %617
  %614 = tuple_extract %612 : $(Builtin.Int32, Builtin.Int1), 1 // user: %615
  cond_br %614, bb94, bb95                        // id: %615

bb94:                                             // Preds: bb93
  br bb98                                         // id: %616

bb95:                                             // Preds: bb93
  %617 = builtin "cmp_ult_Int32"(%12 : $Builtin.Int32, %613 : $Builtin.Int32) : $Builtin.Int1 // user: %618
  cond_br %617, bb96, bb97                        // id: %618

bb96:                                             // Preds: bb95
  br bb98                                         // id: %619

bb97:                                             // Preds: bb95
  br bb128(%108 : $Builtin.Int64, %613 : $Builtin.Int32) // id: %620

bb98:                                             // Preds: bb96 bb94
  %621 = builtin "sadd_with_overflow_Int64"(%108 : $Builtin.Int64, %4 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %623, %622
  %622 = tuple_extract %621 : $(Builtin.Int64, Builtin.Int1), 0 // users: %753, %636, %632, %625
  %623 = tuple_extract %621 : $(Builtin.Int64, Builtin.Int1), 1 // user: %624
  cond_fail %623 : $Builtin.Int1                  // id: %624
  %625 = builtin "cmp_slt_Int64"(%622 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %626
  %626 = builtin "cmp_eq_Int1"(%114 : $Builtin.Int1, %625 : $Builtin.Int1) : $Builtin.Int1 // user: %627
  cond_br %626, bb100, bb99                       // id: %627

bb99:                                             // Preds: bb98
  br bb106(%114 : $Builtin.Int1)                  // id: %628

bb100:                                            // Preds: bb98
  %629 = builtin "cmp_eq_Int64"(%113 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %630
  cond_br %629, bb102, bb101                      // id: %630

bb101:                                            // Preds: bb100
  br bb105                                        // id: %631

bb102:                                            // Preds: bb100
  %632 = builtin "cmp_eq_Int64"(%622 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %633
  cond_br %632, bb104, bb103                      // id: %633

bb103:                                            // Preds: bb102
  br bb105                                        // id: %634

bb104:                                            // Preds: bb102
  br bb127                                        // id: %635

bb105:                                            // Preds: bb103 bb101
  %636 = builtin "cmp_slt_Int64"(%113 : $Builtin.Int64, %622 : $Builtin.Int64) : $Builtin.Int1 // user: %637
  br bb106(%636 : $Builtin.Int1)                  // id: %637

// %638                                           // user: %639
bb106(%638 : $Builtin.Int1):                      // Preds: bb105 bb99
  cond_br %638, bb108, bb107                      // id: %639

bb107:                                            // Preds: bb106
  br bb127                                        // id: %640

bb108:                                            // Preds: bb106
  destroy_addr %576 : $*τ_1_0.Magnitude          // id: %641
  %642 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %643
  %643 = struct_extract %642 : $Bool, #Bool._value // user: %644
  cond_br %643, bb110, bb109                      // id: %644

bb109:                                            // Preds: bb108
  %645 = struct $Bool (%527 : $Builtin.Int1)      // user: %646
  br bb123(%645 : $Bool)                          // id: %646

bb110:                                            // Preds: bb108
  %647 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %648
  %648 = struct_extract %647 : $Bool, #Bool._value // user: %649
  cond_br %648, bb112, bb111                      // id: %649

bb111:                                            // Preds: bb110
  %650 = struct $Bool (%527 : $Builtin.Int1)      // user: %651
  br bb113(%650 : $Bool)                          // id: %651

bb112:                                            // Preds: bb110
  %652 = alloc_stack $τ_1_0                      // users: %664, %663, %662, %659
  %653 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %660, %659, %657
  %654 = metatype $@thick τ_1_0.IntegerLiteralType.Type // user: %657
  %655 = integer_literal $Builtin.IntLiteral, 0   // user: %657
  %656 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // user: %657
  %657 = apply %656<τ_1_0.IntegerLiteralType>(%653, %655, %654) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %658 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // user: %659
  %659 = apply %658<τ_1_0>(%652, %653, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %653 : $*τ_1_0.IntegerLiteralType // id: %660
  %661 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %662
  %662 = apply %661<τ_1_0>(%1, %652, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %665
  destroy_addr %652 : $*τ_1_0                    // id: %663
  dealloc_stack %652 : $*τ_1_0                   // id: %664
  br bb113(%662 : $Bool)                          // id: %665

// %666                                           // users: %730, %667
bb113(%666 : $Bool):                              // Preds: bb112 bb111
  %667 = struct_extract %666 : $Bool, #Bool._value // user: %668
  cond_br %667, bb122, bb114                      // id: %668

bb114:                                            // Preds: bb113
  %669 = alloc_stack $τ_1_0                      // users: %681, %680, %679, %676
  %670 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %677, %676, %674
  %671 = metatype $@thick τ_1_0.IntegerLiteralType.Type // users: %692, %674
  %672 = integer_literal $Builtin.IntLiteral, 0   // users: %692, %674
  %673 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // users: %692, %674
  %674 = apply %673<τ_1_0.IntegerLiteralType>(%670, %672, %671) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %675 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // users: %693, %676
  %676 = apply %675<τ_1_0>(%669, %670, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %670 : $*τ_1_0.IntegerLiteralType // id: %677
  %678 = witness_method $τ_1_0, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %679
  %679 = apply %678<τ_1_0>(%1, %669, %15) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %682
  destroy_addr %669 : $*τ_1_0                    // id: %680
  dealloc_stack %669 : $*τ_1_0                   // id: %681
  %682 = struct_extract %679 : $Bool, #Bool._value // user: %683
  cond_br %682, bb121, bb115                      // id: %683

bb115:                                            // Preds: bb114
  %684 = alloc_stack $τ_1_0                      // users: %726, %716, %714, %713, %712, %708, %700, %696, %688
  %685 = alloc_stack $Int                         // users: %689, %688, %686
  store %14 to %685 : $*Int                       // id: %686
  %687 = witness_method $τ_1_0, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %688
  %688 = apply %687<τ_1_0, Int>(%684, %685, %15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %685 : $*Int                      // id: %689
  %690 = alloc_stack $τ_1_0                      // users: %698, %697, %696, %693
  %691 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %694, %693, %692
  %692 = apply %673<τ_1_0.IntegerLiteralType>(%691, %672, %671) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %693 = apply %675<τ_1_0>(%690, %691, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %691 : $*τ_1_0.IntegerLiteralType // id: %694
  %695 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // users: %712, %696
  %696 = apply %695<τ_1_0>(%684, %690, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %710
  destroy_addr %690 : $*τ_1_0                    // id: %697
  dealloc_stack %690 : $*τ_1_0                   // id: %698
  %699 = alloc_stack $τ_1_0                      // users: %705, %704, %702, %700
  copy_addr %684 to [initialization] %699 : $*τ_1_0 // id: %700
  %701 = witness_method $τ_1_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // users: %720, %702
  %702 = apply %701<τ_1_0>(%699) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %703
  %703 = struct_extract %702 : $UInt, #UInt._value // user: %706
  destroy_addr %699 : $*τ_1_0                    // id: %704
  dealloc_stack %699 : $*τ_1_0                   // id: %705
  %706 = builtin "cmp_eq_Int64"(%703 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %707
  cond_br %706, bb117, bb116                      // id: %707

bb116:                                            // Preds: bb115
  destroy_addr %684 : $*τ_1_0                    // id: %708
  br bb120                                        // id: %709

bb117:                                            // Preds: bb115
  %710 = struct_extract %696 : $Bool, #Bool._value // user: %711
  cond_br %710, bb119, bb118                      // id: %711

bb118:                                            // Preds: bb117
  %712 = apply %695<τ_1_0>(%1, %684, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %715
  destroy_addr %684 : $*τ_1_0                    // id: %713
  dealloc_stack %684 : $*τ_1_0                   // id: %714
  br bb123(%712 : $Bool)                          // id: %715

bb119:                                            // Preds: bb117
  destroy_addr %684 : $*τ_1_0                    // id: %716
  br bb120                                        // id: %717

bb120:                                            // Preds: bb119 bb116
  %718 = alloc_stack $τ_1_0                      // users: %723, %722, %720, %719
  copy_addr %1 to [initialization] %718 : $*τ_1_0 // id: %719
  %720 = apply %701<τ_1_0>(%718) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %721
  %721 = struct_extract %720 : $UInt, #UInt._value // user: %724
  destroy_addr %718 : $*τ_1_0                    // id: %722
  dealloc_stack %718 : $*τ_1_0                   // id: %723
  %724 = builtin "cmp_slt_Int64"(%721 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %725
  %725 = struct $Bool (%724 : $Builtin.Int1)      // user: %727
  dealloc_stack %684 : $*τ_1_0                   // id: %726
  br bb123(%725 : $Bool)                          // id: %727

bb121:                                            // Preds: bb114
  %728 = struct $Bool (%527 : $Builtin.Int1)      // user: %729
  br bb123(%728 : $Bool)                          // id: %729

bb122:                                            // Preds: bb113
  br bb123(%666 : $Bool)                          // id: %730

// %731                                           // user: %732
bb123(%731 : $Bool):                              // Preds: bb122 bb121 bb120 bb118 bb109
  %732 = struct_extract %731 : $Bool, #Bool._value // user: %733
  cond_br %732, bb125, bb124                      // id: %733

bb124:                                            // Preds: bb123
  %734 = integer_literal $Builtin.Int32, 2139095040 // user: %735
  %735 = builtin "bitcast_Int32_FPIEEE32"(%734 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %736
  %736 = struct $Float (%735 : $Builtin.FPIEEE32) // user: %737
  store %736 to %0 : $*Float                      // id: %737
  br bb126                                        // id: %738

bb125:                                            // Preds: bb123
  %739 = integer_literal $Builtin.Int32, 2139095040 // user: %740
  %740 = builtin "bitcast_Int32_FPIEEE32"(%739 : $Builtin.Int32) : $Builtin.FPIEEE32 // user: %741
  %741 = builtin "fneg_FPIEEE32"(%740 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %742
  %742 = struct $Float (%741 : $Builtin.FPIEEE32) // user: %743
  store %742 to %0 : $*Float                      // id: %743
  br bb126                                        // id: %744

bb126:                                            // Preds: bb125 bb124
  %745 = struct $Bool (%527 : $Builtin.Int1)      // user: %752
  dealloc_stack %576 : $*τ_1_0.Magnitude         // id: %746
  destroy_addr %553 : $*τ_1_0.Magnitude          // id: %747
  dealloc_stack %553 : $*τ_1_0.Magnitude         // id: %748
  destroy_addr %531 : $*τ_1_0.Magnitude          // id: %749
  dealloc_stack %531 : $*τ_1_0.Magnitude         // id: %750
  dealloc_stack %103 : $*τ_1_0.Magnitude         // id: %751
  br bb163(%745 : $Bool)                          // id: %752

bb127:                                            // Preds: bb107 bb104
  br bb128(%622 : $Builtin.Int64, %613 : $Builtin.Int32) // id: %753

// %754                                           // users: %868, %865
// %755                                           // user: %872
bb128(%754 : $Builtin.Int64, %755 : $Builtin.Int32): // Preds: bb127 bb97 bb92
  %756 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %757
  %757 = struct_extract %756 : $Bool, #Bool._value // user: %758
  cond_br %757, bb130, bb129                      // id: %758

bb129:                                            // Preds: bb128
  %759 = struct $Bool (%527 : $Builtin.Int1)      // user: %760
  br bb143(%759 : $Bool)                          // id: %760

bb130:                                            // Preds: bb128
  %761 = apply %16<τ_1_0>(%15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %762
  %762 = struct_extract %761 : $Bool, #Bool._value // user: %763
  cond_br %762, bb132, bb131                      // id: %763

bb131:                                            // Preds: bb130
  %764 = struct $Bool (%527 : $Builtin.Int1)      // user: %765
  br bb133(%764 : $Bool)                          // id: %765

bb132:                                            // Preds: bb130
  %766 = alloc_stack $τ_1_0                      // users: %778, %777, %776, %773
  %767 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %774, %773, %771
  %768 = metatype $@thick τ_1_0.IntegerLiteralType.Type // user: %771
  %769 = integer_literal $Builtin.IntLiteral, 0   // user: %771
  %770 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // user: %771
  %771 = apply %770<τ_1_0.IntegerLiteralType>(%767, %769, %768) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %772 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // user: %773
  %773 = apply %772<τ_1_0>(%766, %767, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %767 : $*τ_1_0.IntegerLiteralType // id: %774
  %775 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %776
  %776 = apply %775<τ_1_0>(%1, %766, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %779
  destroy_addr %766 : $*τ_1_0                    // id: %777
  dealloc_stack %766 : $*τ_1_0                   // id: %778
  br bb133(%776 : $Bool)                          // id: %779

// %780                                           // users: %844, %781
bb133(%780 : $Bool):                              // Preds: bb132 bb131
  %781 = struct_extract %780 : $Bool, #Bool._value // user: %782
  cond_br %781, bb142, bb134                      // id: %782

bb134:                                            // Preds: bb133
  %783 = alloc_stack $τ_1_0                      // users: %795, %794, %793, %790
  %784 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %791, %790, %788
  %785 = metatype $@thick τ_1_0.IntegerLiteralType.Type // users: %806, %788
  %786 = integer_literal $Builtin.IntLiteral, 0   // users: %806, %788
  %787 = witness_method $τ_1_0.IntegerLiteralType, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0 // users: %806, %788
  %788 = apply %787<τ_1_0.IntegerLiteralType>(%784, %786, %785) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %789 = witness_method $τ_1_0, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0 // users: %807, %790
  %790 = apply %789<τ_1_0>(%783, %784, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %784 : $*τ_1_0.IntegerLiteralType // id: %791
  %792 = witness_method $τ_1_0, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %793
  %793 = apply %792<τ_1_0>(%1, %783, %15) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %796
  destroy_addr %783 : $*τ_1_0                    // id: %794
  dealloc_stack %783 : $*τ_1_0                   // id: %795
  %796 = struct_extract %793 : $Bool, #Bool._value // user: %797
  cond_br %796, bb141, bb135                      // id: %797

bb135:                                            // Preds: bb134
  %798 = alloc_stack $τ_1_0                      // users: %840, %830, %828, %827, %826, %822, %814, %810, %802
  %799 = alloc_stack $Int                         // users: %803, %802, %800
  store %14 to %799 : $*Int                       // id: %800
  %801 = witness_method $τ_1_0, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %802
  %802 = apply %801<τ_1_0, Int>(%798, %799, %15) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %799 : $*Int                      // id: %803
  %804 = alloc_stack $τ_1_0                      // users: %812, %811, %810, %807
  %805 = alloc_stack $τ_1_0.IntegerLiteralType   // users: %808, %807, %806
  %806 = apply %787<τ_1_0.IntegerLiteralType>(%805, %786, %785) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %807 = apply %789<τ_1_0>(%804, %805, %15) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %805 : $*τ_1_0.IntegerLiteralType // id: %808
  %809 = witness_method $τ_1_0, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // users: %826, %810
  %810 = apply %809<τ_1_0>(%798, %804, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %824
  destroy_addr %804 : $*τ_1_0                    // id: %811
  dealloc_stack %804 : $*τ_1_0                   // id: %812
  %813 = alloc_stack $τ_1_0                      // users: %819, %818, %816, %814
  copy_addr %798 to [initialization] %813 : $*τ_1_0 // id: %814
  %815 = witness_method $τ_1_0, #BinaryInteger._lowWord!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> UInt : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // users: %834, %816
  %816 = apply %815<τ_1_0>(%813) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %817
  %817 = struct_extract %816 : $UInt, #UInt._value // user: %820
  destroy_addr %813 : $*τ_1_0                    // id: %818
  dealloc_stack %813 : $*τ_1_0                   // id: %819
  %820 = builtin "cmp_eq_Int64"(%817 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %821
  cond_br %820, bb137, bb136                      // id: %821

bb136:                                            // Preds: bb135
  destroy_addr %798 : $*τ_1_0                    // id: %822
  br bb140                                        // id: %823

bb137:                                            // Preds: bb135
  %824 = struct_extract %810 : $Bool, #Bool._value // user: %825
  cond_br %824, bb139, bb138                      // id: %825

bb138:                                            // Preds: bb137
  %826 = apply %809<τ_1_0>(%1, %798, %15) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %829
  destroy_addr %798 : $*τ_1_0                    // id: %827
  dealloc_stack %798 : $*τ_1_0                   // id: %828
  br bb143(%826 : $Bool)                          // id: %829

bb139:                                            // Preds: bb137
  destroy_addr %798 : $*τ_1_0                    // id: %830
  br bb140                                        // id: %831

bb140:                                            // Preds: bb139 bb136
  %832 = alloc_stack $τ_1_0                      // users: %837, %836, %834, %833
  copy_addr %1 to [initialization] %832 : $*τ_1_0 // id: %833
  %834 = apply %815<τ_1_0>(%832) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %835
  %835 = struct_extract %834 : $UInt, #UInt._value // user: %838
  destroy_addr %832 : $*τ_1_0                    // id: %836
  dealloc_stack %832 : $*τ_1_0                   // id: %837
  %838 = builtin "cmp_slt_Int64"(%835 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %839
  %839 = struct $Bool (%838 : $Builtin.Int1)      // user: %841
  dealloc_stack %798 : $*τ_1_0                   // id: %840
  br bb143(%839 : $Bool)                          // id: %841

bb141:                                            // Preds: bb134
  %842 = struct $Bool (%527 : $Builtin.Int1)      // user: %843
  br bb143(%842 : $Bool)                          // id: %843

bb142:                                            // Preds: bb133
  br bb143(%780 : $Bool)                          // id: %844

// %845                                           // user: %846
bb143(%845 : $Bool):                              // Preds: bb142 bb141 bb140 bb138 bb129
  %846 = struct_extract %845 : $Bool, #Bool._value // user: %847
  cond_br %846, bb145, bb144                      // id: %847

bb144:                                            // Preds: bb143
  %848 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %849
  br bb146(%848 : $FloatingPointSign)             // id: %849

bb145:                                            // Preds: bb143
  %850 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %851
  br bb146(%850 : $FloatingPointSign)             // id: %851

// %852                                           // user: %876
bb146(%852 : $FloatingPointSign):                 // Preds: bb145 bb144
  %853 = string_literal utf8 "Negative value is not representable" // user: %855
  %854 = integer_literal $Builtin.Word, 35        // user: %857
  %855 = builtin "ptrtoint_Word"(%853 : $Builtin.RawPointer) : $Builtin.Word // user: %857
  %856 = integer_literal $Builtin.Int8, 2         // users: %967, %861, %857
  %857 = struct $StaticString (%855 : $Builtin.Word, %854 : $Builtin.Word, %856 : $Builtin.Int8) // user: %971
  %858 = string_literal utf8 "/swift-base/swift/stdlib/public/core/Integers.swift" // user: %860
  %859 = integer_literal $Builtin.Word, 51        // user: %861
  %860 = builtin "ptrtoint_Word"(%858 : $Builtin.RawPointer) : $Builtin.Word // user: %861
  %861 = struct $StaticString (%860 : $Builtin.Word, %859 : $Builtin.Word, %856 : $Builtin.Int8) // user: %971
  %862 = integer_literal $Builtin.Int64, 3346     // user: %863
  %863 = struct $UInt (%862 : $Builtin.Int64)     // user: %971
  br bb147                                        // id: %864

bb147:                                            // Preds: bb146
  %865 = builtin "cmp_slt_Int64"(%754 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %866
  %866 = builtin "int_expect_Int1"(%865 : $Builtin.Int1, %527 : $Builtin.Int1) : $Builtin.Int1 // user: %867
  cond_br %866, bb161, bb148                      // id: %867

bb148:                                            // Preds: bb147
  %868 = builtin "uadd_with_overflow_Int64"(%11 : $Builtin.Int64, %754 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %870, %869
  %869 = tuple_extract %868 : $(Builtin.Int64, Builtin.Int1), 0 // user: %873
  %870 = tuple_extract %868 : $(Builtin.Int64, Builtin.Int1), 1 // user: %871
  cond_fail %870 : $Builtin.Int1                  // id: %871
  %872 = struct $UInt32 (%755 : $Builtin.Int32)   // user: %876
  %873 = struct $UInt (%869 : $Builtin.Int64)     // user: %876
  %874 = metatype $@thin Float.Type               // user: %876
  // function_ref Float.init(sign:exponentBitPattern:significandBitPattern:)
  %875 = function_ref @$sSf4sign18exponentBitPattern011significandcD0Sfs17FloatingPointSignO_Sus6UInt32VtcfC : $@convention(method) (FloatingPointSign, UInt, UInt32, @thin Float.Type) -> Float // user: %876
  %876 = apply %875(%852, %873, %872, %874) : $@convention(method) (FloatingPointSign, UInt, UInt32, @thin Float.Type) -> Float // user: %877
  store %876 to %0 : $*Float                      // id: %877
  %878 = witness_method $τ_1_0.Magnitude, #BinaryInteger.isSigned!getter.1 : <Self where Self : BinaryInteger> (Self.Type) -> () -> Bool : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // users: %908, %879
  %879 = apply %878<τ_1_0.Magnitude>(%532) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %880
  %880 = struct_extract %879 : $Bool, #Bool._value // user: %881
  cond_br %880, bb150, bb149                      // id: %881

bb149:                                            // Preds: bb148
  %882 = struct $Bool (%527 : $Builtin.Int1)      // user: %883
  br bb151(%882 : $Bool)                          // id: %883

bb150:                                            // Preds: bb148
  %884 = alloc_stack $τ_1_0.Magnitude            // users: %893, %892, %891, %888
  %885 = alloc_stack $τ_1_0.Magnitude.IntegerLiteralType // users: %889, %888, %887
  %886 = integer_literal $Builtin.IntLiteral, 0   // user: %887
  %887 = apply %536<τ_1_0.Magnitude.IntegerLiteralType>(%885, %886, %535) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
  %888 = apply %538<τ_1_0.Magnitude>(%884, %885, %532) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %885 : $*τ_1_0.Magnitude.IntegerLiteralType // id: %889
  %890 = witness_method $τ_1_0.Magnitude, #Comparable."<"!1 : <Self where Self : Comparable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %891
  %891 = apply %890<τ_1_0.Magnitude>(%576, %884, %532) : $@convention(witness_method: Comparable) <τ_0_0 where τ_0_0 : Comparable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %894
  destroy_addr %884 : $*τ_1_0.Magnitude          // id: %892
  dealloc_stack %884 : $*τ_1_0.Magnitude         // id: %893
  br bb151(%891 : $Bool)                          // id: %894

// %895                                           // user: %896
bb151(%895 : $Bool):                              // Preds: bb150 bb149
  %896 = struct_extract %895 : $Bool, #Bool._value // user: %897
  cond_br %896, bb159, bb152                      // id: %897

bb152:                                            // Preds: bb151
  %898 = witness_method $τ_1_0.Magnitude, #BinaryInteger.bitWidth!getter.1 : <Self where Self : BinaryInteger> (Self) -> () -> Int : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // users: %904, %899
  %899 = apply %898<τ_1_0.Magnitude>(%576) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %901
  %900 = integer_literal $Builtin.Int64, 64       // users: %906, %902
  %901 = struct_extract %899 : $Int, #Int._value  // user: %902
  %902 = builtin "cmp_slt_Int64"(%901 : $Builtin.Int64, %900 : $Builtin.Int64) : $Builtin.Int1 // user: %903
  cond_br %902, bb158, bb153                      // id: %903

bb153:                                            // Preds: bb152
  %904 = apply %898<τ_1_0.Magnitude>(%576) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> Int // user: %905
  %905 = struct_extract %904 : $Int, #Int._value  // user: %906
  %906 = builtin "cmp_slt_Int64"(%900 : $Builtin.Int64, %905 : $Builtin.Int64) : $Builtin.Int1 // user: %907
  cond_br %906, bb157, bb154                      // id: %907

bb154:                                            // Preds: bb153
  %908 = apply %878<τ_1_0.Magnitude>(%532) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@thick τ_0_0.Type) -> Bool // user: %909
  %909 = struct_extract %908 : $Bool, #Bool._value // user: %910
  cond_br %909, bb156, bb155                      // id: %910

bb155:                                            // Preds: bb154
  %911 = alloc_stack $τ_1_0.Magnitude            // users: %921, %920, %918, %915
  %912 = alloc_stack $Int                         // users: %916, %915, %913
  store %14 to %912 : $*Int                       // id: %913
  %914 = witness_method $τ_1_0.Magnitude, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %915
  %915 = apply %914<τ_1_0.Magnitude, Int>(%911, %912, %532) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %912 : $*Int                      // id: %916
  %917 = witness_method $τ_1_0.Magnitude, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %918
  %918 = apply %917<τ_1_0.Magnitude>(%576, %911, %532) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %922
  destroy_addr %576 : $*τ_1_0.Magnitude          // id: %919
  destroy_addr %911 : $*τ_1_0.Magnitude          // id: %920
  dealloc_stack %911 : $*τ_1_0.Magnitude         // id: %921
  br bb160(%918 : $Bool)                          // id: %922

bb156:                                            // Preds: bb154
  %923 = alloc_stack $τ_1_0.Magnitude            // users: %928, %927, %925, %924
  copy_addr [take] %576 to [initialization] %923 : $*τ_1_0.Magnitude // id: %924
  %925 = apply %586<τ_1_0.Magnitude>(%923) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %926
  %926 = struct_extract %925 : $UInt, #UInt._value // user: %929
  destroy_addr %923 : $*τ_1_0.Magnitude          // id: %927
  dealloc_stack %923 : $*τ_1_0.Magnitude         // id: %928
  %929 = builtin "cmp_eq_Int64"(%926 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %930
  %930 = struct $Bool (%929 : $Builtin.Int1)      // user: %931
  br bb160(%930 : $Bool)                          // id: %931

bb157:                                            // Preds: bb153
  %932 = alloc_stack $τ_1_0.Magnitude            // users: %942, %941, %939, %936
  %933 = alloc_stack $Int                         // users: %937, %936, %934
  store %14 to %933 : $*Int                       // id: %934
  %935 = witness_method $τ_1_0.Magnitude, #BinaryInteger.init!allocator.1 : <Self where Self : BinaryInteger><T where T : BinaryInteger> (Self.Type) -> (T) -> Self : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %936
  %936 = apply %935<τ_1_0.Magnitude, Int>(%932, %933, %532) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %933 : $*Int                      // id: %937
  %938 = witness_method $τ_1_0.Magnitude, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %939
  %939 = apply %938<τ_1_0.Magnitude>(%576, %932, %532) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %943
  destroy_addr %576 : $*τ_1_0.Magnitude          // id: %940
  destroy_addr %932 : $*τ_1_0.Magnitude          // id: %941
  dealloc_stack %932 : $*τ_1_0.Magnitude         // id: %942
  br bb160(%939 : $Bool)                          // id: %943

bb158:                                            // Preds: bb152
  %944 = alloc_stack $τ_1_0.Magnitude            // users: %949, %948, %946, %945
  copy_addr [take] %576 to [initialization] %944 : $*τ_1_0.Magnitude // id: %945
  %946 = apply %586<τ_1_0.Magnitude>(%944) : $@convention(witness_method: BinaryInteger) <τ_0_0 where τ_0_0 : BinaryInteger> (@in_guaranteed τ_0_0) -> UInt // user: %947
  %947 = struct_extract %946 : $UInt, #UInt._value // user: %950
  destroy_addr %944 : $*τ_1_0.Magnitude          // id: %948
  dealloc_stack %944 : $*τ_1_0.Magnitude         // id: %949
  %950 = builtin "cmp_eq_Int64"(%947 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %951
  %951 = struct $Bool (%950 : $Builtin.Int1)      // user: %952
  br bb160(%951 : $Bool)                          // id: %952

bb159:                                            // Preds: bb151
  destroy_addr %576 : $*τ_1_0.Magnitude          // id: %953
  %954 = struct $Bool (%527 : $Builtin.Int1)      // user: %955
  br bb160(%954 : $Bool)                          // id: %955

// %956                                           // user: %963
bb160(%956 : $Bool):                              // Preds: bb159 bb158 bb157 bb156 bb155
  dealloc_stack %576 : $*τ_1_0.Magnitude         // id: %957
  destroy_addr %553 : $*τ_1_0.Magnitude          // id: %958
  dealloc_stack %553 : $*τ_1_0.Magnitude         // id: %959
  destroy_addr %531 : $*τ_1_0.Magnitude          // id: %960
  dealloc_stack %531 : $*τ_1_0.Magnitude         // id: %961
  dealloc_stack %103 : $*τ_1_0.Magnitude         // id: %962
  br bb163(%956 : $Bool)                          // id: %963

bb161:                                            // Preds: bb147
  %964 = string_literal utf8 "Fatal error"        // user: %966
  %965 = integer_literal $Builtin.Word, 11        // user: %967
  %966 = builtin "ptrtoint_Word"(%964 : $Builtin.RawPointer) : $Builtin.Word // user: %967
  %967 = struct $StaticString (%966 : $Builtin.Word, %965 : $Builtin.Word, %856 : $Builtin.Int8) // user: %971
  %968 = integer_literal $Builtin.Int32, 1        // user: %969
  %969 = struct $UInt32 (%968 : $Builtin.Int32)   // user: %971
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %970 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %971
  %971 = apply %970(%967, %857, %861, %863, %969) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %972

bb162:                                            // Preds: bb12
  %973 = builtin "sitofp_Int64_FPIEEE32"(%13 : $Builtin.Int64) : $Builtin.FPIEEE32 // user: %974
  %974 = struct $Float (%973 : $Builtin.FPIEEE32) // user: %975
  store %974 to %0 : $*Float                      // id: %975
  %976 = struct $Bool (%99 : $Builtin.Int1)       // user: %977
  br bb163(%976 : $Bool)                          // id: %977

// %978                                           // user: %979
bb163(%978 : $Bool):                              // Preds: bb162 bb160 bb126 bb83 bb41
  return %978 : $Bool                             // id: %979
} // end sil function '$sSBss17FixedWidthInteger14RawSignificandRpzrlE8_convert4fromx5value_Sb5exacttqd___tSzRd__lFZqd__SfXMTSfSbSfRszSzRd__r__lIetMnyrd_Tpq5'

// Float.exponent.getter
sil [serialized] @$sSf8exponentSivg : $@convention(method) (Float) -> Int

// specialized BinaryFloatingPoint<>.init<A>(exactly:)
sil shared_external [serializable] @$sSBss17FixedWidthInteger14RawSignificandRpzrlE7exactlyxSgqd___tcSzRd__lufCqd__SfXMTSfSgSfRszSzRd__r__lIetMiyd_Tpq5 : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick Float.Type) -> Optional<Float> {
// %0                                             // users: %15, %5
bb0(%0 : $*τ_1_0, %1 : $@thick Float.Type):
  %2 = alloc_stack $Float                         // users: %14, %10, %5
  %3 = metatype $@thick Float.Type                // user: %5
  // function_ref specialized static BinaryFloatingPoint<>._convert<A>(from:)
  %4 = function_ref @$sSBss17FixedWidthInteger14RawSignificandRpzrlE8_convert4fromx5value_Sb5exacttqd___tSzRd__lFZqd__SfXMTSfSbSfRszSzRd__r__lIetMnyrd_Tpq5 : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_1_0, @thick Float.Type) -> (@out Float, Bool) // user: %5
  %5 = apply %4<Float, τ_1_0>(%2, %0, %3) : $@convention(method) <τ_0_0 where τ_0_0 == Float><τ_1_0 where τ_1_0 : BinaryInteger> (@in_guaranteed τ_1_0, @thick Float.Type) -> (@out Float, Bool) // user: %6
  %6 = struct_extract %5 : $Bool, #Bool._value    // user: %7
  cond_br %6, bb2, bb1                            // id: %7

bb1:                                              // Preds: bb0
  %8 = enum $Optional<Float>, #Optional.none!enumelt // user: %9
  br bb3(%8 : $Optional<Float>)                   // id: %9

bb2:                                              // Preds: bb0
  %10 = load %2 : $*Float                         // user: %11
  %11 = enum $Optional<Float>, #Optional.some!enumelt.1, %10 : $Float // user: %12
  br bb3(%11 : $Optional<Float>)                  // id: %12

// %13                                            // user: %16
bb3(%13 : $Optional<Float>):                      // Preds: bb2 bb1
  dealloc_stack %2 : $*Float                      // id: %14
  destroy_addr %0 : $*τ_1_0                      // id: %15
  return %13 : $Optional<Float>                   // id: %16
} // end sil function '$sSBss17FixedWidthInteger14RawSignificandRpzrlE7exactlyxSgqd___tcSzRd__lufCqd__SfXMTSfSgSfRszSzRd__r__lIetMiyd_Tpq5'

// static BinaryFloatingPoint.radix.getter
sil @$sSBsE5radixSivgZ : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@thick τ_0_0.Type) -> Int

// Float.sign.getter
sil [serialized] @$sSf4signs17FloatingPointSignOvg : $@convention(method) (Float) -> FloatingPointSign

// Float.significand.getter
sil [serialized] @$sSf11significandSfvg : $@convention(method) (Float) -> Float

// _stdlib_remainderf
sil shared_external [serializable] [clang _stdlib_remainderf] @_stdlib_remainderf : $@convention(c) (Float, Float) -> Float

// _stdlib_squareRootf
sil shared_external [serializable] [clang _stdlib_squareRootf] @_stdlib_squareRootf : $@convention(c) (Float) -> Float

// specialized static FloatingPoint.minimum(_:_:)
sil shared_external [serializable] @$sSFsE7minimumyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Float, %1 : $Float, %2 : $@thick Float.Type):
  %3 = struct_extract %0 : $Float, #Float._value  // users: %65, %51, %49, %5
  %4 = struct_extract %1 : $Float, #Float._value  // users: %64, %51, %49, %28
  %5 = builtin "bitcast_FPIEEE32_Int32"(%3 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %22, %15, %7
  %6 = integer_literal $Builtin.Int32, 23         // users: %29, %7
  %7 = builtin "lshr_Int32"(%5 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %8
  %8 = builtin "zextOrBitCast_Int32_Int64"(%7 : $Builtin.Int32) : $Builtin.Int64 // user: %10
  %9 = integer_literal $Builtin.Int64, 255        // users: %32, %31, %11, %10
  %10 = builtin "and_Int64"(%8 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %11
  %11 = builtin "cmp_ult_Int64"(%10 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %12
  cond_br %11, bb1, bb2                           // id: %12

bb1:                                              // Preds: bb0
  br bb7                                          // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int32, 8388607   // user: %15
  %15 = builtin "and_Int32"(%5 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32 // user: %17
  %16 = integer_literal $Builtin.Int64, 0         // user: %18
  %17 = builtin "zextOrBitCast_Int32_Int64"(%15 : $Builtin.Int32) : $Builtin.Int64 // user: %18
  %18 = builtin "cmp_eq_Int64"(%17 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %19
  cond_br %18, bb3, bb4                           // id: %19

bb3:                                              // Preds: bb2
  br bb7                                          // id: %20

bb4:                                              // Preds: bb2
  %21 = integer_literal $Builtin.Int32, 4194304   // user: %22
  %22 = builtin "and_Int32"(%5 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int32 // user: %24
  %23 = integer_literal $Builtin.Int32, 0         // user: %24
  %24 = builtin "cmp_eq_Int32"(%22 : $Builtin.Int32, %23 : $Builtin.Int32) : $Builtin.Int1 // user: %25
  cond_br %24, bb6, bb5                           // id: %25

bb5:                                              // Preds: bb4
  br bb7                                          // id: %26

bb6:                                              // Preds: bb4
  br bb14                                         // id: %27

bb7:                                              // Preds: bb5 bb3 bb1
  %28 = builtin "bitcast_FPIEEE32_Int32"(%4 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %57, %43, %36, %29
  %29 = builtin "lshr_Int32"(%28 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %30
  %30 = builtin "zextOrBitCast_Int32_Int64"(%29 : $Builtin.Int32) : $Builtin.Int64 // user: %31
  %31 = builtin "and_Int64"(%30 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %32
  %32 = builtin "cmp_ult_Int64"(%31 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // users: %54, %33
  cond_br %32, bb8, bb9                           // id: %33

bb8:                                              // Preds: bb7
  br bb15                                         // id: %34

bb9:                                              // Preds: bb7
  %35 = integer_literal $Builtin.Int32, 8388607   // user: %36
  %36 = builtin "and_Int32"(%28 : $Builtin.Int32, %35 : $Builtin.Int32) : $Builtin.Int32 // user: %38
  %37 = integer_literal $Builtin.Int64, 0         // user: %39
  %38 = builtin "zextOrBitCast_Int32_Int64"(%36 : $Builtin.Int32) : $Builtin.Int64 // user: %39
  %39 = builtin "cmp_eq_Int64"(%38 : $Builtin.Int64, %37 : $Builtin.Int64) : $Builtin.Int1 // user: %40
  cond_br %39, bb10, bb11                         // id: %40

bb10:                                             // Preds: bb9
  br bb15                                         // id: %41

bb11:                                             // Preds: bb9
  %42 = integer_literal $Builtin.Int32, 4194304   // user: %43
  %43 = builtin "and_Int32"(%28 : $Builtin.Int32, %42 : $Builtin.Int32) : $Builtin.Int32 // user: %45
  %44 = integer_literal $Builtin.Int32, 0         // user: %45
  %45 = builtin "cmp_eq_Int32"(%43 : $Builtin.Int32, %44 : $Builtin.Int32) : $Builtin.Int1 // user: %46
  cond_br %45, bb13, bb12                         // id: %46

bb12:                                             // Preds: bb11
  br bb15                                         // id: %47

bb13:                                             // Preds: bb11
  br bb14                                         // id: %48

bb14:                                             // Preds: bb13 bb6
  %49 = builtin "fadd_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %50
  br bb24(%49 : $Builtin.FPIEEE32)                // id: %50

bb15:                                             // Preds: bb12 bb10 bb8
  %51 = builtin "fcmp_ole_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %52
  cond_br %51, bb16, bb17                         // id: %52

bb16:                                             // Preds: bb15
  br bb23                                         // id: %53

bb17:                                             // Preds: bb15
  cond_br %32, bb18, bb19                         // id: %54

bb18:                                             // Preds: bb17
  br bb22                                         // id: %55

bb19:                                             // Preds: bb17
  %56 = integer_literal $Builtin.Int32, 8388607   // user: %57
  %57 = builtin "and_Int32"(%28 : $Builtin.Int32, %56 : $Builtin.Int32) : $Builtin.Int32 // user: %59
  %58 = integer_literal $Builtin.Int64, 0         // user: %60
  %59 = builtin "zextOrBitCast_Int32_Int64"(%57 : $Builtin.Int32) : $Builtin.Int64 // user: %60
  %60 = builtin "cmp_eq_Int64"(%59 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_br %60, bb21, bb20                         // id: %61

bb20:                                             // Preds: bb19
  br bb23                                         // id: %62

bb21:                                             // Preds: bb19
  br bb22                                         // id: %63

bb22:                                             // Preds: bb21 bb18
  br bb24(%4 : $Builtin.FPIEEE32)                 // id: %64

bb23:                                             // Preds: bb20 bb16
  br bb24(%3 : $Builtin.FPIEEE32)                 // id: %65

// %66                                            // user: %67
bb24(%66 : $Builtin.FPIEEE32):                    // Preds: bb23 bb22 bb14
  %67 = struct $Float (%66 : $Builtin.FPIEEE32)   // user: %68
  return %67 : $Float                             // id: %68
} // end sil function '$sSFsE7minimumyxx_xtFZSf_Tgq5'

// specialized static FloatingPoint.maximum(_:_:)
sil shared_external [serializable] @$sSFsE7maximumyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Float, %1 : $Float, %2 : $@thick Float.Type):
  %3 = struct_extract %0 : $Float, #Float._value  // users: %65, %51, %49, %5
  %4 = struct_extract %1 : $Float, #Float._value  // users: %64, %51, %49, %28
  %5 = builtin "bitcast_FPIEEE32_Int32"(%3 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %22, %15, %7
  %6 = integer_literal $Builtin.Int32, 23         // users: %29, %7
  %7 = builtin "lshr_Int32"(%5 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %8
  %8 = builtin "zextOrBitCast_Int32_Int64"(%7 : $Builtin.Int32) : $Builtin.Int64 // user: %10
  %9 = integer_literal $Builtin.Int64, 255        // users: %32, %31, %11, %10
  %10 = builtin "and_Int64"(%8 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %11
  %11 = builtin "cmp_ult_Int64"(%10 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %12
  cond_br %11, bb1, bb2                           // id: %12

bb1:                                              // Preds: bb0
  br bb7                                          // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int32, 8388607   // user: %15
  %15 = builtin "and_Int32"(%5 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32 // user: %17
  %16 = integer_literal $Builtin.Int64, 0         // user: %18
  %17 = builtin "zextOrBitCast_Int32_Int64"(%15 : $Builtin.Int32) : $Builtin.Int64 // user: %18
  %18 = builtin "cmp_eq_Int64"(%17 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %19
  cond_br %18, bb3, bb4                           // id: %19

bb3:                                              // Preds: bb2
  br bb7                                          // id: %20

bb4:                                              // Preds: bb2
  %21 = integer_literal $Builtin.Int32, 4194304   // user: %22
  %22 = builtin "and_Int32"(%5 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int32 // user: %24
  %23 = integer_literal $Builtin.Int32, 0         // user: %24
  %24 = builtin "cmp_eq_Int32"(%22 : $Builtin.Int32, %23 : $Builtin.Int32) : $Builtin.Int1 // user: %25
  cond_br %24, bb6, bb5                           // id: %25

bb5:                                              // Preds: bb4
  br bb7                                          // id: %26

bb6:                                              // Preds: bb4
  br bb14                                         // id: %27

bb7:                                              // Preds: bb5 bb3 bb1
  %28 = builtin "bitcast_FPIEEE32_Int32"(%4 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %57, %43, %36, %29
  %29 = builtin "lshr_Int32"(%28 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %30
  %30 = builtin "zextOrBitCast_Int32_Int64"(%29 : $Builtin.Int32) : $Builtin.Int64 // user: %31
  %31 = builtin "and_Int64"(%30 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %32
  %32 = builtin "cmp_ult_Int64"(%31 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // users: %54, %33
  cond_br %32, bb8, bb9                           // id: %33

bb8:                                              // Preds: bb7
  br bb15                                         // id: %34

bb9:                                              // Preds: bb7
  %35 = integer_literal $Builtin.Int32, 8388607   // user: %36
  %36 = builtin "and_Int32"(%28 : $Builtin.Int32, %35 : $Builtin.Int32) : $Builtin.Int32 // user: %38
  %37 = integer_literal $Builtin.Int64, 0         // user: %39
  %38 = builtin "zextOrBitCast_Int32_Int64"(%36 : $Builtin.Int32) : $Builtin.Int64 // user: %39
  %39 = builtin "cmp_eq_Int64"(%38 : $Builtin.Int64, %37 : $Builtin.Int64) : $Builtin.Int1 // user: %40
  cond_br %39, bb10, bb11                         // id: %40

bb10:                                             // Preds: bb9
  br bb15                                         // id: %41

bb11:                                             // Preds: bb9
  %42 = integer_literal $Builtin.Int32, 4194304   // user: %43
  %43 = builtin "and_Int32"(%28 : $Builtin.Int32, %42 : $Builtin.Int32) : $Builtin.Int32 // user: %45
  %44 = integer_literal $Builtin.Int32, 0         // user: %45
  %45 = builtin "cmp_eq_Int32"(%43 : $Builtin.Int32, %44 : $Builtin.Int32) : $Builtin.Int1 // user: %46
  cond_br %45, bb13, bb12                         // id: %46

bb12:                                             // Preds: bb11
  br bb15                                         // id: %47

bb13:                                             // Preds: bb11
  br bb14                                         // id: %48

bb14:                                             // Preds: bb13 bb6
  %49 = builtin "fadd_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %50
  br bb24(%49 : $Builtin.FPIEEE32)                // id: %50

bb15:                                             // Preds: bb12 bb10 bb8
  %51 = builtin "fcmp_olt_FPIEEE32"(%4 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %52
  cond_br %51, bb16, bb17                         // id: %52

bb16:                                             // Preds: bb15
  br bb23                                         // id: %53

bb17:                                             // Preds: bb15
  cond_br %32, bb18, bb19                         // id: %54

bb18:                                             // Preds: bb17
  br bb22                                         // id: %55

bb19:                                             // Preds: bb17
  %56 = integer_literal $Builtin.Int32, 8388607   // user: %57
  %57 = builtin "and_Int32"(%28 : $Builtin.Int32, %56 : $Builtin.Int32) : $Builtin.Int32 // user: %59
  %58 = integer_literal $Builtin.Int64, 0         // user: %60
  %59 = builtin "zextOrBitCast_Int32_Int64"(%57 : $Builtin.Int32) : $Builtin.Int64 // user: %60
  %60 = builtin "cmp_eq_Int64"(%59 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_br %60, bb21, bb20                         // id: %61

bb20:                                             // Preds: bb19
  br bb23                                         // id: %62

bb21:                                             // Preds: bb19
  br bb22                                         // id: %63

bb22:                                             // Preds: bb21 bb18
  br bb24(%4 : $Builtin.FPIEEE32)                 // id: %64

bb23:                                             // Preds: bb20 bb16
  br bb24(%3 : $Builtin.FPIEEE32)                 // id: %65

// %66                                            // user: %67
bb24(%66 : $Builtin.FPIEEE32):                    // Preds: bb23 bb22 bb14
  %67 = struct $Float (%66 : $Builtin.FPIEEE32)   // user: %68
  return %67 : $Float                             // id: %68
} // end sil function '$sSFsE7maximumyxx_xtFZSf_Tgq5'

// specialized static FloatingPoint.minimumMagnitude(_:_:)
sil shared_external [serializable] @$sSFsE16minimumMagnitudeyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Float, %1 : $Float, %2 : $@thick Float.Type):
  %3 = struct_extract %0 : $Float, #Float._value  // users: %67, %51, %49, %5
  %4 = struct_extract %1 : $Float, #Float._value  // users: %66, %52, %49, %28
  %5 = builtin "bitcast_FPIEEE32_Int32"(%3 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %22, %15, %7
  %6 = integer_literal $Builtin.Int32, 23         // users: %29, %7
  %7 = builtin "lshr_Int32"(%5 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %8
  %8 = builtin "zextOrBitCast_Int32_Int64"(%7 : $Builtin.Int32) : $Builtin.Int64 // user: %10
  %9 = integer_literal $Builtin.Int64, 255        // users: %32, %31, %11, %10
  %10 = builtin "and_Int64"(%8 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %11
  %11 = builtin "cmp_ult_Int64"(%10 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %12
  cond_br %11, bb1, bb2                           // id: %12

bb1:                                              // Preds: bb0
  br bb7                                          // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int32, 8388607   // user: %15
  %15 = builtin "and_Int32"(%5 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32 // user: %17
  %16 = integer_literal $Builtin.Int64, 0         // user: %18
  %17 = builtin "zextOrBitCast_Int32_Int64"(%15 : $Builtin.Int32) : $Builtin.Int64 // user: %18
  %18 = builtin "cmp_eq_Int64"(%17 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %19
  cond_br %18, bb3, bb4                           // id: %19

bb3:                                              // Preds: bb2
  br bb7                                          // id: %20

bb4:                                              // Preds: bb2
  %21 = integer_literal $Builtin.Int32, 4194304   // user: %22
  %22 = builtin "and_Int32"(%5 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int32 // user: %24
  %23 = integer_literal $Builtin.Int32, 0         // user: %24
  %24 = builtin "cmp_eq_Int32"(%22 : $Builtin.Int32, %23 : $Builtin.Int32) : $Builtin.Int1 // user: %25
  cond_br %24, bb6, bb5                           // id: %25

bb5:                                              // Preds: bb4
  br bb7                                          // id: %26

bb6:                                              // Preds: bb4
  br bb14                                         // id: %27

bb7:                                              // Preds: bb5 bb3 bb1
  %28 = builtin "bitcast_FPIEEE32_Int32"(%4 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %59, %43, %36, %29
  %29 = builtin "lshr_Int32"(%28 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %30
  %30 = builtin "zextOrBitCast_Int32_Int64"(%29 : $Builtin.Int32) : $Builtin.Int64 // user: %31
  %31 = builtin "and_Int64"(%30 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %32
  %32 = builtin "cmp_ult_Int64"(%31 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // users: %56, %33
  cond_br %32, bb8, bb9                           // id: %33

bb8:                                              // Preds: bb7
  br bb15                                         // id: %34

bb9:                                              // Preds: bb7
  %35 = integer_literal $Builtin.Int32, 8388607   // user: %36
  %36 = builtin "and_Int32"(%28 : $Builtin.Int32, %35 : $Builtin.Int32) : $Builtin.Int32 // user: %38
  %37 = integer_literal $Builtin.Int64, 0         // user: %39
  %38 = builtin "zextOrBitCast_Int32_Int64"(%36 : $Builtin.Int32) : $Builtin.Int64 // user: %39
  %39 = builtin "cmp_eq_Int64"(%38 : $Builtin.Int64, %37 : $Builtin.Int64) : $Builtin.Int1 // user: %40
  cond_br %39, bb10, bb11                         // id: %40

bb10:                                             // Preds: bb9
  br bb15                                         // id: %41

bb11:                                             // Preds: bb9
  %42 = integer_literal $Builtin.Int32, 4194304   // user: %43
  %43 = builtin "and_Int32"(%28 : $Builtin.Int32, %42 : $Builtin.Int32) : $Builtin.Int32 // user: %45
  %44 = integer_literal $Builtin.Int32, 0         // user: %45
  %45 = builtin "cmp_eq_Int32"(%43 : $Builtin.Int32, %44 : $Builtin.Int32) : $Builtin.Int1 // user: %46
  cond_br %45, bb13, bb12                         // id: %46

bb12:                                             // Preds: bb11
  br bb15                                         // id: %47

bb13:                                             // Preds: bb11
  br bb14                                         // id: %48

bb14:                                             // Preds: bb13 bb6
  %49 = builtin "fadd_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %50
  br bb24(%49 : $Builtin.FPIEEE32)                // id: %50

bb15:                                             // Preds: bb12 bb10 bb8
  %51 = builtin "int_fabs_FPIEEE32"(%3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %53
  %52 = builtin "int_fabs_FPIEEE32"(%4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %53
  %53 = builtin "fcmp_ole_FPIEEE32"(%51 : $Builtin.FPIEEE32, %52 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %54
  cond_br %53, bb16, bb17                         // id: %54

bb16:                                             // Preds: bb15
  br bb23                                         // id: %55

bb17:                                             // Preds: bb15
  cond_br %32, bb18, bb19                         // id: %56

bb18:                                             // Preds: bb17
  br bb22                                         // id: %57

bb19:                                             // Preds: bb17
  %58 = integer_literal $Builtin.Int32, 8388607   // user: %59
  %59 = builtin "and_Int32"(%28 : $Builtin.Int32, %58 : $Builtin.Int32) : $Builtin.Int32 // user: %61
  %60 = integer_literal $Builtin.Int64, 0         // user: %62
  %61 = builtin "zextOrBitCast_Int32_Int64"(%59 : $Builtin.Int32) : $Builtin.Int64 // user: %62
  %62 = builtin "cmp_eq_Int64"(%61 : $Builtin.Int64, %60 : $Builtin.Int64) : $Builtin.Int1 // user: %63
  cond_br %62, bb21, bb20                         // id: %63

bb20:                                             // Preds: bb19
  br bb23                                         // id: %64

bb21:                                             // Preds: bb19
  br bb22                                         // id: %65

bb22:                                             // Preds: bb21 bb18
  br bb24(%4 : $Builtin.FPIEEE32)                 // id: %66

bb23:                                             // Preds: bb20 bb16
  br bb24(%3 : $Builtin.FPIEEE32)                 // id: %67

// %68                                            // user: %69
bb24(%68 : $Builtin.FPIEEE32):                    // Preds: bb23 bb22 bb14
  %69 = struct $Float (%68 : $Builtin.FPIEEE32)   // user: %70
  return %69 : $Float                             // id: %70
} // end sil function '$sSFsE16minimumMagnitudeyxx_xtFZSf_Tgq5'

// specialized static FloatingPoint.maximumMagnitude(_:_:)
sil shared_external [serializable] @$sSFsE16maximumMagnitudeyxx_xtFZSf_Tgq5 : $@convention(method) (Float, Float, @thick Float.Type) -> Float {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Float, %1 : $Float, %2 : $@thick Float.Type):
  %3 = struct_extract %0 : $Float, #Float._value  // users: %67, %51, %49, %5
  %4 = struct_extract %1 : $Float, #Float._value  // users: %66, %52, %49, %28
  %5 = builtin "bitcast_FPIEEE32_Int32"(%3 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %22, %15, %7
  %6 = integer_literal $Builtin.Int32, 23         // users: %29, %7
  %7 = builtin "lshr_Int32"(%5 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %8
  %8 = builtin "zextOrBitCast_Int32_Int64"(%7 : $Builtin.Int32) : $Builtin.Int64 // user: %10
  %9 = integer_literal $Builtin.Int64, 255        // users: %32, %31, %11, %10
  %10 = builtin "and_Int64"(%8 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %11
  %11 = builtin "cmp_ult_Int64"(%10 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %12
  cond_br %11, bb1, bb2                           // id: %12

bb1:                                              // Preds: bb0
  br bb7                                          // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int32, 8388607   // user: %15
  %15 = builtin "and_Int32"(%5 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32 // user: %17
  %16 = integer_literal $Builtin.Int64, 0         // user: %18
  %17 = builtin "zextOrBitCast_Int32_Int64"(%15 : $Builtin.Int32) : $Builtin.Int64 // user: %18
  %18 = builtin "cmp_eq_Int64"(%17 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %19
  cond_br %18, bb3, bb4                           // id: %19

bb3:                                              // Preds: bb2
  br bb7                                          // id: %20

bb4:                                              // Preds: bb2
  %21 = integer_literal $Builtin.Int32, 4194304   // user: %22
  %22 = builtin "and_Int32"(%5 : $Builtin.Int32, %21 : $Builtin.Int32) : $Builtin.Int32 // user: %24
  %23 = integer_literal $Builtin.Int32, 0         // user: %24
  %24 = builtin "cmp_eq_Int32"(%22 : $Builtin.Int32, %23 : $Builtin.Int32) : $Builtin.Int1 // user: %25
  cond_br %24, bb6, bb5                           // id: %25

bb5:                                              // Preds: bb4
  br bb7                                          // id: %26

bb6:                                              // Preds: bb4
  br bb14                                         // id: %27

bb7:                                              // Preds: bb5 bb3 bb1
  %28 = builtin "bitcast_FPIEEE32_Int32"(%4 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %59, %43, %36, %29
  %29 = builtin "lshr_Int32"(%28 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int32 // user: %30
  %30 = builtin "zextOrBitCast_Int32_Int64"(%29 : $Builtin.Int32) : $Builtin.Int64 // user: %31
  %31 = builtin "and_Int64"(%30 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int64 // user: %32
  %32 = builtin "cmp_ult_Int64"(%31 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // users: %56, %33
  cond_br %32, bb8, bb9                           // id: %33

bb8:                                              // Preds: bb7
  br bb15                                         // id: %34

bb9:                                              // Preds: bb7
  %35 = integer_literal $Builtin.Int32, 8388607   // user: %36
  %36 = builtin "and_Int32"(%28 : $Builtin.Int32, %35 : $Builtin.Int32) : $Builtin.Int32 // user: %38
  %37 = integer_literal $Builtin.Int64, 0         // user: %39
  %38 = builtin "zextOrBitCast_Int32_Int64"(%36 : $Builtin.Int32) : $Builtin.Int64 // user: %39
  %39 = builtin "cmp_eq_Int64"(%38 : $Builtin.Int64, %37 : $Builtin.Int64) : $Builtin.Int1 // user: %40
  cond_br %39, bb10, bb11                         // id: %40

bb10:                                             // Preds: bb9
  br bb15                                         // id: %41

bb11:                                             // Preds: bb9
  %42 = integer_literal $Builtin.Int32, 4194304   // user: %43
  %43 = builtin "and_Int32"(%28 : $Builtin.Int32, %42 : $Builtin.Int32) : $Builtin.Int32 // user: %45
  %44 = integer_literal $Builtin.Int32, 0         // user: %45
  %45 = builtin "cmp_eq_Int32"(%43 : $Builtin.Int32, %44 : $Builtin.Int32) : $Builtin.Int1 // user: %46
  cond_br %45, bb13, bb12                         // id: %46

bb12:                                             // Preds: bb11
  br bb15                                         // id: %47

bb13:                                             // Preds: bb11
  br bb14                                         // id: %48

bb14:                                             // Preds: bb13 bb6
  %49 = builtin "fadd_FPIEEE32"(%3 : $Builtin.FPIEEE32, %4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %50
  br bb24(%49 : $Builtin.FPIEEE32)                // id: %50

bb15:                                             // Preds: bb12 bb10 bb8
  %51 = builtin "int_fabs_FPIEEE32"(%3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %53
  %52 = builtin "int_fabs_FPIEEE32"(%4 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %53
  %53 = builtin "fcmp_olt_FPIEEE32"(%52 : $Builtin.FPIEEE32, %51 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %54
  cond_br %53, bb16, bb17                         // id: %54

bb16:                                             // Preds: bb15
  br bb23                                         // id: %55

bb17:                                             // Preds: bb15
  cond_br %32, bb18, bb19                         // id: %56

bb18:                                             // Preds: bb17
  br bb22                                         // id: %57

bb19:                                             // Preds: bb17
  %58 = integer_literal $Builtin.Int32, 8388607   // user: %59
  %59 = builtin "and_Int32"(%28 : $Builtin.Int32, %58 : $Builtin.Int32) : $Builtin.Int32 // user: %61
  %60 = integer_literal $Builtin.Int64, 0         // user: %62
  %61 = builtin "zextOrBitCast_Int32_Int64"(%59 : $Builtin.Int32) : $Builtin.Int64 // user: %62
  %62 = builtin "cmp_eq_Int64"(%61 : $Builtin.Int64, %60 : $Builtin.Int64) : $Builtin.Int1 // user: %63
  cond_br %62, bb21, bb20                         // id: %63

bb20:                                             // Preds: bb19
  br bb23                                         // id: %64

bb21:                                             // Preds: bb19
  br bb22                                         // id: %65

bb22:                                             // Preds: bb21 bb18
  br bb24(%4 : $Builtin.FPIEEE32)                 // id: %66

bb23:                                             // Preds: bb20 bb16
  br bb24(%3 : $Builtin.FPIEEE32)                 // id: %67

// %68                                            // user: %69
bb24(%68 : $Builtin.FPIEEE32):                    // Preds: bb23 bb22 bb14
  %69 = struct $Float (%68 : $Builtin.FPIEEE32)   // user: %70
  return %69 : $Float                             // id: %70
} // end sil function '$sSFsE16maximumMagnitudeyxx_xtFZSf_Tgq5'

// Float._roundSlowPath(_:)
sil @$sSf14_roundSlowPathyys25FloatingPointRoundingRuleOF : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Float) -> ()

// specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)
sil shared_external [serializable] @$sSBsE16isTotallyOrdered14belowOrEqualToSbx_tFSf_Tgq5 : $@convention(method) (Float, Float) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Float, %1 : $Float):
  %2 = struct_extract %0 : $Float, #Float._value  // users: %41, %4
  %3 = struct_extract %1 : $Float, #Float._value  // users: %6, %4
  %4 = builtin "fcmp_olt_FPIEEE32"(%3 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.Int1 // user: %5
  cond_br %4, bb18, bb1                           // id: %5

bb1:                                              // Preds: bb0
  %6 = builtin "bitcast_FPIEEE32_Int32"(%3 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %89, %77, %8
  %7 = integer_literal $Builtin.Int32, 31         // users: %42, %8
  %8 = builtin "lshr_Int32"(%6 : $Builtin.Int32, %7 : $Builtin.Int32) : $Builtin.Int32 // user: %9
  %9 = builtin "zextOrBitCast_Int32_Int64"(%8 : $Builtin.Int32) : $Builtin.Int64 // user: %17
  %10 = integer_literal $Builtin.Int64, 0         // users: %110, %107, %106, %102, %99, %98, %73, %69, %68, %44, %17
  %11 = integer_literal $Builtin.Int64, 1         // users: %111, %110, %106, %103, %102, %98, %74, %73, %69, %68, %44, %17
  %12 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %13
  %13 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %12 : $FloatingPointSign // users: %44, %17
  %14 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %15
  %15 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %14 : $FloatingPointSign // users: %44, %17
  %16 = enum $Optional<FloatingPointSign>, #Optional.none!enumelt // users: %44, %17
  %17 = select_value %9 : $Builtin.Int64, case %11: %13, case %10: %15, default %16 : $Optional<FloatingPointSign> // users: %109, %105, %101, %97, %72, %18
  switch_enum %17 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb4, case #Optional.none!enumelt: bb2 // id: %18

bb2:                                              // Preds: bb1
  %19 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %26
  %20 = integer_literal $Builtin.Word, 97         // user: %27
  %21 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %23
  %22 = integer_literal $Builtin.Word, 57         // user: %25
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %24 = integer_literal $Builtin.Int8, 2          // users: %34, %27, %25
  %25 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %24 : $Builtin.Int8) // user: %38
  %26 = builtin "ptrtoint_Word"(%19 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %20 : $Builtin.Word, %24 : $Builtin.Int8) // user: %38
  %28 = integer_literal $Builtin.Int64, 206       // user: %29
  %29 = struct $UInt (%28 : $Builtin.Int64)       // user: %38
  br bb3                                          // id: %30

bb3:                                              // Preds: bb2
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %24 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 1         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %27, %29, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

// %40                                            // user: %68
bb4(%40 : $FloatingPointSign):                    // Preds: bb1
  %41 = builtin "bitcast_FPIEEE32_Int32"(%2 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %90, %81, %42
  %42 = builtin "lshr_Int32"(%41 : $Builtin.Int32, %7 : $Builtin.Int32) : $Builtin.Int32 // user: %43
  %43 = builtin "zextOrBitCast_Int32_Int64"(%42 : $Builtin.Int32) : $Builtin.Int64 // user: %44
  %44 = select_value %43 : $Builtin.Int64, case %11: %13, case %10: %15, default %16 : $Optional<FloatingPointSign> // user: %45
  switch_enum %44 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb7, case #Optional.none!enumelt: bb5 // id: %45

bb5:                                              // Preds: bb4
  %46 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %53
  %47 = integer_literal $Builtin.Word, 97         // user: %54
  %48 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %50
  %49 = integer_literal $Builtin.Word, 57         // user: %52
  %50 = builtin "ptrtoint_Word"(%48 : $Builtin.RawPointer) : $Builtin.Word // user: %52
  %51 = integer_literal $Builtin.Int8, 2          // users: %61, %54, %52
  %52 = struct $StaticString (%50 : $Builtin.Word, %49 : $Builtin.Word, %51 : $Builtin.Int8) // user: %65
  %53 = builtin "ptrtoint_Word"(%46 : $Builtin.RawPointer) : $Builtin.Word // user: %54
  %54 = struct $StaticString (%53 : $Builtin.Word, %47 : $Builtin.Word, %51 : $Builtin.Int8) // user: %65
  %55 = integer_literal $Builtin.Int64, 206       // user: %56
  %56 = struct $UInt (%55 : $Builtin.Int64)       // user: %65
  br bb6                                          // id: %57

bb6:                                              // Preds: bb5
  %58 = string_literal utf8 "Fatal error"         // user: %60
  %59 = integer_literal $Builtin.Word, 11         // user: %61
  %60 = builtin "ptrtoint_Word"(%58 : $Builtin.RawPointer) : $Builtin.Word // user: %61
  %61 = struct $StaticString (%60 : $Builtin.Word, %59 : $Builtin.Word, %51 : $Builtin.Int8) // user: %65
  %62 = integer_literal $Builtin.Int32, 1         // user: %63
  %63 = struct $UInt32 (%62 : $Builtin.Int32)     // user: %65
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %64 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %65
  %65 = apply %64(%61, %52, %54, %56, %63) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %66

// %67                                            // user: %69
bb7(%67 : $FloatingPointSign):                    // Preds: bb4
  %68 = select_enum %40 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %10, case #FloatingPointSign.minus!enumelt: %11 : $Builtin.Int64 // user: %70
  %69 = select_enum %67 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %10, case #FloatingPointSign.minus!enumelt: %11 : $Builtin.Int64 // user: %70
  %70 = builtin "cmp_eq_Int64"(%68 : $Builtin.Int64, %69 : $Builtin.Int64) : $Builtin.Int1 // user: %71
  cond_br %70, bb9, bb8                           // id: %71

bb8:                                              // Preds: bb7
  %72 = unchecked_enum_data %17 : $Optional<FloatingPointSign>, #Optional.some!enumelt.1 // user: %73
  %73 = select_enum %72 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %10, case #FloatingPointSign.minus!enumelt: %11 : $Builtin.Int64 // user: %74
  %74 = builtin "cmp_eq_Int64"(%73 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1 // user: %75
  br bb19(%74 : $Builtin.Int1)                    // id: %75

bb9:                                              // Preds: bb7
  %76 = integer_literal $Builtin.Int32, 23        // users: %81, %77
  %77 = builtin "lshr_Int32"(%6 : $Builtin.Int32, %76 : $Builtin.Int32) : $Builtin.Int32 // user: %78
  %78 = builtin "zextOrBitCast_Int32_Int64"(%77 : $Builtin.Int32) : $Builtin.Int64 // user: %80
  %79 = integer_literal $Builtin.Int64, 255       // users: %83, %80
  %80 = builtin "and_Int64"(%78 : $Builtin.Int64, %79 : $Builtin.Int64) : $Builtin.Int64 // users: %86, %84
  %81 = builtin "lshr_Int32"(%41 : $Builtin.Int32, %76 : $Builtin.Int32) : $Builtin.Int32 // user: %82
  %82 = builtin "zextOrBitCast_Int32_Int64"(%81 : $Builtin.Int32) : $Builtin.Int64 // user: %83
  %83 = builtin "and_Int64"(%82 : $Builtin.Int64, %79 : $Builtin.Int64) : $Builtin.Int64 // users: %86, %84
  %84 = builtin "cmp_ult_Int64"(%83 : $Builtin.Int64, %80 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb17, bb10                         // id: %85

bb10:                                             // Preds: bb9
  %86 = builtin "cmp_ult_Int64"(%80 : $Builtin.Int64, %83 : $Builtin.Int64) : $Builtin.Int1 // user: %87
  cond_br %86, bb16, bb11                         // id: %87

bb11:                                             // Preds: bb10
  %88 = integer_literal $Builtin.Int32, 8388607   // users: %90, %89
  %89 = builtin "and_Int32"(%6 : $Builtin.Int32, %88 : $Builtin.Int32) : $Builtin.Int32 // users: %93, %91
  %90 = builtin "and_Int32"(%41 : $Builtin.Int32, %88 : $Builtin.Int32) : $Builtin.Int32 // users: %93, %91
  %91 = builtin "cmp_ult_Int32"(%90 : $Builtin.Int32, %89 : $Builtin.Int32) : $Builtin.Int1 // user: %92
  cond_br %91, bb15, bb12                         // id: %92

bb12:                                             // Preds: bb11
  %93 = builtin "cmp_ult_Int32"(%89 : $Builtin.Int32, %90 : $Builtin.Int32) : $Builtin.Int1 // user: %94
  cond_br %93, bb14, bb13                         // id: %94

bb13:                                             // Preds: bb12
  %95 = integer_literal $Builtin.Int1, -1         // user: %96
  br bb19(%95 : $Builtin.Int1)                    // id: %96

bb14:                                             // Preds: bb12
  %97 = unchecked_enum_data %17 : $Optional<FloatingPointSign>, #Optional.some!enumelt.1 // user: %98
  %98 = select_enum %97 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %10, case #FloatingPointSign.minus!enumelt: %11 : $Builtin.Int64 // user: %99
  %99 = builtin "cmp_eq_Int64"(%98 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int1 // user: %100
  br bb19(%99 : $Builtin.Int1)                    // id: %100

bb15:                                             // Preds: bb11
  %101 = unchecked_enum_data %17 : $Optional<FloatingPointSign>, #Optional.some!enumelt.1 // user: %102
  %102 = select_enum %101 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %10, case #FloatingPointSign.minus!enumelt: %11 : $Builtin.Int64 // user: %103
  %103 = builtin "cmp_eq_Int64"(%102 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1 // user: %104
  br bb19(%103 : $Builtin.Int1)                   // id: %104

bb16:                                             // Preds: bb10
  %105 = unchecked_enum_data %17 : $Optional<FloatingPointSign>, #Optional.some!enumelt.1 // user: %106
  %106 = select_enum %105 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %10, case #FloatingPointSign.minus!enumelt: %11 : $Builtin.Int64 // user: %107
  %107 = builtin "cmp_eq_Int64"(%106 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int1 // user: %108
  br bb19(%107 : $Builtin.Int1)                   // id: %108

bb17:                                             // Preds: bb9
  %109 = unchecked_enum_data %17 : $Optional<FloatingPointSign>, #Optional.some!enumelt.1 // user: %110
  %110 = select_enum %109 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %10, case #FloatingPointSign.minus!enumelt: %11 : $Builtin.Int64 // user: %111
  %111 = builtin "cmp_eq_Int64"(%110 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  br bb19(%111 : $Builtin.Int1)                   // id: %112

bb18:                                             // Preds: bb0
  %113 = integer_literal $Builtin.Int1, -1        // user: %114
  br bb19(%113 : $Builtin.Int1)                   // id: %114

// %115                                           // user: %116
bb19(%115 : $Builtin.Int1):                       // Preds: bb18 bb17 bb16 bb15 bb14 bb13 bb8
  %116 = struct $Bool (%115 : $Builtin.Int1)      // user: %117
  return %116 : $Bool                             // id: %117
} // end sil function '$sSBsE16isTotallyOrdered14belowOrEqualToSbx_tFSf_Tgq5'

// specialized FloatingPoint.floatingPointClass.getter
sil shared_external [serializable] @$sSFsE18floatingPointClasss08FloatingB14ClassificationOvgSf_Tgq5 : $@convention(method) (Float) -> FloatingPointClassification {
// %0                                             // user: %1
bb0(%0 : $Float):
  %1 = struct_extract %0 : $Float, #Float._value  // user: %2
  %2 = builtin "bitcast_FPIEEE32_Int32"(%1 : $Builtin.FPIEEE32) : $Builtin.Int32 // users: %182, %142, %102, %96, %46, %40, %29, %19, %12, %4
  %3 = integer_literal $Builtin.Int32, 23         // user: %4
  %4 = builtin "lshr_Int32"(%2 : $Builtin.Int32, %3 : $Builtin.Int32) : $Builtin.Int32 // user: %5
  %5 = builtin "zextOrBitCast_Int32_Int64"(%4 : $Builtin.Int32) : $Builtin.Int64 // user: %7
  %6 = integer_literal $Builtin.Int64, 255        // users: %8, %7
  %7 = builtin "and_Int64"(%5 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int64 // users: %92, %87, %8
  %8 = builtin "cmp_ult_Int64"(%7 : $Builtin.Int64, %6 : $Builtin.Int64) : $Builtin.Int1 // users: %90, %37, %26, %9
  cond_br %8, bb1, bb2                            // id: %9

bb1:                                              // Preds: bb0
  br bb7                                          // id: %10

bb2:                                              // Preds: bb0
  %11 = integer_literal $Builtin.Int32, 8388607   // user: %12
  %12 = builtin "and_Int32"(%2 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int32 // user: %14
  %13 = integer_literal $Builtin.Int64, 0         // user: %15
  %14 = builtin "zextOrBitCast_Int32_Int64"(%12 : $Builtin.Int32) : $Builtin.Int64 // user: %15
  %15 = builtin "cmp_eq_Int64"(%14 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %16
  cond_br %15, bb3, bb4                           // id: %16

bb3:                                              // Preds: bb2
  br bb7                                          // id: %17

bb4:                                              // Preds: bb2
  %18 = integer_literal $Builtin.Int32, 4194304   // user: %19
  %19 = builtin "and_Int32"(%2 : $Builtin.Int32, %18 : $Builtin.Int32) : $Builtin.Int32 // user: %21
  %20 = integer_literal $Builtin.Int32, 0         // user: %21
  %21 = builtin "cmp_eq_Int32"(%19 : $Builtin.Int32, %20 : $Builtin.Int32) : $Builtin.Int1 // user: %22
  cond_br %21, bb6, bb5                           // id: %22

bb5:                                              // Preds: bb4
  br bb7                                          // id: %23

bb6:                                              // Preds: bb4
  %24 = enum $FloatingPointClassification, #FloatingPointClassification.signalingNaN!enumelt // user: %25
  br bb48(%24 : $FloatingPointClassification)     // id: %25

bb7:                                              // Preds: bb5 bb3 bb1
  cond_br %8, bb8, bb9                            // id: %26

bb8:                                              // Preds: bb7
  br bb12                                         // id: %27

bb9:                                              // Preds: bb7
  %28 = integer_literal $Builtin.Int32, 8388607   // user: %29
  %29 = builtin "and_Int32"(%2 : $Builtin.Int32, %28 : $Builtin.Int32) : $Builtin.Int32 // user: %31
  %30 = integer_literal $Builtin.Int64, 0         // user: %32
  %31 = builtin "zextOrBitCast_Int32_Int64"(%29 : $Builtin.Int32) : $Builtin.Int64 // user: %32
  %32 = builtin "cmp_eq_Int64"(%31 : $Builtin.Int64, %30 : $Builtin.Int64) : $Builtin.Int1 // user: %33
  cond_br %32, bb10, bb11                         // id: %33

bb10:                                             // Preds: bb9
  br bb12                                         // id: %34

bb11:                                             // Preds: bb9
  %35 = enum $FloatingPointClassification, #FloatingPointClassification.quietNaN!enumelt // user: %36
  br bb48(%35 : $FloatingPointClassification)     // id: %36

bb12:                                             // Preds: bb10 bb8
  cond_br %8, bb13, bb14                          // id: %37

bb13:                                             // Preds: bb12
  br bb22                                         // id: %38

bb14:                                             // Preds: bb12
  %39 = integer_literal $Builtin.Int32, 8388607   // user: %40
  %40 = builtin "and_Int32"(%2 : $Builtin.Int32, %39 : $Builtin.Int32) : $Builtin.Int32 // user: %42
  %41 = integer_literal $Builtin.Int32, 0         // user: %42
  %42 = builtin "cmp_eq_Int32"(%40 : $Builtin.Int32, %41 : $Builtin.Int32) : $Builtin.Int1 // user: %43
  cond_br %42, bb16, bb15                         // id: %43

bb15:                                             // Preds: bb14
  br bb22                                         // id: %44

bb16:                                             // Preds: bb14
  %45 = integer_literal $Builtin.Int32, 31        // user: %46
  %46 = builtin "lshr_Int32"(%2 : $Builtin.Int32, %45 : $Builtin.Int32) : $Builtin.Int32 // user: %47
  %47 = builtin "zextOrBitCast_Int32_Int64"(%46 : $Builtin.Int32) : $Builtin.Int64 // user: %55
  %48 = integer_literal $Builtin.Int64, 0         // users: %79, %55
  %49 = integer_literal $Builtin.Int64, 1         // users: %80, %79, %55
  %50 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %51
  %51 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %50 : $FloatingPointSign // user: %55
  %52 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %53
  %53 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %52 : $FloatingPointSign // user: %55
  %54 = enum $Optional<FloatingPointSign>, #Optional.none!enumelt // user: %55
  %55 = select_value %47 : $Builtin.Int64, case %49: %51, case %48: %53, default %54 : $Optional<FloatingPointSign> // user: %56
  switch_enum %55 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb19, case #Optional.none!enumelt: bb17 // id: %56

bb17:                                             // Preds: bb16
  %57 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %64
  %58 = integer_literal $Builtin.Word, 97         // user: %65
  %59 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %61
  %60 = integer_literal $Builtin.Word, 57         // user: %63
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %62 = integer_literal $Builtin.Int8, 2          // users: %72, %65, %63
  %63 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %62 : $Builtin.Int8) // user: %76
  %64 = builtin "ptrtoint_Word"(%57 : $Builtin.RawPointer) : $Builtin.Word // user: %65
  %65 = struct $StaticString (%64 : $Builtin.Word, %58 : $Builtin.Word, %62 : $Builtin.Int8) // user: %76
  %66 = integer_literal $Builtin.Int64, 206       // user: %67
  %67 = struct $UInt (%66 : $Builtin.Int64)       // user: %76
  br bb18                                         // id: %68

bb18:                                             // Preds: bb17
  %69 = string_literal utf8 "Fatal error"         // user: %71
  %70 = integer_literal $Builtin.Word, 11         // user: %72
  %71 = builtin "ptrtoint_Word"(%69 : $Builtin.RawPointer) : $Builtin.Word // user: %72
  %72 = struct $StaticString (%71 : $Builtin.Word, %70 : $Builtin.Word, %62 : $Builtin.Int8) // user: %76
  %73 = integer_literal $Builtin.Int32, 1         // user: %74
  %74 = struct $UInt32 (%73 : $Builtin.Int32)     // user: %76
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %75 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %76
  %76 = apply %75(%72, %63, %65, %67, %74) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %77

// %78                                            // user: %79
bb19(%78 : $FloatingPointSign):                   // Preds: bb16
  %79 = select_enum %78 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %48, case #FloatingPointSign.minus!enumelt: %49 : $Builtin.Int64 // user: %80
  %80 = builtin "cmp_eq_Int64"(%79 : $Builtin.Int64, %49 : $Builtin.Int64) : $Builtin.Int1 // user: %81
  cond_br %80, bb21, bb20                         // id: %81

bb20:                                             // Preds: bb19
  %82 = enum $FloatingPointClassification, #FloatingPointClassification.positiveInfinity!enumelt // user: %83
  br bb48(%82 : $FloatingPointClassification)     // id: %83

bb21:                                             // Preds: bb19
  %84 = enum $FloatingPointClassification, #FloatingPointClassification.negativeInfinity!enumelt // user: %85
  br bb48(%84 : $FloatingPointClassification)     // id: %85

bb22:                                             // Preds: bb15 bb13
  %86 = integer_literal $Builtin.Int64, 0         // users: %214, %190, %174, %150, %134, %110, %98, %92, %87
  %87 = builtin "cmp_ult_Int64"(%86 : $Builtin.Int64, %7 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_br %87, bb24, bb23                         // id: %88

bb23:                                             // Preds: bb22
  br bb26                                         // id: %89

bb24:                                             // Preds: bb22
  cond_br %8, bb42, bb25                          // id: %90

bb25:                                             // Preds: bb24
  br bb26                                         // id: %91

bb26:                                             // Preds: bb25 bb23
  %92 = builtin "cmp_eq_Int64"(%7 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %93
  cond_br %92, bb28, bb27                         // id: %93

bb27:                                             // Preds: bb26
  br bb36                                         // id: %94

bb28:                                             // Preds: bb26
  %95 = integer_literal $Builtin.Int32, 8388607   // user: %96
  %96 = builtin "and_Int32"(%2 : $Builtin.Int32, %95 : $Builtin.Int32) : $Builtin.Int32 // user: %97
  %97 = builtin "zextOrBitCast_Int32_Int64"(%96 : $Builtin.Int32) : $Builtin.Int64 // user: %98
  %98 = builtin "cmp_eq_Int64"(%97 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %99
  cond_br %98, bb29, bb30                         // id: %99

bb29:                                             // Preds: bb28
  br bb36                                         // id: %100

bb30:                                             // Preds: bb28
  %101 = integer_literal $Builtin.Int32, 31       // user: %102
  %102 = builtin "lshr_Int32"(%2 : $Builtin.Int32, %101 : $Builtin.Int32) : $Builtin.Int32 // user: %103
  %103 = builtin "zextOrBitCast_Int32_Int64"(%102 : $Builtin.Int32) : $Builtin.Int64 // user: %110
  %104 = integer_literal $Builtin.Int64, 1        // users: %135, %134, %110
  %105 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %106
  %106 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %105 : $FloatingPointSign // user: %110
  %107 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %108
  %108 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %107 : $FloatingPointSign // user: %110
  %109 = enum $Optional<FloatingPointSign>, #Optional.none!enumelt // user: %110
  %110 = select_value %103 : $Builtin.Int64, case %104: %106, case %86: %108, default %109 : $Optional<FloatingPointSign> // user: %111
  switch_enum %110 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb33, case #Optional.none!enumelt: bb31 // id: %111

bb31:                                             // Preds: bb30
  %112 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %119
  %113 = integer_literal $Builtin.Word, 97        // user: %120
  %114 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %116
  %115 = integer_literal $Builtin.Word, 57        // user: %118
  %116 = builtin "ptrtoint_Word"(%114 : $Builtin.RawPointer) : $Builtin.Word // user: %118
  %117 = integer_literal $Builtin.Int8, 2         // users: %127, %120, %118
  %118 = struct $StaticString (%116 : $Builtin.Word, %115 : $Builtin.Word, %117 : $Builtin.Int8) // user: %131
  %119 = builtin "ptrtoint_Word"(%112 : $Builtin.RawPointer) : $Builtin.Word // user: %120
  %120 = struct $StaticString (%119 : $Builtin.Word, %113 : $Builtin.Word, %117 : $Builtin.Int8) // user: %131
  %121 = integer_literal $Builtin.Int64, 206      // user: %122
  %122 = struct $UInt (%121 : $Builtin.Int64)     // user: %131
  br bb32                                         // id: %123

bb32:                                             // Preds: bb31
  %124 = string_literal utf8 "Fatal error"        // user: %126
  %125 = integer_literal $Builtin.Word, 11        // user: %127
  %126 = builtin "ptrtoint_Word"(%124 : $Builtin.RawPointer) : $Builtin.Word // user: %127
  %127 = struct $StaticString (%126 : $Builtin.Word, %125 : $Builtin.Word, %117 : $Builtin.Int8) // user: %131
  %128 = integer_literal $Builtin.Int32, 1        // user: %129
  %129 = struct $UInt32 (%128 : $Builtin.Int32)   // user: %131
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %130 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %131
  %131 = apply %130(%127, %118, %120, %122, %129) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %132

// %133                                           // user: %134
bb33(%133 : $FloatingPointSign):                  // Preds: bb30
  %134 = select_enum %133 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %86, case #FloatingPointSign.minus!enumelt: %104 : $Builtin.Int64 // user: %135
  %135 = builtin "cmp_eq_Int64"(%134 : $Builtin.Int64, %104 : $Builtin.Int64) : $Builtin.Int1 // user: %136
  cond_br %135, bb35, bb34                        // id: %136

bb34:                                             // Preds: bb33
  %137 = enum $FloatingPointClassification, #FloatingPointClassification.positiveSubnormal!enumelt // user: %138
  br bb48(%137 : $FloatingPointClassification)    // id: %138

bb35:                                             // Preds: bb33
  %139 = enum $FloatingPointClassification, #FloatingPointClassification.negativeSubnormal!enumelt // user: %140
  br bb48(%139 : $FloatingPointClassification)    // id: %140

bb36:                                             // Preds: bb29 bb27
  %141 = integer_literal $Builtin.Int32, 31       // user: %142
  %142 = builtin "lshr_Int32"(%2 : $Builtin.Int32, %141 : $Builtin.Int32) : $Builtin.Int32 // user: %143
  %143 = builtin "zextOrBitCast_Int32_Int64"(%142 : $Builtin.Int32) : $Builtin.Int64 // user: %150
  %144 = integer_literal $Builtin.Int64, 1        // users: %175, %174, %150
  %145 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %146
  %146 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %145 : $FloatingPointSign // user: %150
  %147 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %148
  %148 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %147 : $FloatingPointSign // user: %150
  %149 = enum $Optional<FloatingPointSign>, #Optional.none!enumelt // user: %150
  %150 = select_value %143 : $Builtin.Int64, case %144: %146, case %86: %148, default %149 : $Optional<FloatingPointSign> // user: %151
  switch_enum %150 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb39, case #Optional.none!enumelt: bb37 // id: %151

bb37:                                             // Preds: bb36
  %152 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %159
  %153 = integer_literal $Builtin.Word, 97        // user: %160
  %154 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %156
  %155 = integer_literal $Builtin.Word, 57        // user: %158
  %156 = builtin "ptrtoint_Word"(%154 : $Builtin.RawPointer) : $Builtin.Word // user: %158
  %157 = integer_literal $Builtin.Int8, 2         // users: %167, %160, %158
  %158 = struct $StaticString (%156 : $Builtin.Word, %155 : $Builtin.Word, %157 : $Builtin.Int8) // user: %171
  %159 = builtin "ptrtoint_Word"(%152 : $Builtin.RawPointer) : $Builtin.Word // user: %160
  %160 = struct $StaticString (%159 : $Builtin.Word, %153 : $Builtin.Word, %157 : $Builtin.Int8) // user: %171
  %161 = integer_literal $Builtin.Int64, 206      // user: %162
  %162 = struct $UInt (%161 : $Builtin.Int64)     // user: %171
  br bb38                                         // id: %163

bb38:                                             // Preds: bb37
  %164 = string_literal utf8 "Fatal error"        // user: %166
  %165 = integer_literal $Builtin.Word, 11        // user: %167
  %166 = builtin "ptrtoint_Word"(%164 : $Builtin.RawPointer) : $Builtin.Word // user: %167
  %167 = struct $StaticString (%166 : $Builtin.Word, %165 : $Builtin.Word, %157 : $Builtin.Int8) // user: %171
  %168 = integer_literal $Builtin.Int32, 1        // user: %169
  %169 = struct $UInt32 (%168 : $Builtin.Int32)   // user: %171
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %170 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %171
  %171 = apply %170(%167, %158, %160, %162, %169) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %172

// %173                                           // user: %174
bb39(%173 : $FloatingPointSign):                  // Preds: bb36
  %174 = select_enum %173 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %86, case #FloatingPointSign.minus!enumelt: %144 : $Builtin.Int64 // user: %175
  %175 = builtin "cmp_eq_Int64"(%174 : $Builtin.Int64, %144 : $Builtin.Int64) : $Builtin.Int1 // user: %176
  cond_br %175, bb41, bb40                        // id: %176

bb40:                                             // Preds: bb39
  %177 = enum $FloatingPointClassification, #FloatingPointClassification.positiveZero!enumelt // user: %178
  br bb48(%177 : $FloatingPointClassification)    // id: %178

bb41:                                             // Preds: bb39
  %179 = enum $FloatingPointClassification, #FloatingPointClassification.negativeZero!enumelt // user: %180
  br bb48(%179 : $FloatingPointClassification)    // id: %180

bb42:                                             // Preds: bb24
  %181 = integer_literal $Builtin.Int32, 31       // user: %182
  %182 = builtin "lshr_Int32"(%2 : $Builtin.Int32, %181 : $Builtin.Int32) : $Builtin.Int32 // user: %183
  %183 = builtin "zextOrBitCast_Int32_Int64"(%182 : $Builtin.Int32) : $Builtin.Int64 // user: %190
  %184 = integer_literal $Builtin.Int64, 1        // users: %215, %214, %190
  %185 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %186
  %186 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %185 : $FloatingPointSign // user: %190
  %187 = enum $FloatingPointSign, #FloatingPointSign.plus!enumelt // user: %188
  %188 = enum $Optional<FloatingPointSign>, #Optional.some!enumelt.1, %187 : $FloatingPointSign // user: %190
  %189 = enum $Optional<FloatingPointSign>, #Optional.none!enumelt // user: %190
  %190 = select_value %183 : $Builtin.Int64, case %184: %186, case %86: %188, default %189 : $Optional<FloatingPointSign> // user: %191
  switch_enum %190 : $Optional<FloatingPointSign>, case #Optional.some!enumelt.1: bb45, case #Optional.none!enumelt: bb43 // id: %191

bb43:                                             // Preds: bb42
  %192 = string_literal utf8 "/swift-base/build/buildbot_linux/swift-linux-x86_64/stdlib/public/core/8/FloatingPointTypes.swift" // user: %199
  %193 = integer_literal $Builtin.Word, 97        // user: %200
  %194 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %196
  %195 = integer_literal $Builtin.Word, 57        // user: %198
  %196 = builtin "ptrtoint_Word"(%194 : $Builtin.RawPointer) : $Builtin.Word // user: %198
  %197 = integer_literal $Builtin.Int8, 2         // users: %207, %200, %198
  %198 = struct $StaticString (%196 : $Builtin.Word, %195 : $Builtin.Word, %197 : $Builtin.Int8) // user: %211
  %199 = builtin "ptrtoint_Word"(%192 : $Builtin.RawPointer) : $Builtin.Word // user: %200
  %200 = struct $StaticString (%199 : $Builtin.Word, %193 : $Builtin.Word, %197 : $Builtin.Int8) // user: %211
  %201 = integer_literal $Builtin.Int64, 206      // user: %202
  %202 = struct $UInt (%201 : $Builtin.Int64)     // user: %211
  br bb44                                         // id: %203

bb44:                                             // Preds: bb43
  %204 = string_literal utf8 "Fatal error"        // user: %206
  %205 = integer_literal $Builtin.Word, 11        // user: %207
  %206 = builtin "ptrtoint_Word"(%204 : $Builtin.RawPointer) : $Builtin.Word // user: %207
  %207 = struct $StaticString (%206 : $Builtin.Word, %205 : $Builtin.Word, %197 : $Builtin.Int8) // user: %211
  %208 = integer_literal $Builtin.Int32, 1        // user: %209
  %209 = struct $UInt32 (%208 : $Builtin.Int32)   // user: %211
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %210 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %211
  %211 = apply %210(%207, %198, %200, %202, %209) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %212

// %213                                           // user: %214
bb45(%213 : $FloatingPointSign):                  // Preds: bb42
  %214 = select_enum %213 : $FloatingPointSign, case #FloatingPointSign.plus!enumelt: %86, case #FloatingPointSign.minus!enumelt: %184 : $Builtin.Int64 // user: %215
  %215 = builtin "cmp_eq_Int64"(%214 : $Builtin.Int64, %184 : $Builtin.Int64) : $Builtin.Int1 // user: %216
  cond_br %215, bb47, bb46                        // id: %216

bb46:                                             // Preds: bb45
  %217 = enum $FloatingPointClassification, #FloatingPointClassification.positiveNormal!enumelt // user: %218
  br bb48(%217 : $FloatingPointClassification)    // id: %218

bb47:                                             // Preds: bb45
  %219 = enum $FloatingPointClassification, #FloatingPointClassification.negativeNormal!enumelt // user: %220
  br bb48(%219 : $FloatingPointClassification)    // id: %220

// %221                                           // user: %222
bb48(%221 : $FloatingPointClassification):        // Preds: bb47 bb46 bb41 bb40 bb35 bb34 bb21 bb20 bb11 bb6
  return %221 : $FloatingPointClassification      // id: %222
} // end sil function '$sSFsE18floatingPointClasss08FloatingB14ClassificationOvgSf_Tgq5'

// specialized _allocateUninitializedArray<A>(_:)
sil [always_inline] @$ss27_allocateUninitializedArrayySayxG_BptBwlFyp_Tg5 : $@convention(thin) (Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer)

sil_witness_table hidden Model.AllDifferentiableVariables: AdditiveArithmetic module sample {
  base_protocol Equatable: Model.AllDifferentiableVariables: Equatable module sample
  method #AdditiveArithmetic.zero!getter.1: <Self where Self : AdditiveArithmetic> (Self.Type) -> () -> Self : @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP4zeroxvgZTW	// protocol witness for static AdditiveArithmetic.zero.getter in conformance Model.AllDifferentiableVariables
  method #AdditiveArithmetic."+"!1: <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> @dynamic_self Self : @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP1poiyxx_xtFZTW	// protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Model.AllDifferentiableVariables
  method #AdditiveArithmetic."+="!1: <Self where Self : AdditiveArithmetic> (Self.Type) -> (inout Self, Self) -> () : @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP2peoiyyxz_xtFZTW	// protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Model.AllDifferentiableVariables
  method #AdditiveArithmetic."-"!1: <Self where Self : AdditiveArithmetic> (Self.Type) -> (Self, Self) -> @dynamic_self Self : @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP1soiyxx_xtFZTW	// protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Model.AllDifferentiableVariables
  method #AdditiveArithmetic."-="!1: <Self where Self : AdditiveArithmetic> (Self.Type) -> (inout Self, Self) -> () : @$s6sample5ModelV26AllDifferentiableVariablesVs18AdditiveArithmeticAAsAFP2seoiyyxz_xtFZTW	// protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Model.AllDifferentiableVariables
}

sil_witness_table hidden Model.AllDifferentiableVariables: Differentiable module sample {
  base_protocol _Differentiable: Model.AllDifferentiableVariables: _Differentiable module sample
}

sil_witness_table hidden Model.AllDifferentiableVariables: Equatable module sample {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s6sample5ModelV26AllDifferentiableVariablesVSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance Model.AllDifferentiableVariables
}

sil_witness_table hidden Model.AllDifferentiableVariables: VectorNumeric module sample {
  base_protocol AdditiveArithmetic: Model.AllDifferentiableVariables: AdditiveArithmetic module sample
  associated_type_protocol (Scalar: AdditiveArithmetic): Float: AdditiveArithmetic module Swift
  associated_type Scalar: Float
  method #VectorNumeric."*"!1: <Self where Self : VectorNumeric> (Self.Type) -> (Self.Scalar, Self) -> @dynamic_self Self : @$s6sample5ModelV26AllDifferentiableVariablesVs13VectorNumericAAsAFP1moiyx6ScalarQz_xtFZTW	// protocol witness for static VectorNumeric.* infix(_:_:) in conformance Model.AllDifferentiableVariables
  method #VectorNumeric."*="!1: <Self where Self : VectorNumeric> (Self.Type) -> (inout Self, Self.Scalar) -> () : @$s6sample5ModelV26AllDifferentiableVariablesVs13VectorNumericAAsAFP2meoiyyxz_6ScalarQztFZTW	// protocol witness for static VectorNumeric.*= infix(_:_:) in conformance Model.AllDifferentiableVariables
}

sil_witness_table hidden Model.AllDifferentiableVariables: _Differentiable module sample {
  base_protocol __Differentiable: Model.AllDifferentiableVariables: __Differentiable module sample
  associated_type_protocol (CotangentVector: Differentiable): Model.AllDifferentiableVariables: Differentiable module sample
  associated_type_protocol (TangentVector: Differentiable): Model.AllDifferentiableVariables: Differentiable module sample
}

sil_witness_table hidden Model.AllDifferentiableVariables: __Differentiable module sample {
  associated_type_protocol (AllDifferentiableVariables: Differentiable): Model.AllDifferentiableVariables: Differentiable module sample
  associated_type_protocol (CotangentVector: AdditiveArithmetic): Model.AllDifferentiableVariables: AdditiveArithmetic module sample
  associated_type_protocol (TangentVector: AdditiveArithmetic): Model.AllDifferentiableVariables: AdditiveArithmetic module sample
  associated_type TangentVector: Model.AllDifferentiableVariables
  associated_type CotangentVector: Model.AllDifferentiableVariables
  associated_type AllDifferentiableVariables: Model.AllDifferentiableVariables
  method #__Differentiable.allDifferentiableVariables!getter.1: <Self where Self : __Differentiable> (Self) -> () -> Self.AllDifferentiableVariables : @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvgTW	// protocol witness for __Differentiable.allDifferentiableVariables.getter in conformance Model.AllDifferentiableVariables
  method #__Differentiable.allDifferentiableVariables!setter.1: <Self where Self : __Differentiable> (inout Self) -> (Self.AllDifferentiableVariables) -> () : @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvsTW	// protocol witness for __Differentiable.allDifferentiableVariables.setter in conformance Model.AllDifferentiableVariables
  method #__Differentiable.allDifferentiableVariables!modify.1: <Self where Self : __Differentiable> (inout Self) -> () -> () : @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP03alldE0ADQzvMTW	// protocol witness for __Differentiable.allDifferentiableVariables.modify in conformance Model.AllDifferentiableVariables
  method #__Differentiable.moved!1: <Self where Self : __Differentiable> (Self) -> (Self.TangentVector) -> @dynamic_self Self : @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP5moved5alongx13TangentVectorQz_tFTW	// protocol witness for __Differentiable.moved(along:) in conformance Model.AllDifferentiableVariables
  method #__Differentiable.tangentVector!1: <Self where Self : __Differentiable> (Self) -> (Self.CotangentVector) -> Self.TangentVector : @$s6sample5ModelV26AllDifferentiableVariablesVs02__D0AAsAFP13tangentVector4from07TangentG0Qz09CotangentG0Qz_tFTW	// protocol witness for __Differentiable.tangentVector(from:) in conformance Model.AllDifferentiableVariables
}

sil_witness_table hidden Model: Differentiable module sample {
  base_protocol _Differentiable: Model: _Differentiable module sample
}

sil_witness_table hidden Model: _Differentiable module sample {
  base_protocol __Differentiable: Model: __Differentiable module sample
  associated_type_protocol (CotangentVector: Differentiable): Model.AllDifferentiableVariables: Differentiable module sample
  associated_type_protocol (TangentVector: Differentiable): Model.AllDifferentiableVariables: Differentiable module sample
}

sil_witness_table hidden Model: __Differentiable module sample {
  associated_type_protocol (AllDifferentiableVariables: Differentiable): Model.AllDifferentiableVariables: Differentiable module sample
  associated_type_protocol (CotangentVector: AdditiveArithmetic): Model.AllDifferentiableVariables: AdditiveArithmetic module sample
  associated_type_protocol (TangentVector: AdditiveArithmetic): Model.AllDifferentiableVariables: AdditiveArithmetic module sample
  associated_type TangentVector: Model.AllDifferentiableVariables
  associated_type CotangentVector: Model.AllDifferentiableVariables
  associated_type AllDifferentiableVariables: Model.AllDifferentiableVariables
  method #__Differentiable.allDifferentiableVariables!getter.1: <Self where Self : __Differentiable> (Self) -> () -> Self.AllDifferentiableVariables : @$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvgTW	// protocol witness for __Differentiable.allDifferentiableVariables.getter in conformance Model
  method #__Differentiable.allDifferentiableVariables!setter.1: <Self where Self : __Differentiable> (inout Self) -> (Self.AllDifferentiableVariables) -> () : @$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvsTW	// protocol witness for __Differentiable.allDifferentiableVariables.setter in conformance Model
  method #__Differentiable.allDifferentiableVariables!modify.1: <Self where Self : __Differentiable> (inout Self) -> () -> () : @$s6sample5ModelVs16__DifferentiableAAsADP03allC9Variables03AllcE0QzvMTW	// protocol witness for __Differentiable.allDifferentiableVariables.modify in conformance Model
  method #__Differentiable.moved!1: <Self where Self : __Differentiable> (Self) -> (Self.TangentVector) -> @dynamic_self Self : @$s6sample5ModelVs16__DifferentiableAAsADP5moved5alongx13TangentVectorQz_tFTW	// protocol witness for __Differentiable.moved(along:) in conformance Model
  method #__Differentiable.tangentVector!1: <Self where Self : __Differentiable> (Self) -> (Self.CotangentVector) -> Self.TangentVector : @$s6sample5ModelVs16__DifferentiableAAsADP13tangentVector4from07TangentE0Qz09CotangentE0Qz_tFTW	// protocol witness for __Differentiable.tangentVector(from:) in conformance Model
}

sil_witness_table public_external [serialized] Float: FloatingPoint module Swift {
  base_protocol Hashable: Float: Hashable module Swift
  base_protocol SignedNumeric: Float: SignedNumeric module Swift
  base_protocol Strideable: Float: Strideable module Swift
  associated_type_protocol (Exponent: SignedInteger): Int: SignedInteger module Swift
  associated_type Exponent: Int
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint> (Self.Type) -> (FloatingPointSign, Self.Exponent, Self) -> Self : @$sSfSFsSF4sign8exponent11significandxs17FloatingPointSignO_8ExponentQzxtcfCTW	// protocol witness for FloatingPoint.init(sign:exponent:significand:) in conformance Float
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self : @$sSfSFsSF6signOf09magnitudeB0xx_xtcfCTW	// protocol witness for FloatingPoint.init(signOf:magnitudeOf:) in conformance Float
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint> (Self.Type) -> (Int) -> Self : @$sSfSFsSFyxSicfCTW	// protocol witness for FloatingPoint.init(_:) in conformance Float
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint><Source where Source : BinaryInteger> (Self.Type) -> (Source) -> Self : @$sSfSFsSFyxqd__cSzRd__lufCTW	// protocol witness for FloatingPoint.init<A>(_:) in conformance Float
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint><Source where Source : BinaryInteger> (Self.Type) -> (Source) -> Self? : @$sSfSFsSF7exactlyxSgqd___tcSzRd__lufCTW	// protocol witness for FloatingPoint.init<A>(exactly:) in conformance Float
  method #FloatingPoint.radix!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Int : @$sSfSFsSF5radixSivgZTW	// protocol witness for static FloatingPoint.radix.getter in conformance Float
  method #FloatingPoint.nan!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF3nanxvgZTW	// protocol witness for static FloatingPoint.nan.getter in conformance Float
  method #FloatingPoint.signalingNaN!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF12signalingNaNxvgZTW	// protocol witness for static FloatingPoint.signalingNaN.getter in conformance Float
  method #FloatingPoint.infinity!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF8infinityxvgZTW	// protocol witness for static FloatingPoint.infinity.getter in conformance Float
  method #FloatingPoint.greatestFiniteMagnitude!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF23greatestFiniteMagnitudexvgZTW	// protocol witness for static FloatingPoint.greatestFiniteMagnitude.getter in conformance Float
  method #FloatingPoint.pi!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF2pixvgZTW	// protocol witness for static FloatingPoint.pi.getter in conformance Float
  method #FloatingPoint.ulp!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSfSFsSF3ulpxvgTW	// protocol witness for FloatingPoint.ulp.getter in conformance Float
  method #FloatingPoint.ulpOfOne!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF8ulpOfOnexvgZTW	// protocol witness for static FloatingPoint.ulpOfOne.getter in conformance Float
  method #FloatingPoint.leastNormalMagnitude!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF20leastNormalMagnitudexvgZTW	// protocol witness for static FloatingPoint.leastNormalMagnitude.getter in conformance Float
  method #FloatingPoint.leastNonzeroMagnitude!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSfSFsSF21leastNonzeroMagnitudexvgZTW	// protocol witness for static FloatingPoint.leastNonzeroMagnitude.getter in conformance Float
  method #FloatingPoint.sign!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> FloatingPointSign : @$sSfSFsSF4signs17FloatingPointSignOvgTW	// protocol witness for FloatingPoint.sign.getter in conformance Float
  method #FloatingPoint.exponent!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self.Exponent : @$sSfSFsSF8exponent8ExponentQzvgTW	// protocol witness for FloatingPoint.exponent.getter in conformance Float
  method #FloatingPoint.significand!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSfSFsSF11significandxvgTW	// protocol witness for FloatingPoint.significand.getter in conformance Float
  method #FloatingPoint."/"!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> @dynamic_self Self : @$sSfSFsSF1doiyxx_xtFZTW	// protocol witness for static FloatingPoint./ infix(_:_:) in conformance Float
  method #FloatingPoint."/="!1: <Self where Self : FloatingPoint> (Self.Type) -> (inout Self, Self) -> () : @$sSfSFsSF2deoiyyxz_xtFZTW	// protocol witness for static FloatingPoint./= infix(_:_:) in conformance Float
  method #FloatingPoint.remainder!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> @dynamic_self Self : @$sSfSFsSF9remainder10dividingByxx_tFTW	// protocol witness for FloatingPoint.remainder(dividingBy:) in conformance Float
  method #FloatingPoint.formRemainder!1: <Self where Self : FloatingPoint> (inout Self) -> (Self) -> () : @$sSfSFsSF13formRemainder10dividingByyx_tFTW	// protocol witness for FloatingPoint.formRemainder(dividingBy:) in conformance Float
  method #FloatingPoint.truncatingRemainder!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> @dynamic_self Self : @$sSfSFsSF19truncatingRemainder10dividingByxx_tFTW	// protocol witness for FloatingPoint.truncatingRemainder(dividingBy:) in conformance Float
  method #FloatingPoint.formTruncatingRemainder!1: <Self where Self : FloatingPoint> (inout Self) -> (Self) -> () : @$sSfSFsSF23formTruncatingRemainder10dividingByyx_tFTW	// protocol witness for FloatingPoint.formTruncatingRemainder(dividingBy:) in conformance Float
  method #FloatingPoint.squareRoot!1: <Self where Self : FloatingPoint> (Self) -> () -> @dynamic_self Self : @$sSfSFsSF10squareRootxyFTW	// protocol witness for FloatingPoint.squareRoot() in conformance Float
  method #FloatingPoint.formSquareRoot!1: <Self where Self : FloatingPoint> (inout Self) -> () -> () : @$sSfSFsSF14formSquareRootyyFTW	// protocol witness for FloatingPoint.formSquareRoot() in conformance Float
  method #FloatingPoint.addingProduct!1: <Self where Self : FloatingPoint> (Self) -> (Self, Self) -> @dynamic_self Self : @$sSfSFsSF13addingProductyxx_xtFTW	// protocol witness for FloatingPoint.addingProduct(_:_:) in conformance Float
  method #FloatingPoint.addProduct!1: <Self where Self : FloatingPoint> (inout Self) -> (Self, Self) -> () : @$sSfSFsSF10addProductyyx_xtFTW	// protocol witness for FloatingPoint.addProduct(_:_:) in conformance Float
  method #FloatingPoint.minimum!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> @dynamic_self Self : @$sSfSFsSF7minimumyxx_xtFZTW	// protocol witness for static FloatingPoint.minimum(_:_:) in conformance Float
  method #FloatingPoint.maximum!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> @dynamic_self Self : @$sSfSFsSF7maximumyxx_xtFZTW	// protocol witness for static FloatingPoint.maximum(_:_:) in conformance Float
  method #FloatingPoint.minimumMagnitude!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> @dynamic_self Self : @$sSfSFsSF16minimumMagnitudeyxx_xtFZTW	// protocol witness for static FloatingPoint.minimumMagnitude(_:_:) in conformance Float
  method #FloatingPoint.maximumMagnitude!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> @dynamic_self Self : @$sSfSFsSF16maximumMagnitudeyxx_xtFZTW	// protocol witness for static FloatingPoint.maximumMagnitude(_:_:) in conformance Float
  method #FloatingPoint.rounded!1: <Self where Self : FloatingPoint> (Self) -> (FloatingPointRoundingRule) -> @dynamic_self Self : @$sSfSFsSF7roundedyxs25FloatingPointRoundingRuleOFTW	// protocol witness for FloatingPoint.rounded(_:) in conformance Float
  method #FloatingPoint.round!1: <Self where Self : FloatingPoint> (inout Self) -> (FloatingPointRoundingRule) -> () : @$sSfSFsSF5roundyys25FloatingPointRoundingRuleOFTW	// protocol witness for FloatingPoint.round(_:) in conformance Float
  method #FloatingPoint.nextUp!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSfSFsSF6nextUpxvgTW	// protocol witness for FloatingPoint.nextUp.getter in conformance Float
  method #FloatingPoint.nextDown!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSfSFsSF8nextDownxvgTW	// protocol witness for FloatingPoint.nextDown.getter in conformance Float
  method #FloatingPoint.isEqual!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSfSFsSF7isEqual2toSbx_tFTW	// protocol witness for FloatingPoint.isEqual(to:) in conformance Float
  method #FloatingPoint.isLess!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSfSFsSF6isLess4thanSbx_tFTW	// protocol witness for FloatingPoint.isLess(than:) in conformance Float
  method #FloatingPoint.isLessThanOrEqualTo!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSfSFsSF19isLessThanOrEqualToySbxFTW	// protocol witness for FloatingPoint.isLessThanOrEqualTo(_:) in conformance Float
  method #FloatingPoint.isTotallyOrdered!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSfSFsSF16isTotallyOrdered14belowOrEqualToSbx_tFTW	// protocol witness for FloatingPoint.isTotallyOrdered(belowOrEqualTo:) in conformance Float
  method #FloatingPoint.isNormal!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF8isNormalSbvgTW	// protocol witness for FloatingPoint.isNormal.getter in conformance Float
  method #FloatingPoint.isFinite!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF8isFiniteSbvgTW	// protocol witness for FloatingPoint.isFinite.getter in conformance Float
  method #FloatingPoint.isZero!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF6isZeroSbvgTW	// protocol witness for FloatingPoint.isZero.getter in conformance Float
  method #FloatingPoint.isSubnormal!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF11isSubnormalSbvgTW	// protocol witness for FloatingPoint.isSubnormal.getter in conformance Float
  method #FloatingPoint.isInfinite!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF10isInfiniteSbvgTW	// protocol witness for FloatingPoint.isInfinite.getter in conformance Float
  method #FloatingPoint.isNaN!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF5isNaNSbvgTW	// protocol witness for FloatingPoint.isNaN.getter in conformance Float
  method #FloatingPoint.isSignalingNaN!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF14isSignalingNaNSbvgTW	// protocol witness for FloatingPoint.isSignalingNaN.getter in conformance Float
  method #FloatingPoint.floatingPointClass!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> FloatingPointClassification : @$sSfSFsSF18floatingPointClasss08FloatingB14ClassificationOvgTW	// protocol witness for FloatingPoint.floatingPointClass.getter in conformance Float
  method #FloatingPoint.isCanonical!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSfSFsSF11isCanonicalSbvgTW	// protocol witness for FloatingPoint.isCanonical.getter in conformance Float
}



